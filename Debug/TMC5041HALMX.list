
TMC5041HALMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000188c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b04  08001b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  20000070  08001b7c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000138  08001b7c  00020138  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ce0f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ffe  00000000  00000000  0002cea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025a5  00000000  00000000  0002eea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005b0  00000000  00000000  00031450  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  00031a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003890  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002318  00000000  00000000  00035950  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037c68  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012fc  00000000  00000000  00037ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08001a58 	.word	0x08001a58

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08001a58 	.word	0x08001a58

08000224 <HAL_MspInit>:
 8000224:	4770      	bx	lr
	...

08000228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000228:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <HAL_InitTick+0x3c>)
{
 800022c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800022e:	7818      	ldrb	r0, [r3, #0]
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	fbb3 f3f0 	udiv	r3, r3, r0
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <HAL_InitTick+0x40>)
 800023a:	6810      	ldr	r0, [r2, #0]
 800023c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000240:	f000 f880 	bl	8000344 <HAL_SYSTICK_Config>
 8000244:	4604      	mov	r4, r0
 8000246:	b958      	cbnz	r0, 8000260 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000248:	2d0f      	cmp	r5, #15
 800024a:	d809      	bhi.n	8000260 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800024c:	4602      	mov	r2, r0
 800024e:	4629      	mov	r1, r5
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 f842 	bl	80002dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <HAL_InitTick+0x44>)
 800025a:	4620      	mov	r0, r4
 800025c:	601d      	str	r5, [r3, #0]
 800025e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000260:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000262:	bd38      	pop	{r3, r4, r5, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	20000008 	.word	0x20000008
 800026c:	20000004 	.word	0x20000004

08000270 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000270:	4a07      	ldr	r2, [pc, #28]	; (8000290 <HAL_Init+0x20>)
{
 8000272:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000274:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000276:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000278:	f043 0310 	orr.w	r3, r3, #16
 800027c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027e:	f000 f81b 	bl	80002b8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000282:	2000      	movs	r0, #0
 8000284:	f7ff ffd0 	bl	8000228 <HAL_InitTick>
  HAL_MspInit();
 8000288:	f7ff ffcc 	bl	8000224 <HAL_MspInit>
}
 800028c:	2000      	movs	r0, #0
 800028e:	bd08      	pop	{r3, pc}
 8000290:	40022000 	.word	0x40022000

08000294 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000294:	4a03      	ldr	r2, [pc, #12]	; (80002a4 <HAL_IncTick+0x10>)
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <HAL_IncTick+0x14>)
 8000298:	6811      	ldr	r1, [r2, #0]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	440b      	add	r3, r1
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20000098 	.word	0x20000098
 80002a8:	20000000 	.word	0x20000000

080002ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002ac:	4b01      	ldr	r3, [pc, #4]	; (80002b4 <HAL_GetTick+0x8>)
 80002ae:	6818      	ldr	r0, [r3, #0]
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	20000098 	.word	0x20000098

080002b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002ba:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002c6:	041b      	lsls	r3, r3, #16
 80002c8:	0c1b      	lsrs	r3, r3, #16
 80002ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80002d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80002d4:	60d3      	str	r3, [r2, #12]
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002de:	b530      	push	{r4, r5, lr}
 80002e0:	68dc      	ldr	r4, [r3, #12]
 80002e2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002e6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ea:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ec:	2b04      	cmp	r3, #4
 80002ee:	bf28      	it	cs
 80002f0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f8:	bf98      	it	ls
 80002fa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000300:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000304:	bf88      	it	hi
 8000306:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000308:	4019      	ands	r1, r3
 800030a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800030c:	fa05 f404 	lsl.w	r4, r5, r4
 8000310:	3c01      	subs	r4, #1
 8000312:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000314:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000316:	ea42 0201 	orr.w	r2, r2, r1
 800031a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	bfaf      	iteee	ge
 8000320:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	4b06      	ldrlt	r3, [pc, #24]	; (8000340 <HAL_NVIC_SetPriority+0x64>)
 8000326:	f000 000f 	andlt.w	r0, r0, #15
 800032a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032c:	bfa5      	ittet	ge
 800032e:	b2d2      	uxtbge	r2, r2
 8000330:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000334:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000336:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800033a:	bd30      	pop	{r4, r5, pc}
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000ed14 	.word	0xe000ed14

08000344 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000344:	3801      	subs	r0, #1
 8000346:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800034a:	d20a      	bcs.n	8000362 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	4a06      	ldr	r2, [pc, #24]	; (800036c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000352:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000354:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000358:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000362:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000374:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000376:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000378:	4f6c      	ldr	r7, [pc, #432]	; (800052c <HAL_GPIO_Init+0x1bc>)
 800037a:	4b6d      	ldr	r3, [pc, #436]	; (8000530 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800037c:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000538 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000380:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800053c <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 8000384:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000388:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800038a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800038e:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000392:	45a0      	cmp	r8, r4
 8000394:	f040 8085 	bne.w	80004a2 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 8000398:	684d      	ldr	r5, [r1, #4]
 800039a:	2d12      	cmp	r5, #18
 800039c:	f000 80b7 	beq.w	800050e <HAL_GPIO_Init+0x19e>
 80003a0:	f200 808d 	bhi.w	80004be <HAL_GPIO_Init+0x14e>
 80003a4:	2d02      	cmp	r5, #2
 80003a6:	f000 80af 	beq.w	8000508 <HAL_GPIO_Init+0x198>
 80003aa:	f200 8081 	bhi.w	80004b0 <HAL_GPIO_Init+0x140>
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	f000 8091 	beq.w	80004d6 <HAL_GPIO_Init+0x166>
 80003b4:	2d01      	cmp	r5, #1
 80003b6:	f000 80a5 	beq.w	8000504 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ba:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	bf93      	iteet	ls
 80003c2:	4682      	movls	sl, r0
 80003c4:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003c8:	3d08      	subhi	r5, #8
 80003ca:	f8d0 b000 	ldrls.w	fp, [r0]
 80003ce:	bf92      	itee	ls
 80003d0:	00b5      	lslls	r5, r6, #2
 80003d2:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003d6:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003d8:	fa09 f805 	lsl.w	r8, r9, r5
 80003dc:	ea2b 0808 	bic.w	r8, fp, r8
 80003e0:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e4:	bf88      	it	hi
 80003e6:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ea:	ea48 0505 	orr.w	r5, r8, r5
 80003ee:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f2:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003f6:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003fa:	d052      	beq.n	80004a2 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003fc:	69bd      	ldr	r5, [r7, #24]
 80003fe:	f026 0803 	bic.w	r8, r6, #3
 8000402:	f045 0501 	orr.w	r5, r5, #1
 8000406:	61bd      	str	r5, [r7, #24]
 8000408:	69bd      	ldr	r5, [r7, #24]
 800040a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800040e:	f005 0501 	and.w	r5, r5, #1
 8000412:	9501      	str	r5, [sp, #4]
 8000414:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000418:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041c:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000422:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000426:	fa09 f90b 	lsl.w	r9, r9, fp
 800042a:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	4d41      	ldr	r5, [pc, #260]	; (8000534 <HAL_GPIO_Init+0x1c4>)
 8000430:	42a8      	cmp	r0, r5
 8000432:	d071      	beq.n	8000518 <HAL_GPIO_Init+0x1a8>
 8000434:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000438:	42a8      	cmp	r0, r5
 800043a:	d06f      	beq.n	800051c <HAL_GPIO_Init+0x1ac>
 800043c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000440:	42a8      	cmp	r0, r5
 8000442:	d06d      	beq.n	8000520 <HAL_GPIO_Init+0x1b0>
 8000444:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000448:	42a8      	cmp	r0, r5
 800044a:	d06b      	beq.n	8000524 <HAL_GPIO_Init+0x1b4>
 800044c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000450:	42a8      	cmp	r0, r5
 8000452:	d069      	beq.n	8000528 <HAL_GPIO_Init+0x1b8>
 8000454:	4570      	cmp	r0, lr
 8000456:	bf0c      	ite	eq
 8000458:	2505      	moveq	r5, #5
 800045a:	2506      	movne	r5, #6
 800045c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000460:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000464:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000468:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800046a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800046e:	bf14      	ite	ne
 8000470:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000472:	43a5      	biceq	r5, r4
 8000474:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000476:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000478:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800047c:	bf14      	ite	ne
 800047e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000480:	43a5      	biceq	r5, r4
 8000482:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000484:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000486:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800048a:	bf14      	ite	ne
 800048c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800048e:	43a5      	biceq	r5, r4
 8000490:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000492:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000494:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000498:	bf14      	ite	ne
 800049a:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800049c:	ea25 0404 	biceq.w	r4, r5, r4
 80004a0:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004a2:	3601      	adds	r6, #1
 80004a4:	2e10      	cmp	r6, #16
 80004a6:	f47f af6d 	bne.w	8000384 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80004aa:	b003      	add	sp, #12
 80004ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80004b0:	2d03      	cmp	r5, #3
 80004b2:	d025      	beq.n	8000500 <HAL_GPIO_Init+0x190>
 80004b4:	2d11      	cmp	r5, #17
 80004b6:	d180      	bne.n	80003ba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004b8:	68ca      	ldr	r2, [r1, #12]
 80004ba:	3204      	adds	r2, #4
          break;
 80004bc:	e77d      	b.n	80003ba <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004be:	4565      	cmp	r5, ip
 80004c0:	d009      	beq.n	80004d6 <HAL_GPIO_Init+0x166>
 80004c2:	d812      	bhi.n	80004ea <HAL_GPIO_Init+0x17a>
 80004c4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000540 <HAL_GPIO_Init+0x1d0>
 80004c8:	454d      	cmp	r5, r9
 80004ca:	d004      	beq.n	80004d6 <HAL_GPIO_Init+0x166>
 80004cc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004d0:	454d      	cmp	r5, r9
 80004d2:	f47f af72 	bne.w	80003ba <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004d6:	688a      	ldr	r2, [r1, #8]
 80004d8:	b1e2      	cbz	r2, 8000514 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004da:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004dc:	bf0c      	ite	eq
 80004de:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004e2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e6:	2208      	movs	r2, #8
 80004e8:	e767      	b.n	80003ba <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80004ea:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000544 <HAL_GPIO_Init+0x1d4>
 80004ee:	454d      	cmp	r5, r9
 80004f0:	d0f1      	beq.n	80004d6 <HAL_GPIO_Init+0x166>
 80004f2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004f6:	454d      	cmp	r5, r9
 80004f8:	d0ed      	beq.n	80004d6 <HAL_GPIO_Init+0x166>
 80004fa:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80004fe:	e7e7      	b.n	80004d0 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000500:	2200      	movs	r2, #0
 8000502:	e75a      	b.n	80003ba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	68ca      	ldr	r2, [r1, #12]
          break;
 8000506:	e758      	b.n	80003ba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000508:	68ca      	ldr	r2, [r1, #12]
 800050a:	3208      	adds	r2, #8
          break;
 800050c:	e755      	b.n	80003ba <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800050e:	68ca      	ldr	r2, [r1, #12]
 8000510:	320c      	adds	r2, #12
          break;
 8000512:	e752      	b.n	80003ba <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000514:	2204      	movs	r2, #4
 8000516:	e750      	b.n	80003ba <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000518:	2500      	movs	r5, #0
 800051a:	e79f      	b.n	800045c <HAL_GPIO_Init+0xec>
 800051c:	2501      	movs	r5, #1
 800051e:	e79d      	b.n	800045c <HAL_GPIO_Init+0xec>
 8000520:	2502      	movs	r5, #2
 8000522:	e79b      	b.n	800045c <HAL_GPIO_Init+0xec>
 8000524:	2503      	movs	r5, #3
 8000526:	e799      	b.n	800045c <HAL_GPIO_Init+0xec>
 8000528:	2504      	movs	r5, #4
 800052a:	e797      	b.n	800045c <HAL_GPIO_Init+0xec>
 800052c:	40021000 	.word	0x40021000
 8000530:	40010400 	.word	0x40010400
 8000534:	40010800 	.word	0x40010800
 8000538:	40011c00 	.word	0x40011c00
 800053c:	10210000 	.word	0x10210000
 8000540:	10110000 	.word	0x10110000
 8000544:	10310000 	.word	0x10310000

08000548 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000548:	b10a      	cbz	r2, 800054e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800054a:	6101      	str	r1, [r0, #16]
 800054c:	4770      	bx	lr
 800054e:	0409      	lsls	r1, r1, #16
 8000550:	e7fb      	b.n	800054a <HAL_GPIO_WritePin+0x2>
	...

08000554 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000554:	6803      	ldr	r3, [r0, #0]
{
 8000556:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055a:	07db      	lsls	r3, r3, #31
{
 800055c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055e:	d410      	bmi.n	8000582 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000560:	682b      	ldr	r3, [r5, #0]
 8000562:	079f      	lsls	r7, r3, #30
 8000564:	d45e      	bmi.n	8000624 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000566:	682b      	ldr	r3, [r5, #0]
 8000568:	0719      	lsls	r1, r3, #28
 800056a:	f100 8095 	bmi.w	8000698 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800056e:	682b      	ldr	r3, [r5, #0]
 8000570:	075a      	lsls	r2, r3, #29
 8000572:	f100 80bf 	bmi.w	80006f4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000576:	69ea      	ldr	r2, [r5, #28]
 8000578:	2a00      	cmp	r2, #0
 800057a:	f040 812d 	bne.w	80007d8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800057e:	2000      	movs	r0, #0
 8000580:	e014      	b.n	80005ac <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000582:	4c90      	ldr	r4, [pc, #576]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	f003 030c 	and.w	r3, r3, #12
 800058a:	2b04      	cmp	r3, #4
 800058c:	d007      	beq.n	800059e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800058e:	6863      	ldr	r3, [r4, #4]
 8000590:	f003 030c 	and.w	r3, r3, #12
 8000594:	2b08      	cmp	r3, #8
 8000596:	d10c      	bne.n	80005b2 <HAL_RCC_OscConfig+0x5e>
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	03de      	lsls	r6, r3, #15
 800059c:	d509      	bpl.n	80005b2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	039c      	lsls	r4, r3, #14
 80005a2:	d5dd      	bpl.n	8000560 <HAL_RCC_OscConfig+0xc>
 80005a4:	686b      	ldr	r3, [r5, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1da      	bne.n	8000560 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80005aa:	2001      	movs	r0, #1
}
 80005ac:	b002      	add	sp, #8
 80005ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b2:	686b      	ldr	r3, [r5, #4]
 80005b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005b8:	d110      	bne.n	80005dc <HAL_RCC_OscConfig+0x88>
 80005ba:	6823      	ldr	r3, [r4, #0]
 80005bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005c2:	f7ff fe73 	bl	80002ac <HAL_GetTick>
 80005c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	0398      	lsls	r0, r3, #14
 80005cc:	d4c8      	bmi.n	8000560 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ce:	f7ff fe6d 	bl	80002ac <HAL_GetTick>
 80005d2:	1b80      	subs	r0, r0, r6
 80005d4:	2864      	cmp	r0, #100	; 0x64
 80005d6:	d9f7      	bls.n	80005c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80005d8:	2003      	movs	r0, #3
 80005da:	e7e7      	b.n	80005ac <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005dc:	b99b      	cbnz	r3, 8000606 <HAL_RCC_OscConfig+0xb2>
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005e4:	6023      	str	r3, [r4, #0]
 80005e6:	6823      	ldr	r3, [r4, #0]
 80005e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005ee:	f7ff fe5d 	bl	80002ac <HAL_GetTick>
 80005f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	0399      	lsls	r1, r3, #14
 80005f8:	d5b2      	bpl.n	8000560 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fa:	f7ff fe57 	bl	80002ac <HAL_GetTick>
 80005fe:	1b80      	subs	r0, r0, r6
 8000600:	2864      	cmp	r0, #100	; 0x64
 8000602:	d9f7      	bls.n	80005f4 <HAL_RCC_OscConfig+0xa0>
 8000604:	e7e8      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000606:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	d103      	bne.n	8000616 <HAL_RCC_OscConfig+0xc2>
 800060e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000612:	6023      	str	r3, [r4, #0]
 8000614:	e7d1      	b.n	80005ba <HAL_RCC_OscConfig+0x66>
 8000616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800061a:	6023      	str	r3, [r4, #0]
 800061c:	6823      	ldr	r3, [r4, #0]
 800061e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000622:	e7cd      	b.n	80005c0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000624:	4c67      	ldr	r4, [pc, #412]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 8000626:	6863      	ldr	r3, [r4, #4]
 8000628:	f013 0f0c 	tst.w	r3, #12
 800062c:	d007      	beq.n	800063e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800062e:	6863      	ldr	r3, [r4, #4]
 8000630:	f003 030c 	and.w	r3, r3, #12
 8000634:	2b08      	cmp	r3, #8
 8000636:	d110      	bne.n	800065a <HAL_RCC_OscConfig+0x106>
 8000638:	6863      	ldr	r3, [r4, #4]
 800063a:	03da      	lsls	r2, r3, #15
 800063c:	d40d      	bmi.n	800065a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	079b      	lsls	r3, r3, #30
 8000642:	d502      	bpl.n	800064a <HAL_RCC_OscConfig+0xf6>
 8000644:	692b      	ldr	r3, [r5, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1af      	bne.n	80005aa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064a:	6823      	ldr	r3, [r4, #0]
 800064c:	696a      	ldr	r2, [r5, #20]
 800064e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000652:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000656:	6023      	str	r3, [r4, #0]
 8000658:	e785      	b.n	8000566 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800065a:	692a      	ldr	r2, [r5, #16]
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <HAL_RCC_OscConfig+0x274>)
 800065e:	b16a      	cbz	r2, 800067c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000664:	f7ff fe22 	bl	80002ac <HAL_GetTick>
 8000668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800066a:	6823      	ldr	r3, [r4, #0]
 800066c:	079f      	lsls	r7, r3, #30
 800066e:	d4ec      	bmi.n	800064a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000670:	f7ff fe1c 	bl	80002ac <HAL_GetTick>
 8000674:	1b80      	subs	r0, r0, r6
 8000676:	2802      	cmp	r0, #2
 8000678:	d9f7      	bls.n	800066a <HAL_RCC_OscConfig+0x116>
 800067a:	e7ad      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800067c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800067e:	f7ff fe15 	bl	80002ac <HAL_GetTick>
 8000682:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	0798      	lsls	r0, r3, #30
 8000688:	f57f af6d 	bpl.w	8000566 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068c:	f7ff fe0e 	bl	80002ac <HAL_GetTick>
 8000690:	1b80      	subs	r0, r0, r6
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f6      	bls.n	8000684 <HAL_RCC_OscConfig+0x130>
 8000696:	e79f      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000698:	69aa      	ldr	r2, [r5, #24]
 800069a:	4c4a      	ldr	r4, [pc, #296]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 800069c:	4b4b      	ldr	r3, [pc, #300]	; (80007cc <HAL_RCC_OscConfig+0x278>)
 800069e:	b1da      	cbz	r2, 80006d8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006a4:	f7ff fe02 	bl	80002ac <HAL_GetTick>
 80006a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006ac:	079b      	lsls	r3, r3, #30
 80006ae:	d50d      	bpl.n	80006cc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006b4:	4b46      	ldr	r3, [pc, #280]	; (80007d0 <HAL_RCC_OscConfig+0x27c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80006bc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80006be:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80006c0:	9b01      	ldr	r3, [sp, #4]
 80006c2:	1e5a      	subs	r2, r3, #1
 80006c4:	9201      	str	r2, [sp, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1f9      	bne.n	80006be <HAL_RCC_OscConfig+0x16a>
 80006ca:	e750      	b.n	800056e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006cc:	f7ff fdee 	bl	80002ac <HAL_GetTick>
 80006d0:	1b80      	subs	r0, r0, r6
 80006d2:	2802      	cmp	r0, #2
 80006d4:	d9e9      	bls.n	80006aa <HAL_RCC_OscConfig+0x156>
 80006d6:	e77f      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80006d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006da:	f7ff fde7 	bl	80002ac <HAL_GetTick>
 80006de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006e2:	079f      	lsls	r7, r3, #30
 80006e4:	f57f af43 	bpl.w	800056e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006e8:	f7ff fde0 	bl	80002ac <HAL_GetTick>
 80006ec:	1b80      	subs	r0, r0, r6
 80006ee:	2802      	cmp	r0, #2
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0x18c>
 80006f2:	e771      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f4:	4c33      	ldr	r4, [pc, #204]	; (80007c4 <HAL_RCC_OscConfig+0x270>)
 80006f6:	69e3      	ldr	r3, [r4, #28]
 80006f8:	00d8      	lsls	r0, r3, #3
 80006fa:	d424      	bmi.n	8000746 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	69e3      	ldr	r3, [r4, #28]
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61e3      	str	r3, [r4, #28]
 8000706:	69e3      	ldr	r3, [r4, #28]
 8000708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000710:	4e30      	ldr	r6, [pc, #192]	; (80007d4 <HAL_RCC_OscConfig+0x280>)
 8000712:	6833      	ldr	r3, [r6, #0]
 8000714:	05d9      	lsls	r1, r3, #23
 8000716:	d518      	bpl.n	800074a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000718:	68eb      	ldr	r3, [r5, #12]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d126      	bne.n	800076c <HAL_RCC_OscConfig+0x218>
 800071e:	6a23      	ldr	r3, [r4, #32]
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000726:	f7ff fdc1 	bl	80002ac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800072a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800072e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	079b      	lsls	r3, r3, #30
 8000734:	d53f      	bpl.n	80007b6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000736:	2f00      	cmp	r7, #0
 8000738:	f43f af1d 	beq.w	8000576 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800073c:	69e3      	ldr	r3, [r4, #28]
 800073e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000742:	61e3      	str	r3, [r4, #28]
 8000744:	e717      	b.n	8000576 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000746:	2700      	movs	r7, #0
 8000748:	e7e2      	b.n	8000710 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800074a:	6833      	ldr	r3, [r6, #0]
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000752:	f7ff fdab 	bl	80002ac <HAL_GetTick>
 8000756:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000758:	6833      	ldr	r3, [r6, #0]
 800075a:	05da      	lsls	r2, r3, #23
 800075c:	d4dc      	bmi.n	8000718 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800075e:	f7ff fda5 	bl	80002ac <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	2864      	cmp	r0, #100	; 0x64
 8000768:	d9f6      	bls.n	8000758 <HAL_RCC_OscConfig+0x204>
 800076a:	e735      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800076c:	b9ab      	cbnz	r3, 800079a <HAL_RCC_OscConfig+0x246>
 800076e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000770:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6223      	str	r3, [r4, #32]
 800077a:	6a23      	ldr	r3, [r4, #32]
 800077c:	f023 0304 	bic.w	r3, r3, #4
 8000780:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000782:	f7ff fd93 	bl	80002ac <HAL_GetTick>
 8000786:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000788:	6a23      	ldr	r3, [r4, #32]
 800078a:	0798      	lsls	r0, r3, #30
 800078c:	d5d3      	bpl.n	8000736 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078e:	f7ff fd8d 	bl	80002ac <HAL_GetTick>
 8000792:	1b80      	subs	r0, r0, r6
 8000794:	4540      	cmp	r0, r8
 8000796:	d9f7      	bls.n	8000788 <HAL_RCC_OscConfig+0x234>
 8000798:	e71e      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800079a:	2b05      	cmp	r3, #5
 800079c:	6a23      	ldr	r3, [r4, #32]
 800079e:	d103      	bne.n	80007a8 <HAL_RCC_OscConfig+0x254>
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6223      	str	r3, [r4, #32]
 80007a6:	e7ba      	b.n	800071e <HAL_RCC_OscConfig+0x1ca>
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	6223      	str	r3, [r4, #32]
 80007ae:	6a23      	ldr	r3, [r4, #32]
 80007b0:	f023 0304 	bic.w	r3, r3, #4
 80007b4:	e7b6      	b.n	8000724 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b6:	f7ff fd79 	bl	80002ac <HAL_GetTick>
 80007ba:	eba0 0008 	sub.w	r0, r0, r8
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d9b6      	bls.n	8000730 <HAL_RCC_OscConfig+0x1dc>
 80007c2:	e709      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
 80007c4:	40021000 	.word	0x40021000
 80007c8:	42420000 	.word	0x42420000
 80007cc:	42420480 	.word	0x42420480
 80007d0:	20000008 	.word	0x20000008
 80007d4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007d8:	4c22      	ldr	r4, [pc, #136]	; (8000864 <HAL_RCC_OscConfig+0x310>)
 80007da:	6863      	ldr	r3, [r4, #4]
 80007dc:	f003 030c 	and.w	r3, r3, #12
 80007e0:	2b08      	cmp	r3, #8
 80007e2:	f43f aee2 	beq.w	80005aa <HAL_RCC_OscConfig+0x56>
 80007e6:	2300      	movs	r3, #0
 80007e8:	4e1f      	ldr	r6, [pc, #124]	; (8000868 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007ec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ee:	d12b      	bne.n	8000848 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007f0:	f7ff fd5c 	bl	80002ac <HAL_GetTick>
 80007f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	0199      	lsls	r1, r3, #6
 80007fa:	d41f      	bmi.n	800083c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007fc:	6a2b      	ldr	r3, [r5, #32]
 80007fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000802:	d105      	bne.n	8000810 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000804:	6862      	ldr	r2, [r4, #4]
 8000806:	68a9      	ldr	r1, [r5, #8]
 8000808:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800080c:	430a      	orrs	r2, r1
 800080e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000810:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000812:	6862      	ldr	r2, [r4, #4]
 8000814:	430b      	orrs	r3, r1
 8000816:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800081a:	4313      	orrs	r3, r2
 800081c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800081e:	2301      	movs	r3, #1
 8000820:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000822:	f7ff fd43 	bl	80002ac <HAL_GetTick>
 8000826:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000828:	6823      	ldr	r3, [r4, #0]
 800082a:	019a      	lsls	r2, r3, #6
 800082c:	f53f aea7 	bmi.w	800057e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000830:	f7ff fd3c 	bl	80002ac <HAL_GetTick>
 8000834:	1b40      	subs	r0, r0, r5
 8000836:	2802      	cmp	r0, #2
 8000838:	d9f6      	bls.n	8000828 <HAL_RCC_OscConfig+0x2d4>
 800083a:	e6cd      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800083c:	f7ff fd36 	bl	80002ac <HAL_GetTick>
 8000840:	1bc0      	subs	r0, r0, r7
 8000842:	2802      	cmp	r0, #2
 8000844:	d9d7      	bls.n	80007f6 <HAL_RCC_OscConfig+0x2a2>
 8000846:	e6c7      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000848:	f7ff fd30 	bl	80002ac <HAL_GetTick>
 800084c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800084e:	6823      	ldr	r3, [r4, #0]
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	f57f ae94 	bpl.w	800057e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000856:	f7ff fd29 	bl	80002ac <HAL_GetTick>
 800085a:	1b40      	subs	r0, r0, r5
 800085c:	2802      	cmp	r0, #2
 800085e:	d9f6      	bls.n	800084e <HAL_RCC_OscConfig+0x2fa>
 8000860:	e6ba      	b.n	80005d8 <HAL_RCC_OscConfig+0x84>
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000
 8000868:	42420060 	.word	0x42420060

0800086c <HAL_RCC_GetSysClockFreq>:
{
 800086c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000870:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000872:	ac02      	add	r4, sp, #8
 8000874:	f103 0510 	add.w	r5, r3, #16
 8000878:	4622      	mov	r2, r4
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	6859      	ldr	r1, [r3, #4]
 800087e:	3308      	adds	r3, #8
 8000880:	c203      	stmia	r2!, {r0, r1}
 8000882:	42ab      	cmp	r3, r5
 8000884:	4614      	mov	r4, r2
 8000886:	d1f7      	bne.n	8000878 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000888:	2301      	movs	r3, #1
 800088a:	f88d 3004 	strb.w	r3, [sp, #4]
 800088e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000890:	4911      	ldr	r1, [pc, #68]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000892:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000896:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000898:	f003 020c 	and.w	r2, r3, #12
 800089c:	2a08      	cmp	r2, #8
 800089e:	d117      	bne.n	80008d0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008a4:	a806      	add	r0, sp, #24
 80008a6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008a8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ae:	d50c      	bpl.n	80008ca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008ba:	aa06      	add	r2, sp, #24
 80008bc:	4413      	add	r3, r2
 80008be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008c2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80008c6:	b007      	add	sp, #28
 80008c8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80008cc:	4350      	muls	r0, r2
 80008ce:	e7fa      	b.n	80008c6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80008d2:	e7f8      	b.n	80008c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80008d4:	08001a70 	.word	0x08001a70
 80008d8:	40021000 	.word	0x40021000
 80008dc:	007a1200 	.word	0x007a1200
 80008e0:	003d0900 	.word	0x003d0900

080008e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e4:	4a54      	ldr	r2, [pc, #336]	; (8000a38 <HAL_RCC_ClockConfig+0x154>)
{
 80008e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ea:	6813      	ldr	r3, [r2, #0]
{
 80008ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	428b      	cmp	r3, r1
{
 80008f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f6:	d32a      	bcc.n	800094e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008f8:	6829      	ldr	r1, [r5, #0]
 80008fa:	078c      	lsls	r4, r1, #30
 80008fc:	d434      	bmi.n	8000968 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008fe:	07ca      	lsls	r2, r1, #31
 8000900:	d447      	bmi.n	8000992 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000902:	4a4d      	ldr	r2, [pc, #308]	; (8000a38 <HAL_RCC_ClockConfig+0x154>)
 8000904:	6813      	ldr	r3, [r2, #0]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	429e      	cmp	r6, r3
 800090c:	f0c0 8082 	bcc.w	8000a14 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000910:	682a      	ldr	r2, [r5, #0]
 8000912:	4c4a      	ldr	r4, [pc, #296]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000914:	f012 0f04 	tst.w	r2, #4
 8000918:	f040 8087 	bne.w	8000a2a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800091c:	0713      	lsls	r3, r2, #28
 800091e:	d506      	bpl.n	800092e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	692a      	ldr	r2, [r5, #16]
 8000924:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000928:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800092c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800092e:	f7ff ff9d 	bl	800086c <HAL_RCC_GetSysClockFreq>
 8000932:	6863      	ldr	r3, [r4, #4]
 8000934:	4a42      	ldr	r2, [pc, #264]	; (8000a40 <HAL_RCC_ClockConfig+0x15c>)
 8000936:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800093a:	5cd3      	ldrb	r3, [r2, r3]
 800093c:	40d8      	lsrs	r0, r3
 800093e:	4b41      	ldr	r3, [pc, #260]	; (8000a44 <HAL_RCC_ClockConfig+0x160>)
 8000940:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f7ff fc70 	bl	8000228 <HAL_InitTick>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
}
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	f023 0307 	bic.w	r3, r3, #7
 8000954:	430b      	orrs	r3, r1
 8000956:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000958:	6813      	ldr	r3, [r2, #0]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	4299      	cmp	r1, r3
 8000960:	d0ca      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000962:	2001      	movs	r0, #1
 8000964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800096a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800096e:	bf1e      	ittt	ne
 8000970:	685a      	ldrne	r2, [r3, #4]
 8000972:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000976:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000978:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800097a:	bf42      	ittt	mi
 800097c:	685a      	ldrmi	r2, [r3, #4]
 800097e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000982:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	68a8      	ldr	r0, [r5, #8]
 8000988:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800098c:	4302      	orrs	r2, r0
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	e7b5      	b.n	80008fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000992:	686a      	ldr	r2, [r5, #4]
 8000994:	4c29      	ldr	r4, [pc, #164]	; (8000a3c <HAL_RCC_ClockConfig+0x158>)
 8000996:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000998:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800099a:	d11c      	bne.n	80009d6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800099c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a0:	d0df      	beq.n	8000962 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a8:	f023 0303 	bic.w	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80009b0:	f7ff fc7c 	bl	80002ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80009b6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d114      	bne.n	80009e6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	f003 030c 	and.w	r3, r3, #12
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d09d      	beq.n	8000902 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c6:	f7ff fc71 	bl	80002ac <HAL_GetTick>
 80009ca:	1bc0      	subs	r0, r0, r7
 80009cc:	4540      	cmp	r0, r8
 80009ce:	d9f5      	bls.n	80009bc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80009d0:	2003      	movs	r0, #3
 80009d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d6:	2a02      	cmp	r2, #2
 80009d8:	d102      	bne.n	80009e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009de:	e7df      	b.n	80009a0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009e0:	f013 0f02 	tst.w	r3, #2
 80009e4:	e7dc      	b.n	80009a0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d10f      	bne.n	8000a0a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ea:	6863      	ldr	r3, [r4, #4]
 80009ec:	f003 030c 	and.w	r3, r3, #12
 80009f0:	2b08      	cmp	r3, #8
 80009f2:	d086      	beq.n	8000902 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f4:	f7ff fc5a 	bl	80002ac <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	4540      	cmp	r0, r8
 80009fc:	d9f5      	bls.n	80009ea <HAL_RCC_ClockConfig+0x106>
 80009fe:	e7e7      	b.n	80009d0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a00:	f7ff fc54 	bl	80002ac <HAL_GetTick>
 8000a04:	1bc0      	subs	r0, r0, r7
 8000a06:	4540      	cmp	r0, r8
 8000a08:	d8e2      	bhi.n	80009d0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a0a:	6863      	ldr	r3, [r4, #4]
 8000a0c:	f013 0f0c 	tst.w	r3, #12
 8000a10:	d1f6      	bne.n	8000a00 <HAL_RCC_ClockConfig+0x11c>
 8000a12:	e776      	b.n	8000902 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f023 0307 	bic.w	r3, r3, #7
 8000a1a:	4333      	orrs	r3, r6
 8000a1c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a1e:	6813      	ldr	r3, [r2, #0]
 8000a20:	f003 0307 	and.w	r3, r3, #7
 8000a24:	429e      	cmp	r6, r3
 8000a26:	d19c      	bne.n	8000962 <HAL_RCC_ClockConfig+0x7e>
 8000a28:	e772      	b.n	8000910 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	68e9      	ldr	r1, [r5, #12]
 8000a2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a32:	430b      	orrs	r3, r1
 8000a34:	6063      	str	r3, [r4, #4]
 8000a36:	e771      	b.n	800091c <HAL_RCC_ClockConfig+0x38>
 8000a38:	40022000 	.word	0x40022000
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	08001a87 	.word	0x08001a87
 8000a44:	20000008 	.word	0x20000008

08000a48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a52:	5cd3      	ldrb	r3, [r2, r3]
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a56:	6810      	ldr	r0, [r2, #0]
}    
 8000a58:	40d8      	lsrs	r0, r3
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	08001a97 	.word	0x08001a97
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	4a03      	ldr	r2, [pc, #12]	; (8000a84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a76:	6810      	ldr	r0, [r2, #0]
} 
 8000a78:	40d8      	lsrs	r0, r3
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	08001a97 	.word	0x08001a97
 8000a84:	20000008 	.word	0x20000008

08000a88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000a88:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	2800      	cmp	r0, #0
 8000a8e:	d034      	beq.n	8000afa <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000a94:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000a98:	b90b      	cbnz	r3, 8000a9e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000a9a:	f000 fa15 	bl	8000ec8 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000a9e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000aa0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000aa2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000aa6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000aa8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000aae:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ab0:	6863      	ldr	r3, [r4, #4]
 8000ab2:	69a2      	ldr	r2, [r4, #24]
 8000ab4:	4303      	orrs	r3, r0
 8000ab6:	68e0      	ldr	r0, [r4, #12]
 8000ab8:	4303      	orrs	r3, r0
 8000aba:	6920      	ldr	r0, [r4, #16]
 8000abc:	4303      	orrs	r3, r0
 8000abe:	6960      	ldr	r0, [r4, #20]
 8000ac0:	4303      	orrs	r3, r0
 8000ac2:	69e0      	ldr	r0, [r4, #28]
 8000ac4:	4303      	orrs	r3, r0
 8000ac6:	6a20      	ldr	r0, [r4, #32]
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000acc:	4303      	orrs	r3, r0
 8000ace:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000ad2:	4303      	orrs	r3, r0
 8000ad4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ad6:	0c12      	lsrs	r2, r2, #16
 8000ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ada:	f002 0204 	and.w	r2, r2, #4
 8000ade:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000ae2:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000ae4:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000ae6:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000ae8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000aee:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000af0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000af2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000af4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000af8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
}
 8000afc:	bd10      	pop	{r4, pc}
	...

08000b00 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b04:	6805      	ldr	r5, [r0, #0]
 8000b06:	68c2      	ldr	r2, [r0, #12]
 8000b08:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b0a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b10:	4313      	orrs	r3, r2
 8000b12:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b14:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000b16:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000b1c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000b20:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000b24:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000b2a:	696b      	ldr	r3, [r5, #20]
 8000b2c:	6982      	ldr	r2, [r0, #24]
 8000b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b32:	4313      	orrs	r3, r2
 8000b34:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000b36:	4b40      	ldr	r3, [pc, #256]	; (8000c38 <UART_SetConfig+0x138>)
{
 8000b38:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000b3a:	429d      	cmp	r5, r3
 8000b3c:	f04f 0419 	mov.w	r4, #25
 8000b40:	d146      	bne.n	8000bd0 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000b42:	f7ff ff91 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b46:	fb04 f300 	mul.w	r3, r4, r0
 8000b4a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b4e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b52:	00b6      	lsls	r6, r6, #2
 8000b54:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b58:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b5c:	011e      	lsls	r6, r3, #4
 8000b5e:	f7ff ff83 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b62:	4360      	muls	r0, r4
 8000b64:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b6e:	f7ff ff7b 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b72:	4360      	muls	r0, r4
 8000b74:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b7e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b82:	fb08 7313 	mls	r3, r8, r3, r7
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	3332      	adds	r3, #50	; 0x32
 8000b8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b8e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b92:	f7ff ff69 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
 8000b96:	4360      	muls	r0, r4
 8000b98:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b9c:	0092      	lsls	r2, r2, #2
 8000b9e:	fbb0 faf2 	udiv	sl, r0, r2
 8000ba2:	f7ff ff61 	bl	8000a68 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ba6:	4360      	muls	r0, r4
 8000ba8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bb2:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bb6:	fb08 a313 	mls	r3, r8, r3, sl
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	3332      	adds	r3, #50	; 0x32
 8000bbe:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	433b      	orrs	r3, r7
 8000bc8:	4433      	add	r3, r6
 8000bca:	60ab      	str	r3, [r5, #8]
 8000bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd0:	f7ff ff3a 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000bd4:	fb04 f300 	mul.w	r3, r4, r0
 8000bd8:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000bdc:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000be0:	00b6      	lsls	r6, r6, #2
 8000be2:	fbb3 f3f6 	udiv	r3, r3, r6
 8000be6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000bea:	011e      	lsls	r6, r3, #4
 8000bec:	f7ff ff2c 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000bf0:	4360      	muls	r0, r4
 8000bf2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	fbb0 f7f3 	udiv	r7, r0, r3
 8000bfc:	f7ff ff24 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000c00:	4360      	muls	r0, r4
 8000c02:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c0c:	fbb3 f3f8 	udiv	r3, r3, r8
 8000c10:	fb08 7313 	mls	r3, r8, r3, r7
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	3332      	adds	r3, #50	; 0x32
 8000c18:	fbb3 f3f8 	udiv	r3, r3, r8
 8000c1c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000c20:	f7ff ff12 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000c24:	4360      	muls	r0, r4
 8000c26:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	fbb0 faf2 	udiv	sl, r0, r2
 8000c30:	f7ff ff0a 	bl	8000a48 <HAL_RCC_GetPCLK1Freq>
 8000c34:	e7b7      	b.n	8000ba6 <UART_SetConfig+0xa6>
 8000c36:	bf00      	nop
 8000c38:	40013800 	.word	0x40013800

08000c3c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460e      	mov	r6, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000c46:	6821      	ldr	r1, [r4, #0]
 8000c48:	680b      	ldr	r3, [r1, #0]
 8000c4a:	ea36 0303 	bics.w	r3, r6, r3
 8000c4e:	d101      	bne.n	8000c54 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000c50:	2000      	movs	r0, #0
}
 8000c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c54:	1c6b      	adds	r3, r5, #1
 8000c56:	d0f7      	beq.n	8000c48 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c58:	b995      	cbnz	r5, 8000c80 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c5a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000c5c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000c64:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	f022 0201 	bic.w	r2, r2, #1
 8000c6c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c74:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c80:	f7ff fb14 	bl	80002ac <HAL_GetTick>
 8000c84:	1bc0      	subs	r0, r0, r7
 8000c86:	4285      	cmp	r5, r0
 8000c88:	d2dd      	bcs.n	8000c46 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c8a:	e7e6      	b.n	8000c5a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c8c <HAL_UART_Init>:
{
 8000c8c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000c8e:	4604      	mov	r4, r0
 8000c90:	b340      	cbz	r0, 8000ce4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000c92:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c9a:	b91b      	cbnz	r3, 8000ca4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c9c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000ca0:	f000 f9d0 	bl	8001044 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000ca4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000ca6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000ca8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000cac:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000cae:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cb4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000cb6:	f7ff ff23 	bl	8000b00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cba:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cbc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000cc6:	695a      	ldr	r2, [r3, #20]
 8000cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000ccc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000cd4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000cd6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000cd8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000cda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000cde:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000ce2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
}
 8000ce6:	bd10      	pop	{r4, pc}

08000ce8 <HAL_UART_Transmit>:
{
 8000ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cec:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000cee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000cf2:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000cf4:	2b20      	cmp	r3, #32
{
 8000cf6:	460d      	mov	r5, r1
 8000cf8:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000cfa:	d14e      	bne.n	8000d9a <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	d049      	beq.n	8000d94 <HAL_UART_Transmit+0xac>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d047      	beq.n	8000d94 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000d04:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d046      	beq.n	8000d9a <HAL_UART_Transmit+0xb2>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000d16:	2321      	movs	r3, #33	; 0x21
 8000d18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000d1c:	f7ff fac6 	bl	80002ac <HAL_GetTick>
 8000d20:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000d22:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000d26:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000d2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b96b      	cbnz	r3, 8000d4c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4632      	mov	r2, r6
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff80 	bl	8000c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d3c:	b9a8      	cbnz	r0, 8000d6a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000d3e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000d40:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000d44:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000d4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d4e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000d50:	3b01      	subs	r3, #1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d56:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d58:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d5e:	4620      	mov	r0, r4
 8000d60:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d62:	d10e      	bne.n	8000d82 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d64:	f7ff ff6a 	bl	8000c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d68:	b110      	cbz	r0, 8000d70 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d70:	882b      	ldrh	r3, [r5, #0]
 8000d72:	6822      	ldr	r2, [r4, #0]
 8000d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d78:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000d7a:	6923      	ldr	r3, [r4, #16]
 8000d7c:	b943      	cbnz	r3, 8000d90 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000d7e:	3502      	adds	r5, #2
 8000d80:	e7d3      	b.n	8000d2a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d82:	f7ff ff5b 	bl	8000c3c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d1ef      	bne.n	8000d6a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	782a      	ldrb	r2, [r5, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7ca      	b.n	8000d2a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d94:	2001      	movs	r0, #1
 8000d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d9a:	2002      	movs	r0, #2
}
 8000d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b510      	push	{r4, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da4:	2228      	movs	r2, #40	; 0x28
 8000da6:	2100      	movs	r1, #0
 8000da8:	a806      	add	r0, sp, #24
 8000daa:	f000 f9e1 	bl	8001170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dae:	2100      	movs	r1, #0
 8000db0:	2214      	movs	r2, #20
 8000db2:	a801      	add	r0, sp, #4
 8000db4:	f000 f9dc 	bl	8001170 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbe:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dc4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dca:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dce:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f7ff fbbf 	bl	8000554 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ddc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	4621      	mov	r1, r4
 8000de2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de8:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dea:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dec:	f7ff fd7a 	bl	80008e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000df0:	b010      	add	sp, #64	; 0x40
 8000df2:	bd10      	pop	{r4, pc}

08000df4 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	2510      	movs	r5, #16
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b088      	sub	sp, #32
  HAL_Init();
 8000dfa:	f7ff fa39 	bl	8000270 <HAL_Init>
  SystemClock_Config();
 8000dfe:	f7ff ffcf 	bl	8000da0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	462a      	mov	r2, r5
 8000e04:	2100      	movs	r1, #0
 8000e06:	eb0d 0005 	add.w	r0, sp, r5
 8000e0a:	f000 f9b1 	bl	8001170 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <main+0xb0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TMC5041_EN_Pin|TMC5041_CS_Pin, GPIO_PIN_RESET);
 8000e10:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e14:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, TMC5041_EN_Pin|TMC5041_CS_Pin, GPIO_PIN_RESET);
 8000e16:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <main+0xb4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	f042 0220 	orr.w	r2, r2, #32
 8000e1c:	619a      	str	r2, [r3, #24]
 8000e1e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : TMC5041_EN_Pin TMC5041_CS_Pin */
  GPIO_InitStruct.Pin = TMC5041_EN_Pin|TMC5041_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e22:	f002 0220 	and.w	r2, r2, #32
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	619a      	str	r2, [r3, #24]
 8000e34:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	f002 0208 	and.w	r2, r2, #8
 8000e3c:	9202      	str	r2, [sp, #8]
 8000e3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	699a      	ldr	r2, [r3, #24]
 8000e42:	f042 0204 	orr.w	r2, r2, #4
 8000e46:	619a      	str	r2, [r3, #24]
 8000e48:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, TMC5041_EN_Pin|TMC5041_CS_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, TMC5041_EN_Pin|TMC5041_CS_Pin, GPIO_PIN_RESET);
 8000e54:	f7ff fb78 	bl	8000548 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = TMC5041_EN_Pin|TMC5041_CS_Pin;
 8000e58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	eb0d 0105 	add.w	r1, sp, r5
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <main+0xb4>)
  GPIO_InitStruct.Pin = TMC5041_EN_Pin|TMC5041_CS_Pin;
 8000e62:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f7ff fa81 	bl	8000370 <HAL_GPIO_Init>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <main+0xb8>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e74:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <main+0xbc>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	6084      	str	r4, [r0, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e78:	e880 000c 	stmia.w	r0, {r2, r3}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e80:	6183      	str	r3, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8000e82:	230a      	movs	r3, #10
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e84:	60c4      	str	r4, [r0, #12]
  hspi2.Init.CRCPolynomial = 10;
 8000e86:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e88:	6107      	str	r7, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e8a:	6146      	str	r6, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e8c:	61c5      	str	r5, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	6204      	str	r4, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	6244      	str	r4, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e92:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e94:	f7ff fdf8 	bl	8000a88 <HAL_SPI_Init>
  USART1_UART_Init();
 8000e98:	f000 f8b8 	bl	800100c <USART1_UART_Init>
printf("able?\r\n");
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <main+0xc0>)
 8000e9e:	f000 f9cb 	bl	8001238 <puts>
 8000ea2:	e7fe      	b.n	8000ea2 <main+0xae>
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	2000009c 	.word	0x2000009c
 8000eb0:	40003800 	.word	0x40003800
 8000eb4:	08001a80 	.word	0x08001a80

08000eb8 <__io_putchar>:

}

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
    UART1_PutChar(ch);
 8000ebc:	b2c0      	uxtb	r0, r0
 8000ebe:	f000 f8fd 	bl	80010bc <UART1_PutChar>

	return ch;
}
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	bd10      	pop	{r4, pc}

08000ec6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec6:	4770      	bx	lr

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b510      	push	{r4, lr}
 8000eca:	4604      	mov	r4, r0
 8000ecc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	2210      	movs	r2, #16
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	a802      	add	r0, sp, #8
 8000ed4:	f000 f94c 	bl	8001170 <memset>
  if(hspi->Instance==SPI2)
 8000ed8:	6822      	ldr	r2, [r4, #0]
 8000eda:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_SPI_MspInit+0x70>)
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d128      	bne.n	8000f32 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ee0:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8000ee4:	69da      	ldr	r2, [r3, #28]
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eec:	61da      	str	r2, [r3, #28]
 8000eee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	699a      	ldr	r2, [r3, #24]
 8000efc:	f042 0208 	orr.w	r2, r2, #8
 8000f00:	619a      	str	r2, [r3, #24]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f10:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f7ff fa29 	bl	8000370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	a902      	add	r1, sp, #8
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f7ff fa1f 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f32:	b006      	add	sp, #24
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <NMI_Handler>:
 8000f40:	4770      	bx	lr

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	e7fe      	b.n	8000f44 <MemManage_Handler>

08000f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	e7fe      	b.n	8000f48 <UsageFault_Handler>

08000f4a <SVC_Handler>:
 8000f4a:	4770      	bx	lr

08000f4c <DebugMon_Handler>:
 8000f4c:	4770      	bx	lr

08000f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f7ff b9a0 	b.w	8000294 <HAL_IncTick>

08000f54 <_read>:
//		*ptr++ = __io_getchar();
//	}
//
// return len;
   return 0;
}
 8000f54:	2000      	movs	r0, #0
 8000f56:	4770      	bx	lr

08000f58 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f58:	b570      	push	{r4, r5, r6, lr}
 8000f5a:	460e      	mov	r6, r1
 8000f5c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5e:	460c      	mov	r4, r1
 8000f60:	1ba3      	subs	r3, r4, r6
 8000f62:	429d      	cmp	r5, r3
 8000f64:	dc01      	bgt.n	8000f6a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000f66:	4628      	mov	r0, r5
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000f6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f6e:	f7ff ffa3 	bl	8000eb8 <__io_putchar>
 8000f72:	e7f5      	b.n	8000f60 <_write+0x8>

08000f74 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <_sbrk+0x28>)
{
 8000f76:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	b909      	cbnz	r1, 8000f80 <_sbrk+0xc>
		heap_end = &end;
 8000f7c:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <_sbrk+0x2c>)
 8000f7e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000f80:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000f82:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000f84:	4402      	add	r2, r0
 8000f86:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f88:	bf81      	itttt	hi
 8000f8a:	220c      	movhi	r2, #12
 8000f8c:	4b05      	ldrhi	r3, [pc, #20]	; (8000fa4 <_sbrk+0x30>)
		return (caddr_t) -1;
 8000f8e:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 8000f92:	601a      	strhi	r2, [r3, #0]
	}

	heap_end += incr;
 8000f94:	bf98      	it	ls
 8000f96:	601a      	strls	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000008c 	.word	0x2000008c
 8000fa0:	20000138 	.word	0x20000138
 8000fa4:	20000134 	.word	0x20000134

08000fa8 <_close>:

int _close(int file)
{
	return -1;
}
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	4770      	bx	lr

08000fae <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000fb2:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000fb4:	604b      	str	r3, [r1, #4]
}
 8000fb6:	4770      	bx	lr

08000fb8 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000fb8:	2001      	movs	r0, #1
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4770      	bx	lr

08000fc0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <SystemInit+0x40>)
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000fca:	6859      	ldr	r1, [r3, #4]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <SystemInit+0x44>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000fd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000fdc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fe4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000fec:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000fee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000ff2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ff4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <SystemInit+0x48>)
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	f8ff0000 	.word	0xf8ff0000
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void USART1_UART_Init(void)
{
 800100c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800100e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001016:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001018:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800101e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001020:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001022:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001024:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102a:	f7ff fe2f 	bl	8000c8c <HAL_UART_Init>
 800102e:	b118      	cbz	r0, 8001038 <USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001030:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001034:	f7ff bf47 	b.w	8000ec6 <Error_Handler>
 8001038:	bd08      	pop	{r3, pc}
 800103a:	bf00      	nop
 800103c:	200000f4 	.word	0x200000f4
 8001040:	40013800 	.word	0x40013800

08001044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b510      	push	{r4, lr}
 8001046:	4604      	mov	r4, r0
 8001048:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	2210      	movs	r2, #16
 800104c:	2100      	movs	r1, #0
 800104e:	a802      	add	r0, sp, #8
 8001050:	f000 f88e 	bl	8001170 <memset>
  if(huart->Instance==USART1)
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_UART_MspInit+0x70>)
 8001058:	429a      	cmp	r2, r3
 800105a:	d128      	bne.n	80010ae <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800105c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001060:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001064:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001068:	619a      	str	r2, [r3, #24]
 800106a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800106e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f7ff f96b 	bl	8000370 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	a902      	add	r1, sp, #8
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f7ff f961 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ae:	b006      	add	sp, #24
 80010b0:	bd10      	pop	{r4, pc}
 80010b2:	bf00      	nop
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40010800 	.word	0x40010800

080010bc <UART1_PutChar>:
  }

}

void UART1_PutChar(uint8_t data)
{
 80010bc:	b507      	push	{r0, r1, r2, lr}
 80010be:	a902      	add	r1, sp, #8
 80010c0:	f801 0d01 	strb.w	r0, [r1, #-1]!
   HAL_UART_Transmit(&huart1, (uint8_t *)&data, 1, 0xFFFF);
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	2201      	movs	r2, #1
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <UART1_PutChar+0x1c>)
 80010cc:	f7ff fe0c 	bl	8000ce8 <HAL_UART_Transmit>
}
 80010d0:	b003      	add	sp, #12
 80010d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010d6:	bf00      	nop
 80010d8:	200000f4 	.word	0x200000f4

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001102:	f7ff ff5d 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f000 f80f 	bl	8001128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fe73 	bl	8000df4 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r3, =_sidata
 8001110:	08001b0c 	.word	0x08001b0c
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001118:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800111c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001120:	20000138 	.word	0x20000138

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <__libc_init_array>:
 8001128:	b570      	push	{r4, r5, r6, lr}
 800112a:	2500      	movs	r5, #0
 800112c:	4e0c      	ldr	r6, [pc, #48]	; (8001160 <__libc_init_array+0x38>)
 800112e:	4c0d      	ldr	r4, [pc, #52]	; (8001164 <__libc_init_array+0x3c>)
 8001130:	1ba4      	subs	r4, r4, r6
 8001132:	10a4      	asrs	r4, r4, #2
 8001134:	42a5      	cmp	r5, r4
 8001136:	d109      	bne.n	800114c <__libc_init_array+0x24>
 8001138:	f000 fc8e 	bl	8001a58 <_init>
 800113c:	2500      	movs	r5, #0
 800113e:	4e0a      	ldr	r6, [pc, #40]	; (8001168 <__libc_init_array+0x40>)
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <__libc_init_array+0x44>)
 8001142:	1ba4      	subs	r4, r4, r6
 8001144:	10a4      	asrs	r4, r4, #2
 8001146:	42a5      	cmp	r5, r4
 8001148:	d105      	bne.n	8001156 <__libc_init_array+0x2e>
 800114a:	bd70      	pop	{r4, r5, r6, pc}
 800114c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001150:	4798      	blx	r3
 8001152:	3501      	adds	r5, #1
 8001154:	e7ee      	b.n	8001134 <__libc_init_array+0xc>
 8001156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115a:	4798      	blx	r3
 800115c:	3501      	adds	r5, #1
 800115e:	e7f2      	b.n	8001146 <__libc_init_array+0x1e>
 8001160:	08001b04 	.word	0x08001b04
 8001164:	08001b04 	.word	0x08001b04
 8001168:	08001b04 	.word	0x08001b04
 800116c:	08001b08 	.word	0x08001b08

08001170 <memset>:
 8001170:	4603      	mov	r3, r0
 8001172:	4402      	add	r2, r0
 8001174:	4293      	cmp	r3, r2
 8001176:	d100      	bne.n	800117a <memset+0xa>
 8001178:	4770      	bx	lr
 800117a:	f803 1b01 	strb.w	r1, [r3], #1
 800117e:	e7f9      	b.n	8001174 <memset+0x4>

08001180 <_puts_r>:
 8001180:	b570      	push	{r4, r5, r6, lr}
 8001182:	460e      	mov	r6, r1
 8001184:	4605      	mov	r5, r0
 8001186:	b118      	cbz	r0, 8001190 <_puts_r+0x10>
 8001188:	6983      	ldr	r3, [r0, #24]
 800118a:	b90b      	cbnz	r3, 8001190 <_puts_r+0x10>
 800118c:	f000 fa0e 	bl	80015ac <__sinit>
 8001190:	69ab      	ldr	r3, [r5, #24]
 8001192:	68ac      	ldr	r4, [r5, #8]
 8001194:	b913      	cbnz	r3, 800119c <_puts_r+0x1c>
 8001196:	4628      	mov	r0, r5
 8001198:	f000 fa08 	bl	80015ac <__sinit>
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <_puts_r+0xac>)
 800119e:	429c      	cmp	r4, r3
 80011a0:	d117      	bne.n	80011d2 <_puts_r+0x52>
 80011a2:	686c      	ldr	r4, [r5, #4]
 80011a4:	89a3      	ldrh	r3, [r4, #12]
 80011a6:	071b      	lsls	r3, r3, #28
 80011a8:	d51d      	bpl.n	80011e6 <_puts_r+0x66>
 80011aa:	6923      	ldr	r3, [r4, #16]
 80011ac:	b1db      	cbz	r3, 80011e6 <_puts_r+0x66>
 80011ae:	3e01      	subs	r6, #1
 80011b0:	68a3      	ldr	r3, [r4, #8]
 80011b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60a3      	str	r3, [r4, #8]
 80011ba:	b9e9      	cbnz	r1, 80011f8 <_puts_r+0x78>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da2e      	bge.n	800121e <_puts_r+0x9e>
 80011c0:	4622      	mov	r2, r4
 80011c2:	210a      	movs	r1, #10
 80011c4:	4628      	mov	r0, r5
 80011c6:	f000 f83f 	bl	8001248 <__swbuf_r>
 80011ca:	3001      	adds	r0, #1
 80011cc:	d011      	beq.n	80011f2 <_puts_r+0x72>
 80011ce:	200a      	movs	r0, #10
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <_puts_r+0xb0>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	d101      	bne.n	80011dc <_puts_r+0x5c>
 80011d8:	68ac      	ldr	r4, [r5, #8]
 80011da:	e7e3      	b.n	80011a4 <_puts_r+0x24>
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_puts_r+0xb4>)
 80011de:	429c      	cmp	r4, r3
 80011e0:	bf08      	it	eq
 80011e2:	68ec      	ldreq	r4, [r5, #12]
 80011e4:	e7de      	b.n	80011a4 <_puts_r+0x24>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f000 f87f 	bl	80012ec <__swsetup_r>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0dd      	beq.n	80011ae <_puts_r+0x2e>
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	bd70      	pop	{r4, r5, r6, pc}
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da04      	bge.n	8001206 <_puts_r+0x86>
 80011fc:	69a2      	ldr	r2, [r4, #24]
 80011fe:	4293      	cmp	r3, r2
 8001200:	db06      	blt.n	8001210 <_puts_r+0x90>
 8001202:	290a      	cmp	r1, #10
 8001204:	d004      	beq.n	8001210 <_puts_r+0x90>
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	7019      	strb	r1, [r3, #0]
 800120e:	e7cf      	b.n	80011b0 <_puts_r+0x30>
 8001210:	4622      	mov	r2, r4
 8001212:	4628      	mov	r0, r5
 8001214:	f000 f818 	bl	8001248 <__swbuf_r>
 8001218:	3001      	adds	r0, #1
 800121a:	d1c9      	bne.n	80011b0 <_puts_r+0x30>
 800121c:	e7e9      	b.n	80011f2 <_puts_r+0x72>
 800121e:	200a      	movs	r0, #10
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	6022      	str	r2, [r4, #0]
 8001226:	7018      	strb	r0, [r3, #0]
 8001228:	bd70      	pop	{r4, r5, r6, pc}
 800122a:	bf00      	nop
 800122c:	08001ac0 	.word	0x08001ac0
 8001230:	08001ae0 	.word	0x08001ae0
 8001234:	08001aa0 	.word	0x08001aa0

08001238 <puts>:
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <puts+0xc>)
 800123a:	4601      	mov	r1, r0
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f7ff bf9f 	b.w	8001180 <_puts_r>
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c

08001248 <__swbuf_r>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	460e      	mov	r6, r1
 800124c:	4614      	mov	r4, r2
 800124e:	4605      	mov	r5, r0
 8001250:	b118      	cbz	r0, 800125a <__swbuf_r+0x12>
 8001252:	6983      	ldr	r3, [r0, #24]
 8001254:	b90b      	cbnz	r3, 800125a <__swbuf_r+0x12>
 8001256:	f000 f9a9 	bl	80015ac <__sinit>
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <__swbuf_r+0x98>)
 800125c:	429c      	cmp	r4, r3
 800125e:	d12a      	bne.n	80012b6 <__swbuf_r+0x6e>
 8001260:	686c      	ldr	r4, [r5, #4]
 8001262:	69a3      	ldr	r3, [r4, #24]
 8001264:	60a3      	str	r3, [r4, #8]
 8001266:	89a3      	ldrh	r3, [r4, #12]
 8001268:	071a      	lsls	r2, r3, #28
 800126a:	d52e      	bpl.n	80012ca <__swbuf_r+0x82>
 800126c:	6923      	ldr	r3, [r4, #16]
 800126e:	b363      	cbz	r3, 80012ca <__swbuf_r+0x82>
 8001270:	6923      	ldr	r3, [r4, #16]
 8001272:	6820      	ldr	r0, [r4, #0]
 8001274:	b2f6      	uxtb	r6, r6
 8001276:	1ac0      	subs	r0, r0, r3
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	4637      	mov	r7, r6
 800127c:	4298      	cmp	r0, r3
 800127e:	db04      	blt.n	800128a <__swbuf_r+0x42>
 8001280:	4621      	mov	r1, r4
 8001282:	4628      	mov	r0, r5
 8001284:	f000 f928 	bl	80014d8 <_fflush_r>
 8001288:	bb28      	cbnz	r0, 80012d6 <__swbuf_r+0x8e>
 800128a:	68a3      	ldr	r3, [r4, #8]
 800128c:	3001      	adds	r0, #1
 800128e:	3b01      	subs	r3, #1
 8001290:	60a3      	str	r3, [r4, #8]
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	6022      	str	r2, [r4, #0]
 8001298:	701e      	strb	r6, [r3, #0]
 800129a:	6963      	ldr	r3, [r4, #20]
 800129c:	4298      	cmp	r0, r3
 800129e:	d004      	beq.n	80012aa <__swbuf_r+0x62>
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	07db      	lsls	r3, r3, #31
 80012a4:	d519      	bpl.n	80012da <__swbuf_r+0x92>
 80012a6:	2e0a      	cmp	r6, #10
 80012a8:	d117      	bne.n	80012da <__swbuf_r+0x92>
 80012aa:	4621      	mov	r1, r4
 80012ac:	4628      	mov	r0, r5
 80012ae:	f000 f913 	bl	80014d8 <_fflush_r>
 80012b2:	b190      	cbz	r0, 80012da <__swbuf_r+0x92>
 80012b4:	e00f      	b.n	80012d6 <__swbuf_r+0x8e>
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <__swbuf_r+0x9c>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d101      	bne.n	80012c0 <__swbuf_r+0x78>
 80012bc:	68ac      	ldr	r4, [r5, #8]
 80012be:	e7d0      	b.n	8001262 <__swbuf_r+0x1a>
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <__swbuf_r+0xa0>)
 80012c2:	429c      	cmp	r4, r3
 80012c4:	bf08      	it	eq
 80012c6:	68ec      	ldreq	r4, [r5, #12]
 80012c8:	e7cb      	b.n	8001262 <__swbuf_r+0x1a>
 80012ca:	4621      	mov	r1, r4
 80012cc:	4628      	mov	r0, r5
 80012ce:	f000 f80d 	bl	80012ec <__swsetup_r>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d0cc      	beq.n	8001270 <__swbuf_r+0x28>
 80012d6:	f04f 37ff 	mov.w	r7, #4294967295
 80012da:	4638      	mov	r0, r7
 80012dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012de:	bf00      	nop
 80012e0:	08001ac0 	.word	0x08001ac0
 80012e4:	08001ae0 	.word	0x08001ae0
 80012e8:	08001aa0 	.word	0x08001aa0

080012ec <__swsetup_r>:
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <__swsetup_r+0xcc>)
 80012ee:	b570      	push	{r4, r5, r6, lr}
 80012f0:	681d      	ldr	r5, [r3, #0]
 80012f2:	4606      	mov	r6, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	b125      	cbz	r5, 8001302 <__swsetup_r+0x16>
 80012f8:	69ab      	ldr	r3, [r5, #24]
 80012fa:	b913      	cbnz	r3, 8001302 <__swsetup_r+0x16>
 80012fc:	4628      	mov	r0, r5
 80012fe:	f000 f955 	bl	80015ac <__sinit>
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <__swsetup_r+0xd0>)
 8001304:	429c      	cmp	r4, r3
 8001306:	d10f      	bne.n	8001328 <__swsetup_r+0x3c>
 8001308:	686c      	ldr	r4, [r5, #4]
 800130a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800130e:	b29a      	uxth	r2, r3
 8001310:	0715      	lsls	r5, r2, #28
 8001312:	d42c      	bmi.n	800136e <__swsetup_r+0x82>
 8001314:	06d0      	lsls	r0, r2, #27
 8001316:	d411      	bmi.n	800133c <__swsetup_r+0x50>
 8001318:	2209      	movs	r2, #9
 800131a:	6032      	str	r2, [r6, #0]
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	81a3      	strh	r3, [r4, #12]
 8001322:	f04f 30ff 	mov.w	r0, #4294967295
 8001326:	bd70      	pop	{r4, r5, r6, pc}
 8001328:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <__swsetup_r+0xd4>)
 800132a:	429c      	cmp	r4, r3
 800132c:	d101      	bne.n	8001332 <__swsetup_r+0x46>
 800132e:	68ac      	ldr	r4, [r5, #8]
 8001330:	e7eb      	b.n	800130a <__swsetup_r+0x1e>
 8001332:	4b24      	ldr	r3, [pc, #144]	; (80013c4 <__swsetup_r+0xd8>)
 8001334:	429c      	cmp	r4, r3
 8001336:	bf08      	it	eq
 8001338:	68ec      	ldreq	r4, [r5, #12]
 800133a:	e7e6      	b.n	800130a <__swsetup_r+0x1e>
 800133c:	0751      	lsls	r1, r2, #29
 800133e:	d512      	bpl.n	8001366 <__swsetup_r+0x7a>
 8001340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001342:	b141      	cbz	r1, 8001356 <__swsetup_r+0x6a>
 8001344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001348:	4299      	cmp	r1, r3
 800134a:	d002      	beq.n	8001352 <__swsetup_r+0x66>
 800134c:	4630      	mov	r0, r6
 800134e:	f000 fa1b 	bl	8001788 <_free_r>
 8001352:	2300      	movs	r3, #0
 8001354:	6363      	str	r3, [r4, #52]	; 0x34
 8001356:	89a3      	ldrh	r3, [r4, #12]
 8001358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800135c:	81a3      	strh	r3, [r4, #12]
 800135e:	2300      	movs	r3, #0
 8001360:	6063      	str	r3, [r4, #4]
 8001362:	6923      	ldr	r3, [r4, #16]
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	b94b      	cbnz	r3, 8001386 <__swsetup_r+0x9a>
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137c:	d003      	beq.n	8001386 <__swsetup_r+0x9a>
 800137e:	4621      	mov	r1, r4
 8001380:	4630      	mov	r0, r6
 8001382:	f000 f9c1 	bl	8001708 <__smakebuf_r>
 8001386:	89a2      	ldrh	r2, [r4, #12]
 8001388:	f012 0301 	ands.w	r3, r2, #1
 800138c:	d00c      	beq.n	80013a8 <__swsetup_r+0xbc>
 800138e:	2300      	movs	r3, #0
 8001390:	60a3      	str	r3, [r4, #8]
 8001392:	6963      	ldr	r3, [r4, #20]
 8001394:	425b      	negs	r3, r3
 8001396:	61a3      	str	r3, [r4, #24]
 8001398:	6923      	ldr	r3, [r4, #16]
 800139a:	b953      	cbnz	r3, 80013b2 <__swsetup_r+0xc6>
 800139c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80013a4:	d1ba      	bne.n	800131c <__swsetup_r+0x30>
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
 80013a8:	0792      	lsls	r2, r2, #30
 80013aa:	bf58      	it	pl
 80013ac:	6963      	ldrpl	r3, [r4, #20]
 80013ae:	60a3      	str	r3, [r4, #8]
 80013b0:	e7f2      	b.n	8001398 <__swsetup_r+0xac>
 80013b2:	2000      	movs	r0, #0
 80013b4:	e7f7      	b.n	80013a6 <__swsetup_r+0xba>
 80013b6:	bf00      	nop
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	08001ac0 	.word	0x08001ac0
 80013c0:	08001ae0 	.word	0x08001ae0
 80013c4:	08001aa0 	.word	0x08001aa0

080013c8 <__sflush_r>:
 80013c8:	898a      	ldrh	r2, [r1, #12]
 80013ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013ce:	4605      	mov	r5, r0
 80013d0:	0710      	lsls	r0, r2, #28
 80013d2:	460c      	mov	r4, r1
 80013d4:	d45a      	bmi.n	800148c <__sflush_r+0xc4>
 80013d6:	684b      	ldr	r3, [r1, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dc05      	bgt.n	80013e8 <__sflush_r+0x20>
 80013dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013de:	2b00      	cmp	r3, #0
 80013e0:	dc02      	bgt.n	80013e8 <__sflush_r+0x20>
 80013e2:	2000      	movs	r0, #0
 80013e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d0f9      	beq.n	80013e2 <__sflush_r+0x1a>
 80013ee:	2300      	movs	r3, #0
 80013f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013f4:	682f      	ldr	r7, [r5, #0]
 80013f6:	602b      	str	r3, [r5, #0]
 80013f8:	d033      	beq.n	8001462 <__sflush_r+0x9a>
 80013fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	075a      	lsls	r2, r3, #29
 8001400:	d505      	bpl.n	800140e <__sflush_r+0x46>
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	1ac0      	subs	r0, r0, r3
 8001406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001408:	b10b      	cbz	r3, 800140e <__sflush_r+0x46>
 800140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140c:	1ac0      	subs	r0, r0, r3
 800140e:	2300      	movs	r3, #0
 8001410:	4602      	mov	r2, r0
 8001412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001414:	6a21      	ldr	r1, [r4, #32]
 8001416:	4628      	mov	r0, r5
 8001418:	47b0      	blx	r6
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	d106      	bne.n	800142e <__sflush_r+0x66>
 8001420:	6829      	ldr	r1, [r5, #0]
 8001422:	291d      	cmp	r1, #29
 8001424:	d84b      	bhi.n	80014be <__sflush_r+0xf6>
 8001426:	4a2b      	ldr	r2, [pc, #172]	; (80014d4 <__sflush_r+0x10c>)
 8001428:	40ca      	lsrs	r2, r1
 800142a:	07d6      	lsls	r6, r2, #31
 800142c:	d547      	bpl.n	80014be <__sflush_r+0xf6>
 800142e:	2200      	movs	r2, #0
 8001430:	6062      	str	r2, [r4, #4]
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	04d9      	lsls	r1, r3, #19
 8001436:	6022      	str	r2, [r4, #0]
 8001438:	d504      	bpl.n	8001444 <__sflush_r+0x7c>
 800143a:	1c42      	adds	r2, r0, #1
 800143c:	d101      	bne.n	8001442 <__sflush_r+0x7a>
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	b903      	cbnz	r3, 8001444 <__sflush_r+0x7c>
 8001442:	6560      	str	r0, [r4, #84]	; 0x54
 8001444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001446:	602f      	str	r7, [r5, #0]
 8001448:	2900      	cmp	r1, #0
 800144a:	d0ca      	beq.n	80013e2 <__sflush_r+0x1a>
 800144c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001450:	4299      	cmp	r1, r3
 8001452:	d002      	beq.n	800145a <__sflush_r+0x92>
 8001454:	4628      	mov	r0, r5
 8001456:	f000 f997 	bl	8001788 <_free_r>
 800145a:	2000      	movs	r0, #0
 800145c:	6360      	str	r0, [r4, #52]	; 0x34
 800145e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001462:	6a21      	ldr	r1, [r4, #32]
 8001464:	2301      	movs	r3, #1
 8001466:	4628      	mov	r0, r5
 8001468:	47b0      	blx	r6
 800146a:	1c41      	adds	r1, r0, #1
 800146c:	d1c6      	bne.n	80013fc <__sflush_r+0x34>
 800146e:	682b      	ldr	r3, [r5, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0c3      	beq.n	80013fc <__sflush_r+0x34>
 8001474:	2b1d      	cmp	r3, #29
 8001476:	d001      	beq.n	800147c <__sflush_r+0xb4>
 8001478:	2b16      	cmp	r3, #22
 800147a:	d101      	bne.n	8001480 <__sflush_r+0xb8>
 800147c:	602f      	str	r7, [r5, #0]
 800147e:	e7b0      	b.n	80013e2 <__sflush_r+0x1a>
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001486:	81a3      	strh	r3, [r4, #12]
 8001488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800148c:	690f      	ldr	r7, [r1, #16]
 800148e:	2f00      	cmp	r7, #0
 8001490:	d0a7      	beq.n	80013e2 <__sflush_r+0x1a>
 8001492:	0793      	lsls	r3, r2, #30
 8001494:	bf18      	it	ne
 8001496:	2300      	movne	r3, #0
 8001498:	680e      	ldr	r6, [r1, #0]
 800149a:	bf08      	it	eq
 800149c:	694b      	ldreq	r3, [r1, #20]
 800149e:	eba6 0807 	sub.w	r8, r6, r7
 80014a2:	600f      	str	r7, [r1, #0]
 80014a4:	608b      	str	r3, [r1, #8]
 80014a6:	f1b8 0f00 	cmp.w	r8, #0
 80014aa:	dd9a      	ble.n	80013e2 <__sflush_r+0x1a>
 80014ac:	4643      	mov	r3, r8
 80014ae:	463a      	mov	r2, r7
 80014b0:	6a21      	ldr	r1, [r4, #32]
 80014b2:	4628      	mov	r0, r5
 80014b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80014b6:	47b0      	blx	r6
 80014b8:	2800      	cmp	r0, #0
 80014ba:	dc07      	bgt.n	80014cc <__sflush_r+0x104>
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c2:	81a3      	strh	r3, [r4, #12]
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014cc:	4407      	add	r7, r0
 80014ce:	eba8 0800 	sub.w	r8, r8, r0
 80014d2:	e7e8      	b.n	80014a6 <__sflush_r+0xde>
 80014d4:	20400001 	.word	0x20400001

080014d8 <_fflush_r>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	690b      	ldr	r3, [r1, #16]
 80014dc:	4605      	mov	r5, r0
 80014de:	460c      	mov	r4, r1
 80014e0:	b1db      	cbz	r3, 800151a <_fflush_r+0x42>
 80014e2:	b118      	cbz	r0, 80014ec <_fflush_r+0x14>
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b90b      	cbnz	r3, 80014ec <_fflush_r+0x14>
 80014e8:	f000 f860 	bl	80015ac <__sinit>
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <_fflush_r+0x48>)
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d109      	bne.n	8001506 <_fflush_r+0x2e>
 80014f2:	686c      	ldr	r4, [r5, #4]
 80014f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f8:	b17b      	cbz	r3, 800151a <_fflush_r+0x42>
 80014fa:	4621      	mov	r1, r4
 80014fc:	4628      	mov	r0, r5
 80014fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001502:	f7ff bf61 	b.w	80013c8 <__sflush_r>
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_fflush_r+0x4c>)
 8001508:	429c      	cmp	r4, r3
 800150a:	d101      	bne.n	8001510 <_fflush_r+0x38>
 800150c:	68ac      	ldr	r4, [r5, #8]
 800150e:	e7f1      	b.n	80014f4 <_fflush_r+0x1c>
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <_fflush_r+0x50>)
 8001512:	429c      	cmp	r4, r3
 8001514:	bf08      	it	eq
 8001516:	68ec      	ldreq	r4, [r5, #12]
 8001518:	e7ec      	b.n	80014f4 <_fflush_r+0x1c>
 800151a:	2000      	movs	r0, #0
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	08001ac0 	.word	0x08001ac0
 8001524:	08001ae0 	.word	0x08001ae0
 8001528:	08001aa0 	.word	0x08001aa0

0800152c <_cleanup_r>:
 800152c:	4901      	ldr	r1, [pc, #4]	; (8001534 <_cleanup_r+0x8>)
 800152e:	f000 b8a9 	b.w	8001684 <_fwalk_reent>
 8001532:	bf00      	nop
 8001534:	080014d9 	.word	0x080014d9

08001538 <std.isra.0>:
 8001538:	2300      	movs	r3, #0
 800153a:	b510      	push	{r4, lr}
 800153c:	4604      	mov	r4, r0
 800153e:	6003      	str	r3, [r0, #0]
 8001540:	6043      	str	r3, [r0, #4]
 8001542:	6083      	str	r3, [r0, #8]
 8001544:	8181      	strh	r1, [r0, #12]
 8001546:	6643      	str	r3, [r0, #100]	; 0x64
 8001548:	81c2      	strh	r2, [r0, #14]
 800154a:	6103      	str	r3, [r0, #16]
 800154c:	6143      	str	r3, [r0, #20]
 800154e:	6183      	str	r3, [r0, #24]
 8001550:	4619      	mov	r1, r3
 8001552:	2208      	movs	r2, #8
 8001554:	305c      	adds	r0, #92	; 0x5c
 8001556:	f7ff fe0b 	bl	8001170 <memset>
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <std.isra.0+0x38>)
 800155c:	6224      	str	r4, [r4, #32]
 800155e:	6263      	str	r3, [r4, #36]	; 0x24
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <std.isra.0+0x3c>)
 8001562:	62a3      	str	r3, [r4, #40]	; 0x28
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <std.isra.0+0x40>)
 8001566:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <std.isra.0+0x44>)
 800156a:	6323      	str	r3, [r4, #48]	; 0x30
 800156c:	bd10      	pop	{r4, pc}
 800156e:	bf00      	nop
 8001570:	080018fd 	.word	0x080018fd
 8001574:	0800191f 	.word	0x0800191f
 8001578:	08001957 	.word	0x08001957
 800157c:	0800197b 	.word	0x0800197b

08001580 <__sfmoreglue>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	2568      	movs	r5, #104	; 0x68
 8001584:	1e4a      	subs	r2, r1, #1
 8001586:	4355      	muls	r5, r2
 8001588:	460e      	mov	r6, r1
 800158a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800158e:	f000 f947 	bl	8001820 <_malloc_r>
 8001592:	4604      	mov	r4, r0
 8001594:	b140      	cbz	r0, 80015a8 <__sfmoreglue+0x28>
 8001596:	2100      	movs	r1, #0
 8001598:	e880 0042 	stmia.w	r0, {r1, r6}
 800159c:	300c      	adds	r0, #12
 800159e:	60a0      	str	r0, [r4, #8]
 80015a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80015a4:	f7ff fde4 	bl	8001170 <memset>
 80015a8:	4620      	mov	r0, r4
 80015aa:	bd70      	pop	{r4, r5, r6, pc}

080015ac <__sinit>:
 80015ac:	6983      	ldr	r3, [r0, #24]
 80015ae:	b510      	push	{r4, lr}
 80015b0:	4604      	mov	r4, r0
 80015b2:	bb33      	cbnz	r3, 8001602 <__sinit+0x56>
 80015b4:	6483      	str	r3, [r0, #72]	; 0x48
 80015b6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80015b8:	6503      	str	r3, [r0, #80]	; 0x50
 80015ba:	4b12      	ldr	r3, [pc, #72]	; (8001604 <__sinit+0x58>)
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <__sinit+0x5c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6282      	str	r2, [r0, #40]	; 0x28
 80015c2:	4298      	cmp	r0, r3
 80015c4:	bf04      	itt	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	6183      	streq	r3, [r0, #24]
 80015ca:	f000 f81f 	bl	800160c <__sfp>
 80015ce:	6060      	str	r0, [r4, #4]
 80015d0:	4620      	mov	r0, r4
 80015d2:	f000 f81b 	bl	800160c <__sfp>
 80015d6:	60a0      	str	r0, [r4, #8]
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 f817 	bl	800160c <__sfp>
 80015de:	2200      	movs	r2, #0
 80015e0:	60e0      	str	r0, [r4, #12]
 80015e2:	2104      	movs	r1, #4
 80015e4:	6860      	ldr	r0, [r4, #4]
 80015e6:	f7ff ffa7 	bl	8001538 <std.isra.0>
 80015ea:	2201      	movs	r2, #1
 80015ec:	2109      	movs	r1, #9
 80015ee:	68a0      	ldr	r0, [r4, #8]
 80015f0:	f7ff ffa2 	bl	8001538 <std.isra.0>
 80015f4:	2202      	movs	r2, #2
 80015f6:	2112      	movs	r1, #18
 80015f8:	68e0      	ldr	r0, [r4, #12]
 80015fa:	f7ff ff9d 	bl	8001538 <std.isra.0>
 80015fe:	2301      	movs	r3, #1
 8001600:	61a3      	str	r3, [r4, #24]
 8001602:	bd10      	pop	{r4, pc}
 8001604:	08001b00 	.word	0x08001b00
 8001608:	0800152d 	.word	0x0800152d

0800160c <__sfp>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <__sfp+0x74>)
 8001610:	4607      	mov	r7, r0
 8001612:	681e      	ldr	r6, [r3, #0]
 8001614:	69b3      	ldr	r3, [r6, #24]
 8001616:	b913      	cbnz	r3, 800161e <__sfp+0x12>
 8001618:	4630      	mov	r0, r6
 800161a:	f7ff ffc7 	bl	80015ac <__sinit>
 800161e:	3648      	adds	r6, #72	; 0x48
 8001620:	68b4      	ldr	r4, [r6, #8]
 8001622:	6873      	ldr	r3, [r6, #4]
 8001624:	3b01      	subs	r3, #1
 8001626:	d503      	bpl.n	8001630 <__sfp+0x24>
 8001628:	6833      	ldr	r3, [r6, #0]
 800162a:	b133      	cbz	r3, 800163a <__sfp+0x2e>
 800162c:	6836      	ldr	r6, [r6, #0]
 800162e:	e7f7      	b.n	8001620 <__sfp+0x14>
 8001630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001634:	b16d      	cbz	r5, 8001652 <__sfp+0x46>
 8001636:	3468      	adds	r4, #104	; 0x68
 8001638:	e7f4      	b.n	8001624 <__sfp+0x18>
 800163a:	2104      	movs	r1, #4
 800163c:	4638      	mov	r0, r7
 800163e:	f7ff ff9f 	bl	8001580 <__sfmoreglue>
 8001642:	6030      	str	r0, [r6, #0]
 8001644:	2800      	cmp	r0, #0
 8001646:	d1f1      	bne.n	800162c <__sfp+0x20>
 8001648:	230c      	movs	r3, #12
 800164a:	4604      	mov	r4, r0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4620      	mov	r0, r4
 8001650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001656:	81e3      	strh	r3, [r4, #14]
 8001658:	2301      	movs	r3, #1
 800165a:	6665      	str	r5, [r4, #100]	; 0x64
 800165c:	81a3      	strh	r3, [r4, #12]
 800165e:	6025      	str	r5, [r4, #0]
 8001660:	60a5      	str	r5, [r4, #8]
 8001662:	6065      	str	r5, [r4, #4]
 8001664:	6125      	str	r5, [r4, #16]
 8001666:	6165      	str	r5, [r4, #20]
 8001668:	61a5      	str	r5, [r4, #24]
 800166a:	2208      	movs	r2, #8
 800166c:	4629      	mov	r1, r5
 800166e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001672:	f7ff fd7d 	bl	8001170 <memset>
 8001676:	6365      	str	r5, [r4, #52]	; 0x34
 8001678:	63a5      	str	r5, [r4, #56]	; 0x38
 800167a:	64a5      	str	r5, [r4, #72]	; 0x48
 800167c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800167e:	e7e6      	b.n	800164e <__sfp+0x42>
 8001680:	08001b00 	.word	0x08001b00

08001684 <_fwalk_reent>:
 8001684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001688:	4680      	mov	r8, r0
 800168a:	4689      	mov	r9, r1
 800168c:	2600      	movs	r6, #0
 800168e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001692:	b914      	cbnz	r4, 800169a <_fwalk_reent+0x16>
 8001694:	4630      	mov	r0, r6
 8001696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800169a:	68a5      	ldr	r5, [r4, #8]
 800169c:	6867      	ldr	r7, [r4, #4]
 800169e:	3f01      	subs	r7, #1
 80016a0:	d501      	bpl.n	80016a6 <_fwalk_reent+0x22>
 80016a2:	6824      	ldr	r4, [r4, #0]
 80016a4:	e7f5      	b.n	8001692 <_fwalk_reent+0xe>
 80016a6:	89ab      	ldrh	r3, [r5, #12]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d907      	bls.n	80016bc <_fwalk_reent+0x38>
 80016ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016b0:	3301      	adds	r3, #1
 80016b2:	d003      	beq.n	80016bc <_fwalk_reent+0x38>
 80016b4:	4629      	mov	r1, r5
 80016b6:	4640      	mov	r0, r8
 80016b8:	47c8      	blx	r9
 80016ba:	4306      	orrs	r6, r0
 80016bc:	3568      	adds	r5, #104	; 0x68
 80016be:	e7ee      	b.n	800169e <_fwalk_reent+0x1a>

080016c0 <__swhatbuf_r>:
 80016c0:	b570      	push	{r4, r5, r6, lr}
 80016c2:	460e      	mov	r6, r1
 80016c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016c8:	b090      	sub	sp, #64	; 0x40
 80016ca:	2900      	cmp	r1, #0
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	da07      	bge.n	80016e2 <__swhatbuf_r+0x22>
 80016d2:	2300      	movs	r3, #0
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	89b3      	ldrh	r3, [r6, #12]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	d410      	bmi.n	80016fe <__swhatbuf_r+0x3e>
 80016dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e0:	e00e      	b.n	8001700 <__swhatbuf_r+0x40>
 80016e2:	aa01      	add	r2, sp, #4
 80016e4:	f000 f970 	bl	80019c8 <_fstat_r>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	dbf2      	blt.n	80016d2 <__swhatbuf_r+0x12>
 80016ec:	9a02      	ldr	r2, [sp, #8]
 80016ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80016f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016f6:	425a      	negs	r2, r3
 80016f8:	415a      	adcs	r2, r3
 80016fa:	602a      	str	r2, [r5, #0]
 80016fc:	e7ee      	b.n	80016dc <__swhatbuf_r+0x1c>
 80016fe:	2340      	movs	r3, #64	; 0x40
 8001700:	2000      	movs	r0, #0
 8001702:	6023      	str	r3, [r4, #0]
 8001704:	b010      	add	sp, #64	; 0x40
 8001706:	bd70      	pop	{r4, r5, r6, pc}

08001708 <__smakebuf_r>:
 8001708:	898b      	ldrh	r3, [r1, #12]
 800170a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800170c:	079d      	lsls	r5, r3, #30
 800170e:	4606      	mov	r6, r0
 8001710:	460c      	mov	r4, r1
 8001712:	d507      	bpl.n	8001724 <__smakebuf_r+0x1c>
 8001714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	6123      	str	r3, [r4, #16]
 800171c:	2301      	movs	r3, #1
 800171e:	6163      	str	r3, [r4, #20]
 8001720:	b002      	add	sp, #8
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	ab01      	add	r3, sp, #4
 8001726:	466a      	mov	r2, sp
 8001728:	f7ff ffca 	bl	80016c0 <__swhatbuf_r>
 800172c:	9900      	ldr	r1, [sp, #0]
 800172e:	4605      	mov	r5, r0
 8001730:	4630      	mov	r0, r6
 8001732:	f000 f875 	bl	8001820 <_malloc_r>
 8001736:	b948      	cbnz	r0, 800174c <__smakebuf_r+0x44>
 8001738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800173c:	059a      	lsls	r2, r3, #22
 800173e:	d4ef      	bmi.n	8001720 <__smakebuf_r+0x18>
 8001740:	f023 0303 	bic.w	r3, r3, #3
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	81a3      	strh	r3, [r4, #12]
 800174a:	e7e3      	b.n	8001714 <__smakebuf_r+0xc>
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <__smakebuf_r+0x7c>)
 800174e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001750:	89a3      	ldrh	r3, [r4, #12]
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001758:	81a3      	strh	r3, [r4, #12]
 800175a:	9b00      	ldr	r3, [sp, #0]
 800175c:	6120      	str	r0, [r4, #16]
 800175e:	6163      	str	r3, [r4, #20]
 8001760:	9b01      	ldr	r3, [sp, #4]
 8001762:	b15b      	cbz	r3, 800177c <__smakebuf_r+0x74>
 8001764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001768:	4630      	mov	r0, r6
 800176a:	f000 f93f 	bl	80019ec <_isatty_r>
 800176e:	b128      	cbz	r0, 800177c <__smakebuf_r+0x74>
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	81a3      	strh	r3, [r4, #12]
 800177c:	89a3      	ldrh	r3, [r4, #12]
 800177e:	431d      	orrs	r5, r3
 8001780:	81a5      	strh	r5, [r4, #12]
 8001782:	e7cd      	b.n	8001720 <__smakebuf_r+0x18>
 8001784:	0800152d 	.word	0x0800152d

08001788 <_free_r>:
 8001788:	b538      	push	{r3, r4, r5, lr}
 800178a:	4605      	mov	r5, r0
 800178c:	2900      	cmp	r1, #0
 800178e:	d043      	beq.n	8001818 <_free_r+0x90>
 8001790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001794:	1f0c      	subs	r4, r1, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	bfb8      	it	lt
 800179a:	18e4      	addlt	r4, r4, r3
 800179c:	f000 f948 	bl	8001a30 <__malloc_lock>
 80017a0:	4a1e      	ldr	r2, [pc, #120]	; (800181c <_free_r+0x94>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	4610      	mov	r0, r2
 80017a6:	b933      	cbnz	r3, 80017b6 <_free_r+0x2e>
 80017a8:	6063      	str	r3, [r4, #4]
 80017aa:	6014      	str	r4, [r2, #0]
 80017ac:	4628      	mov	r0, r5
 80017ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017b2:	f000 b93e 	b.w	8001a32 <__malloc_unlock>
 80017b6:	42a3      	cmp	r3, r4
 80017b8:	d90b      	bls.n	80017d2 <_free_r+0x4a>
 80017ba:	6821      	ldr	r1, [r4, #0]
 80017bc:	1862      	adds	r2, r4, r1
 80017be:	4293      	cmp	r3, r2
 80017c0:	bf01      	itttt	eq
 80017c2:	681a      	ldreq	r2, [r3, #0]
 80017c4:	685b      	ldreq	r3, [r3, #4]
 80017c6:	1852      	addeq	r2, r2, r1
 80017c8:	6022      	streq	r2, [r4, #0]
 80017ca:	6063      	str	r3, [r4, #4]
 80017cc:	6004      	str	r4, [r0, #0]
 80017ce:	e7ed      	b.n	80017ac <_free_r+0x24>
 80017d0:	4613      	mov	r3, r2
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	b10a      	cbz	r2, 80017da <_free_r+0x52>
 80017d6:	42a2      	cmp	r2, r4
 80017d8:	d9fa      	bls.n	80017d0 <_free_r+0x48>
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	1858      	adds	r0, r3, r1
 80017de:	42a0      	cmp	r0, r4
 80017e0:	d10b      	bne.n	80017fa <_free_r+0x72>
 80017e2:	6820      	ldr	r0, [r4, #0]
 80017e4:	4401      	add	r1, r0
 80017e6:	1858      	adds	r0, r3, r1
 80017e8:	4282      	cmp	r2, r0
 80017ea:	6019      	str	r1, [r3, #0]
 80017ec:	d1de      	bne.n	80017ac <_free_r+0x24>
 80017ee:	6810      	ldr	r0, [r2, #0]
 80017f0:	6852      	ldr	r2, [r2, #4]
 80017f2:	4401      	add	r1, r0
 80017f4:	6019      	str	r1, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	e7d8      	b.n	80017ac <_free_r+0x24>
 80017fa:	d902      	bls.n	8001802 <_free_r+0x7a>
 80017fc:	230c      	movs	r3, #12
 80017fe:	602b      	str	r3, [r5, #0]
 8001800:	e7d4      	b.n	80017ac <_free_r+0x24>
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	1821      	adds	r1, r4, r0
 8001806:	428a      	cmp	r2, r1
 8001808:	bf01      	itttt	eq
 800180a:	6811      	ldreq	r1, [r2, #0]
 800180c:	6852      	ldreq	r2, [r2, #4]
 800180e:	1809      	addeq	r1, r1, r0
 8001810:	6021      	streq	r1, [r4, #0]
 8001812:	6062      	str	r2, [r4, #4]
 8001814:	605c      	str	r4, [r3, #4]
 8001816:	e7c9      	b.n	80017ac <_free_r+0x24>
 8001818:	bd38      	pop	{r3, r4, r5, pc}
 800181a:	bf00      	nop
 800181c:	20000090 	.word	0x20000090

08001820 <_malloc_r>:
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	1ccd      	adds	r5, r1, #3
 8001824:	f025 0503 	bic.w	r5, r5, #3
 8001828:	3508      	adds	r5, #8
 800182a:	2d0c      	cmp	r5, #12
 800182c:	bf38      	it	cc
 800182e:	250c      	movcc	r5, #12
 8001830:	2d00      	cmp	r5, #0
 8001832:	4606      	mov	r6, r0
 8001834:	db01      	blt.n	800183a <_malloc_r+0x1a>
 8001836:	42a9      	cmp	r1, r5
 8001838:	d903      	bls.n	8001842 <_malloc_r+0x22>
 800183a:	230c      	movs	r3, #12
 800183c:	6033      	str	r3, [r6, #0]
 800183e:	2000      	movs	r0, #0
 8001840:	bd70      	pop	{r4, r5, r6, pc}
 8001842:	f000 f8f5 	bl	8001a30 <__malloc_lock>
 8001846:	4a23      	ldr	r2, [pc, #140]	; (80018d4 <_malloc_r+0xb4>)
 8001848:	6814      	ldr	r4, [r2, #0]
 800184a:	4621      	mov	r1, r4
 800184c:	b991      	cbnz	r1, 8001874 <_malloc_r+0x54>
 800184e:	4c22      	ldr	r4, [pc, #136]	; (80018d8 <_malloc_r+0xb8>)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	b91b      	cbnz	r3, 800185c <_malloc_r+0x3c>
 8001854:	4630      	mov	r0, r6
 8001856:	f000 f841 	bl	80018dc <_sbrk_r>
 800185a:	6020      	str	r0, [r4, #0]
 800185c:	4629      	mov	r1, r5
 800185e:	4630      	mov	r0, r6
 8001860:	f000 f83c 	bl	80018dc <_sbrk_r>
 8001864:	1c43      	adds	r3, r0, #1
 8001866:	d126      	bne.n	80018b6 <_malloc_r+0x96>
 8001868:	230c      	movs	r3, #12
 800186a:	4630      	mov	r0, r6
 800186c:	6033      	str	r3, [r6, #0]
 800186e:	f000 f8e0 	bl	8001a32 <__malloc_unlock>
 8001872:	e7e4      	b.n	800183e <_malloc_r+0x1e>
 8001874:	680b      	ldr	r3, [r1, #0]
 8001876:	1b5b      	subs	r3, r3, r5
 8001878:	d41a      	bmi.n	80018b0 <_malloc_r+0x90>
 800187a:	2b0b      	cmp	r3, #11
 800187c:	d90f      	bls.n	800189e <_malloc_r+0x7e>
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	18cc      	adds	r4, r1, r3
 8001882:	50cd      	str	r5, [r1, r3]
 8001884:	4630      	mov	r0, r6
 8001886:	f000 f8d4 	bl	8001a32 <__malloc_unlock>
 800188a:	f104 000b 	add.w	r0, r4, #11
 800188e:	1d23      	adds	r3, r4, #4
 8001890:	f020 0007 	bic.w	r0, r0, #7
 8001894:	1ac3      	subs	r3, r0, r3
 8001896:	d01b      	beq.n	80018d0 <_malloc_r+0xb0>
 8001898:	425a      	negs	r2, r3
 800189a:	50e2      	str	r2, [r4, r3]
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	428c      	cmp	r4, r1
 80018a0:	bf0b      	itete	eq
 80018a2:	6863      	ldreq	r3, [r4, #4]
 80018a4:	684b      	ldrne	r3, [r1, #4]
 80018a6:	6013      	streq	r3, [r2, #0]
 80018a8:	6063      	strne	r3, [r4, #4]
 80018aa:	bf18      	it	ne
 80018ac:	460c      	movne	r4, r1
 80018ae:	e7e9      	b.n	8001884 <_malloc_r+0x64>
 80018b0:	460c      	mov	r4, r1
 80018b2:	6849      	ldr	r1, [r1, #4]
 80018b4:	e7ca      	b.n	800184c <_malloc_r+0x2c>
 80018b6:	1cc4      	adds	r4, r0, #3
 80018b8:	f024 0403 	bic.w	r4, r4, #3
 80018bc:	42a0      	cmp	r0, r4
 80018be:	d005      	beq.n	80018cc <_malloc_r+0xac>
 80018c0:	1a21      	subs	r1, r4, r0
 80018c2:	4630      	mov	r0, r6
 80018c4:	f000 f80a 	bl	80018dc <_sbrk_r>
 80018c8:	3001      	adds	r0, #1
 80018ca:	d0cd      	beq.n	8001868 <_malloc_r+0x48>
 80018cc:	6025      	str	r5, [r4, #0]
 80018ce:	e7d9      	b.n	8001884 <_malloc_r+0x64>
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	bf00      	nop
 80018d4:	20000090 	.word	0x20000090
 80018d8:	20000094 	.word	0x20000094

080018dc <_sbrk_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	2300      	movs	r3, #0
 80018e0:	4c05      	ldr	r4, [pc, #20]	; (80018f8 <_sbrk_r+0x1c>)
 80018e2:	4605      	mov	r5, r0
 80018e4:	4608      	mov	r0, r1
 80018e6:	6023      	str	r3, [r4, #0]
 80018e8:	f7ff fb44 	bl	8000f74 <_sbrk>
 80018ec:	1c43      	adds	r3, r0, #1
 80018ee:	d102      	bne.n	80018f6 <_sbrk_r+0x1a>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	b103      	cbz	r3, 80018f6 <_sbrk_r+0x1a>
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	20000134 	.word	0x20000134

080018fc <__sread>:
 80018fc:	b510      	push	{r4, lr}
 80018fe:	460c      	mov	r4, r1
 8001900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001904:	f000 f896 	bl	8001a34 <_read_r>
 8001908:	2800      	cmp	r0, #0
 800190a:	bfab      	itete	ge
 800190c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800190e:	89a3      	ldrhlt	r3, [r4, #12]
 8001910:	181b      	addge	r3, r3, r0
 8001912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001916:	bfac      	ite	ge
 8001918:	6563      	strge	r3, [r4, #84]	; 0x54
 800191a:	81a3      	strhlt	r3, [r4, #12]
 800191c:	bd10      	pop	{r4, pc}

0800191e <__swrite>:
 800191e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001922:	461f      	mov	r7, r3
 8001924:	898b      	ldrh	r3, [r1, #12]
 8001926:	4605      	mov	r5, r0
 8001928:	05db      	lsls	r3, r3, #23
 800192a:	460c      	mov	r4, r1
 800192c:	4616      	mov	r6, r2
 800192e:	d505      	bpl.n	800193c <__swrite+0x1e>
 8001930:	2302      	movs	r3, #2
 8001932:	2200      	movs	r2, #0
 8001934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001938:	f000 f868 	bl	8001a0c <_lseek_r>
 800193c:	89a3      	ldrh	r3, [r4, #12]
 800193e:	4632      	mov	r2, r6
 8001940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001944:	81a3      	strh	r3, [r4, #12]
 8001946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800194a:	463b      	mov	r3, r7
 800194c:	4628      	mov	r0, r5
 800194e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001952:	f000 b817 	b.w	8001984 <_write_r>

08001956 <__sseek>:
 8001956:	b510      	push	{r4, lr}
 8001958:	460c      	mov	r4, r1
 800195a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195e:	f000 f855 	bl	8001a0c <_lseek_r>
 8001962:	1c43      	adds	r3, r0, #1
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	bf15      	itete	ne
 8001968:	6560      	strne	r0, [r4, #84]	; 0x54
 800196a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800196e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001972:	81a3      	strheq	r3, [r4, #12]
 8001974:	bf18      	it	ne
 8001976:	81a3      	strhne	r3, [r4, #12]
 8001978:	bd10      	pop	{r4, pc}

0800197a <__sclose>:
 800197a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800197e:	f000 b813 	b.w	80019a8 <_close_r>
	...

08001984 <_write_r>:
 8001984:	b538      	push	{r3, r4, r5, lr}
 8001986:	4605      	mov	r5, r0
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	2200      	movs	r2, #0
 800198e:	4c05      	ldr	r4, [pc, #20]	; (80019a4 <_write_r+0x20>)
 8001990:	6022      	str	r2, [r4, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	f7ff fae0 	bl	8000f58 <_write>
 8001998:	1c43      	adds	r3, r0, #1
 800199a:	d102      	bne.n	80019a2 <_write_r+0x1e>
 800199c:	6823      	ldr	r3, [r4, #0]
 800199e:	b103      	cbz	r3, 80019a2 <_write_r+0x1e>
 80019a0:	602b      	str	r3, [r5, #0]
 80019a2:	bd38      	pop	{r3, r4, r5, pc}
 80019a4:	20000134 	.word	0x20000134

080019a8 <_close_r>:
 80019a8:	b538      	push	{r3, r4, r5, lr}
 80019aa:	2300      	movs	r3, #0
 80019ac:	4c05      	ldr	r4, [pc, #20]	; (80019c4 <_close_r+0x1c>)
 80019ae:	4605      	mov	r5, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	6023      	str	r3, [r4, #0]
 80019b4:	f7ff faf8 	bl	8000fa8 <_close>
 80019b8:	1c43      	adds	r3, r0, #1
 80019ba:	d102      	bne.n	80019c2 <_close_r+0x1a>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	b103      	cbz	r3, 80019c2 <_close_r+0x1a>
 80019c0:	602b      	str	r3, [r5, #0]
 80019c2:	bd38      	pop	{r3, r4, r5, pc}
 80019c4:	20000134 	.word	0x20000134

080019c8 <_fstat_r>:
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	2300      	movs	r3, #0
 80019cc:	4c06      	ldr	r4, [pc, #24]	; (80019e8 <_fstat_r+0x20>)
 80019ce:	4605      	mov	r5, r0
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	6023      	str	r3, [r4, #0]
 80019d6:	f7ff faea 	bl	8000fae <_fstat>
 80019da:	1c43      	adds	r3, r0, #1
 80019dc:	d102      	bne.n	80019e4 <_fstat_r+0x1c>
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	b103      	cbz	r3, 80019e4 <_fstat_r+0x1c>
 80019e2:	602b      	str	r3, [r5, #0]
 80019e4:	bd38      	pop	{r3, r4, r5, pc}
 80019e6:	bf00      	nop
 80019e8:	20000134 	.word	0x20000134

080019ec <_isatty_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	2300      	movs	r3, #0
 80019f0:	4c05      	ldr	r4, [pc, #20]	; (8001a08 <_isatty_r+0x1c>)
 80019f2:	4605      	mov	r5, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	6023      	str	r3, [r4, #0]
 80019f8:	f7ff fade 	bl	8000fb8 <_isatty>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_isatty_r+0x1a>
 8001a00:	6823      	ldr	r3, [r4, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_isatty_r+0x1a>
 8001a04:	602b      	str	r3, [r5, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	20000134 	.word	0x20000134

08001a0c <_lseek_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4605      	mov	r5, r0
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	4c05      	ldr	r4, [pc, #20]	; (8001a2c <_lseek_r+0x20>)
 8001a18:	6022      	str	r2, [r4, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f7ff face 	bl	8000fbc <_lseek>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_lseek_r+0x1e>
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_lseek_r+0x1e>
 8001a28:	602b      	str	r3, [r5, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	20000134 	.word	0x20000134

08001a30 <__malloc_lock>:
 8001a30:	4770      	bx	lr

08001a32 <__malloc_unlock>:
 8001a32:	4770      	bx	lr

08001a34 <_read_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4605      	mov	r5, r0
 8001a38:	4608      	mov	r0, r1
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4c05      	ldr	r4, [pc, #20]	; (8001a54 <_read_r+0x20>)
 8001a40:	6022      	str	r2, [r4, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7ff fa86 	bl	8000f54 <_read>
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	d102      	bne.n	8001a52 <_read_r+0x1e>
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	b103      	cbz	r3, 8001a52 <_read_r+0x1e>
 8001a50:	602b      	str	r3, [r5, #0]
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	20000134 	.word	0x20000134

08001a58 <_init>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	bf00      	nop
 8001a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5e:	bc08      	pop	{r3}
 8001a60:	469e      	mov	lr, r3
 8001a62:	4770      	bx	lr

08001a64 <_fini>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr
