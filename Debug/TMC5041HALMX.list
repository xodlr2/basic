
TMC5041HALMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000358c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08003774  08003774  00013774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080038b4  080038b4  000138b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080038bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000100  20000074  08003930  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000174  08003930  00020174  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010946  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000279b  00000000  00000000  000309e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004077  00000000  00000000  0003317e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007e0  00000000  00000000  000371f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000920  00000000  00000000  000379d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004bba  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ca0  00000000  00000000  0003ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fb52  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f6c  00000000  00000000  0003fbd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	0800375c 	.word	0x0800375c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	0800375c 	.word	0x0800375c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_fmul>:
 8000bbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bca:	ea92 0f0c 	teqne	r2, ip
 8000bce:	ea93 0f0c 	teqne	r3, ip
 8000bd2:	d06f      	beq.n	8000cb4 <__aeabi_fmul+0xf8>
 8000bd4:	441a      	add	r2, r3
 8000bd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bda:	0240      	lsls	r0, r0, #9
 8000bdc:	bf18      	it	ne
 8000bde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be2:	d01e      	beq.n	8000c22 <__aeabi_fmul+0x66>
 8000be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf0:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bfc:	bf3e      	ittt	cc
 8000bfe:	0049      	lslcc	r1, r1, #1
 8000c00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c04:	005b      	lslcc	r3, r3, #1
 8000c06:	ea40 0001 	orr.w	r0, r0, r1
 8000c0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0e:	2afd      	cmp	r2, #253	; 0xfd
 8000c10:	d81d      	bhi.n	8000c4e <__aeabi_fmul+0x92>
 8000c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1a:	bf08      	it	eq
 8000c1c:	f020 0001 	biceq.w	r0, r0, #1
 8000c20:	4770      	bx	lr
 8000c22:	f090 0f00 	teq	r0, #0
 8000c26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2a:	bf08      	it	eq
 8000c2c:	0249      	lsleq	r1, r1, #9
 8000c2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c36:	3a7f      	subs	r2, #127	; 0x7f
 8000c38:	bfc2      	ittt	gt
 8000c3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c42:	4770      	bxgt	lr
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	dc5d      	bgt.n	8000d0c <__aeabi_fmul+0x150>
 8000c50:	f112 0f19 	cmn.w	r2, #25
 8000c54:	bfdc      	itt	le
 8000c56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c5a:	4770      	bxle	lr
 8000c5c:	f1c2 0200 	rsb	r2, r2, #0
 8000c60:	0041      	lsls	r1, r0, #1
 8000c62:	fa21 f102 	lsr.w	r1, r1, r2
 8000c66:	f1c2 0220 	rsb	r2, r2, #32
 8000c6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c72:	f140 0000 	adc.w	r0, r0, #0
 8000c76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7a:	bf08      	it	eq
 8000c7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c80:	4770      	bx	lr
 8000c82:	f092 0f00 	teq	r2, #0
 8000c86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c8a:	bf02      	ittt	eq
 8000c8c:	0040      	lsleq	r0, r0, #1
 8000c8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c92:	3a01      	subeq	r2, #1
 8000c94:	d0f9      	beq.n	8000c8a <__aeabi_fmul+0xce>
 8000c96:	ea40 000c 	orr.w	r0, r0, ip
 8000c9a:	f093 0f00 	teq	r3, #0
 8000c9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca2:	bf02      	ittt	eq
 8000ca4:	0049      	lsleq	r1, r1, #1
 8000ca6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000caa:	3b01      	subeq	r3, #1
 8000cac:	d0f9      	beq.n	8000ca2 <__aeabi_fmul+0xe6>
 8000cae:	ea41 010c 	orr.w	r1, r1, ip
 8000cb2:	e78f      	b.n	8000bd4 <__aeabi_fmul+0x18>
 8000cb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb8:	ea92 0f0c 	teq	r2, ip
 8000cbc:	bf18      	it	ne
 8000cbe:	ea93 0f0c 	teqne	r3, ip
 8000cc2:	d00a      	beq.n	8000cda <__aeabi_fmul+0x11e>
 8000cc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc8:	bf18      	it	ne
 8000cca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	d1d8      	bne.n	8000c82 <__aeabi_fmul+0xc6>
 8000cd0:	ea80 0001 	eor.w	r0, r0, r1
 8000cd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f090 0f00 	teq	r0, #0
 8000cde:	bf17      	itett	ne
 8000ce0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	f091 0f00 	teqne	r1, #0
 8000cea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cee:	d014      	beq.n	8000d1a <__aeabi_fmul+0x15e>
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	d101      	bne.n	8000cfa <__aeabi_fmul+0x13e>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	d10f      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000cfa:	ea93 0f0c 	teq	r3, ip
 8000cfe:	d103      	bne.n	8000d08 <__aeabi_fmul+0x14c>
 8000d00:	024b      	lsls	r3, r1, #9
 8000d02:	bf18      	it	ne
 8000d04:	4608      	movne	r0, r1
 8000d06:	d108      	bne.n	8000d1a <__aeabi_fmul+0x15e>
 8000d08:	ea80 0001 	eor.w	r0, r0, r1
 8000d0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fdiv>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d069      	beq.n	8000e10 <__aeabi_fdiv+0xec>
 8000d3c:	eba2 0203 	sub.w	r2, r2, r3
 8000d40:	ea80 0c01 	eor.w	ip, r0, r1
 8000d44:	0249      	lsls	r1, r1, #9
 8000d46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4a:	d037      	beq.n	8000dbc <__aeabi_fdiv+0x98>
 8000d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	bf38      	it	cc
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	bf24      	itt	cs
 8000d6e:	1a5b      	subcs	r3, r3, r1
 8000d70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d78:	bf24      	itt	cs
 8000d7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d86:	bf24      	itt	cs
 8000d88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d94:	bf24      	itt	cs
 8000d96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da6:	d1e0      	bne.n	8000d6a <__aeabi_fdiv+0x46>
 8000da8:	2afd      	cmp	r2, #253	; 0xfd
 8000daa:	f63f af50 	bhi.w	8000c4e <__aeabi_fmul+0x92>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db4:	bf08      	it	eq
 8000db6:	f020 0001 	biceq.w	r0, r0, #1
 8000dba:	4770      	bx	lr
 8000dbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc4:	327f      	adds	r2, #127	; 0x7f
 8000dc6:	bfc2      	ittt	gt
 8000dc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd0:	4770      	bxgt	lr
 8000dd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd6:	f04f 0300 	mov.w	r3, #0
 8000dda:	3a01      	subs	r2, #1
 8000ddc:	e737      	b.n	8000c4e <__aeabi_fmul+0x92>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fdiv+0xc2>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fdiv+0xda>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e795      	b.n	8000d3c <__aeabi_fdiv+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d108      	bne.n	8000e2c <__aeabi_fdiv+0x108>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	f47f af7d 	bne.w	8000d1a <__aeabi_fmul+0x15e>
 8000e20:	ea93 0f0c 	teq	r3, ip
 8000e24:	f47f af70 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e776      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	d104      	bne.n	8000e3c <__aeabi_fdiv+0x118>
 8000e32:	024b      	lsls	r3, r1, #9
 8000e34:	f43f af4c 	beq.w	8000cd0 <__aeabi_fmul+0x114>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e76e      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1ca      	bne.n	8000dde <__aeabi_fdiv+0xba>
 8000e48:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e4c:	f47f af5c 	bne.w	8000d08 <__aeabi_fmul+0x14c>
 8000e50:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e54:	f47f af3c 	bne.w	8000cd0 <__aeabi_fmul+0x114>
 8000e58:	e75f      	b.n	8000d1a <__aeabi_fmul+0x15e>
 8000e5a:	bf00      	nop

08000e5c <__gesf2>:
 8000e5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e60:	e006      	b.n	8000e70 <__cmpsf2+0x4>
 8000e62:	bf00      	nop

08000e64 <__lesf2>:
 8000e64:	f04f 0c01 	mov.w	ip, #1
 8000e68:	e002      	b.n	8000e70 <__cmpsf2+0x4>
 8000e6a:	bf00      	nop

08000e6c <__cmpsf2>:
 8000e6c:	f04f 0c01 	mov.w	ip, #1
 8000e70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e80:	bf18      	it	ne
 8000e82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e86:	d011      	beq.n	8000eac <__cmpsf2+0x40>
 8000e88:	b001      	add	sp, #4
 8000e8a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8e:	bf18      	it	ne
 8000e90:	ea90 0f01 	teqne	r0, r1
 8000e94:	bf58      	it	pl
 8000e96:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9a:	bf88      	it	hi
 8000e9c:	17c8      	asrhi	r0, r1, #31
 8000e9e:	bf38      	it	cc
 8000ea0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea4:	bf18      	it	ne
 8000ea6:	f040 0001 	orrne.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb0:	d102      	bne.n	8000eb8 <__cmpsf2+0x4c>
 8000eb2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb6:	d105      	bne.n	8000ec4 <__cmpsf2+0x58>
 8000eb8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ebc:	d1e4      	bne.n	8000e88 <__cmpsf2+0x1c>
 8000ebe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec2:	d0e1      	beq.n	8000e88 <__cmpsf2+0x1c>
 8000ec4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <__aeabi_cfrcmple>:
 8000ecc:	4684      	mov	ip, r0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	4661      	mov	r1, ip
 8000ed2:	e7ff      	b.n	8000ed4 <__aeabi_cfcmpeq>

08000ed4 <__aeabi_cfcmpeq>:
 8000ed4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed6:	f7ff ffc9 	bl	8000e6c <__cmpsf2>
 8000eda:	2800      	cmp	r0, #0
 8000edc:	bf48      	it	mi
 8000ede:	f110 0f00 	cmnmi.w	r0, #0
 8000ee2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee4 <__aeabi_fcmpeq>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff fff4 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000eec:	bf0c      	ite	eq
 8000eee:	2001      	moveq	r0, #1
 8000ef0:	2000      	movne	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmplt>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffea 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f00:	bf34      	ite	cc
 8000f02:	2001      	movcc	r0, #1
 8000f04:	2000      	movcs	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmple>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffe0 	bl	8000ed4 <__aeabi_cfcmpeq>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpge>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffd2 	bl	8000ecc <__aeabi_cfrcmple>
 8000f28:	bf94      	ite	ls
 8000f2a:	2001      	movls	r0, #1
 8000f2c:	2000      	movhi	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmpgt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffc8 	bl	8000ecc <__aeabi_cfrcmple>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_f2uiz>:
 8000f48:	0042      	lsls	r2, r0, #1
 8000f4a:	d20e      	bcs.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f50:	d30b      	bcc.n	8000f6a <__aeabi_f2uiz+0x22>
 8000f52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5a:	d409      	bmi.n	8000f70 <__aeabi_f2uiz+0x28>
 8000f5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2uiz+0x32>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d102      	bne.n	8000f80 <__aeabi_f2uiz+0x38>
 8000f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7e:	4770      	bx	lr
 8000f80:	f04f 0000 	mov.w	r0, #0
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_MspInit>:
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_InitTick+0x3c>)
{
 8000f90:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <HAL_InitTick+0x40>)
 8000f9e:	6810      	ldr	r0, [r2, #0]
 8000fa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa4:	f000 f880 	bl	80010a8 <HAL_SYSTICK_Config>
 8000fa8:	4604      	mov	r4, r0
 8000faa:	b958      	cbnz	r0, 8000fc4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	2d0f      	cmp	r5, #15
 8000fae:	d809      	bhi.n	8000fc4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4629      	mov	r1, r5
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f842 	bl	8001040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <HAL_InitTick+0x44>)
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	601d      	str	r5, [r3, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <HAL_Init+0x20>)
{
 8000fd6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	f000 f81b 	bl	800101c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f7ff ffd0 	bl	8000f8c <HAL_InitTick>
  HAL_MspInit();
 8000fec:	f7ff ffcc 	bl	8000f88 <HAL_MspInit>
}
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	bd08      	pop	{r3, pc}
 8000ff4:	40022000 	.word	0x40022000

08000ff8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_IncTick+0x10>)
 8000ffa:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_IncTick+0x14>)
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	440b      	add	r3, r1
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200000a8 	.word	0x200000a8
 800100c:	20000000 	.word	0x20000000

08001010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8

0800101c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4a07      	ldr	r2, [pc, #28]	; (800103c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800101e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001022:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800102a:	041b      	lsls	r3, r3, #16
 800102c:	0c1b      	lsrs	r3, r3, #16
 800102e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001036:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001038:	60d3      	str	r3, [r2, #12]
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b530      	push	{r4, r5, lr}
 8001044:	68dc      	ldr	r4, [r3, #12]
 8001046:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	2b04      	cmp	r3, #4
 8001052:	bf28      	it	cs
 8001054:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105c:	bf98      	it	ls
 800105e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	fa05 f303 	lsl.w	r3, r5, r3
 8001064:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001068:	bf88      	it	hi
 800106a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4019      	ands	r1, r3
 800106e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	fa05 f404 	lsl.w	r4, r5, r4
 8001074:	3c01      	subs	r4, #1
 8001076:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001078:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107a:	ea42 0201 	orr.w	r2, r2, r1
 800107e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	bfaf      	iteee	ge
 8001084:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	4b06      	ldrlt	r3, [pc, #24]	; (80010a4 <HAL_NVIC_SetPriority+0x64>)
 800108a:	f000 000f 	andlt.w	r0, r0, #15
 800108e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	bfa5      	ittet	ge
 8001092:	b2d2      	uxtbge	r2, r2
 8001094:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800109e:	bd30      	pop	{r4, r5, pc}
 80010a0:	e000ed00 	.word	0xe000ed00
 80010a4:	e000ed14 	.word	0xe000ed14

080010a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	3801      	subs	r0, #1
 80010aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ae:	d20a      	bcs.n	80010c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80010d8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80010da:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010dc:	4f6c      	ldr	r7, [pc, #432]	; (8001290 <HAL_GPIO_Init+0x1bc>)
 80010de:	4b6d      	ldr	r3, [pc, #436]	; (8001294 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e0:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 800129c <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 80010e4:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80012a0 <HAL_GPIO_Init+0x1cc>
    ioposition = (0x01U << position);
 80010e8:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ec:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010ee:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010f6:	45a0      	cmp	r8, r4
 80010f8:	f040 8085 	bne.w	8001206 <HAL_GPIO_Init+0x132>
      switch (GPIO_Init->Mode)
 80010fc:	684d      	ldr	r5, [r1, #4]
 80010fe:	2d12      	cmp	r5, #18
 8001100:	f000 80b7 	beq.w	8001272 <HAL_GPIO_Init+0x19e>
 8001104:	f200 808d 	bhi.w	8001222 <HAL_GPIO_Init+0x14e>
 8001108:	2d02      	cmp	r5, #2
 800110a:	f000 80af 	beq.w	800126c <HAL_GPIO_Init+0x198>
 800110e:	f200 8081 	bhi.w	8001214 <HAL_GPIO_Init+0x140>
 8001112:	2d00      	cmp	r5, #0
 8001114:	f000 8091 	beq.w	800123a <HAL_GPIO_Init+0x166>
 8001118:	2d01      	cmp	r5, #1
 800111a:	f000 80a5 	beq.w	8001268 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800111e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001122:	2cff      	cmp	r4, #255	; 0xff
 8001124:	bf93      	iteet	ls
 8001126:	4682      	movls	sl, r0
 8001128:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800112c:	3d08      	subhi	r5, #8
 800112e:	f8d0 b000 	ldrls.w	fp, [r0]
 8001132:	bf92      	itee	ls
 8001134:	00b5      	lslls	r5, r6, #2
 8001136:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800113a:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800113c:	fa09 f805 	lsl.w	r8, r9, r5
 8001140:	ea2b 0808 	bic.w	r8, fp, r8
 8001144:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001148:	bf88      	it	hi
 800114a:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800114e:	ea48 0505 	orr.w	r5, r8, r5
 8001152:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001156:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800115a:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800115e:	d052      	beq.n	8001206 <HAL_GPIO_Init+0x132>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001160:	69bd      	ldr	r5, [r7, #24]
 8001162:	f026 0803 	bic.w	r8, r6, #3
 8001166:	f045 0501 	orr.w	r5, r5, #1
 800116a:	61bd      	str	r5, [r7, #24]
 800116c:	69bd      	ldr	r5, [r7, #24]
 800116e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001172:	f005 0501 	and.w	r5, r5, #1
 8001176:	9501      	str	r5, [sp, #4]
 8001178:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800117c:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001180:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001182:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001186:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800118a:	fa09 f90b 	lsl.w	r9, r9, fp
 800118e:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	4d41      	ldr	r5, [pc, #260]	; (8001298 <HAL_GPIO_Init+0x1c4>)
 8001194:	42a8      	cmp	r0, r5
 8001196:	d071      	beq.n	800127c <HAL_GPIO_Init+0x1a8>
 8001198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800119c:	42a8      	cmp	r0, r5
 800119e:	d06f      	beq.n	8001280 <HAL_GPIO_Init+0x1ac>
 80011a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a4:	42a8      	cmp	r0, r5
 80011a6:	d06d      	beq.n	8001284 <HAL_GPIO_Init+0x1b0>
 80011a8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011ac:	42a8      	cmp	r0, r5
 80011ae:	d06b      	beq.n	8001288 <HAL_GPIO_Init+0x1b4>
 80011b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b4:	42a8      	cmp	r0, r5
 80011b6:	d069      	beq.n	800128c <HAL_GPIO_Init+0x1b8>
 80011b8:	4570      	cmp	r0, lr
 80011ba:	bf0c      	ite	eq
 80011bc:	2505      	moveq	r5, #5
 80011be:	2506      	movne	r5, #6
 80011c0:	fa05 f50b 	lsl.w	r5, r5, fp
 80011c4:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80011c8:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011cc:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ce:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80011d2:	bf14      	ite	ne
 80011d4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d6:	43a5      	biceq	r5, r4
 80011d8:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011da:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	bf14      	ite	ne
 80011e2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011e4:	43a5      	biceq	r5, r4
 80011e6:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011e8:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ea:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011ee:	bf14      	ite	ne
 80011f0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011f2:	43a5      	biceq	r5, r4
 80011f4:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f6:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f8:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fc:	bf14      	ite	ne
 80011fe:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001200:	ea25 0404 	biceq.w	r4, r5, r4
 8001204:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001206:	3601      	adds	r6, #1
 8001208:	2e10      	cmp	r6, #16
 800120a:	f47f af6d 	bne.w	80010e8 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 800120e:	b003      	add	sp, #12
 8001210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001214:	2d03      	cmp	r5, #3
 8001216:	d025      	beq.n	8001264 <HAL_GPIO_Init+0x190>
 8001218:	2d11      	cmp	r5, #17
 800121a:	d180      	bne.n	800111e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800121c:	68ca      	ldr	r2, [r1, #12]
 800121e:	3204      	adds	r2, #4
          break;
 8001220:	e77d      	b.n	800111e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001222:	4565      	cmp	r5, ip
 8001224:	d009      	beq.n	800123a <HAL_GPIO_Init+0x166>
 8001226:	d812      	bhi.n	800124e <HAL_GPIO_Init+0x17a>
 8001228:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80012a4 <HAL_GPIO_Init+0x1d0>
 800122c:	454d      	cmp	r5, r9
 800122e:	d004      	beq.n	800123a <HAL_GPIO_Init+0x166>
 8001230:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001234:	454d      	cmp	r5, r9
 8001236:	f47f af72 	bne.w	800111e <HAL_GPIO_Init+0x4a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123a:	688a      	ldr	r2, [r1, #8]
 800123c:	b1e2      	cbz	r2, 8001278 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001240:	bf0c      	ite	eq
 8001242:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001246:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800124a:	2208      	movs	r2, #8
 800124c:	e767      	b.n	800111e <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 800124e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80012a8 <HAL_GPIO_Init+0x1d4>
 8001252:	454d      	cmp	r5, r9
 8001254:	d0f1      	beq.n	800123a <HAL_GPIO_Init+0x166>
 8001256:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800125a:	454d      	cmp	r5, r9
 800125c:	d0ed      	beq.n	800123a <HAL_GPIO_Init+0x166>
 800125e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8001262:	e7e7      	b.n	8001234 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001264:	2200      	movs	r2, #0
 8001266:	e75a      	b.n	800111e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001268:	68ca      	ldr	r2, [r1, #12]
          break;
 800126a:	e758      	b.n	800111e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126c:	68ca      	ldr	r2, [r1, #12]
 800126e:	3208      	adds	r2, #8
          break;
 8001270:	e755      	b.n	800111e <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001272:	68ca      	ldr	r2, [r1, #12]
 8001274:	320c      	adds	r2, #12
          break;
 8001276:	e752      	b.n	800111e <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001278:	2204      	movs	r2, #4
 800127a:	e750      	b.n	800111e <HAL_GPIO_Init+0x4a>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127c:	2500      	movs	r5, #0
 800127e:	e79f      	b.n	80011c0 <HAL_GPIO_Init+0xec>
 8001280:	2501      	movs	r5, #1
 8001282:	e79d      	b.n	80011c0 <HAL_GPIO_Init+0xec>
 8001284:	2502      	movs	r5, #2
 8001286:	e79b      	b.n	80011c0 <HAL_GPIO_Init+0xec>
 8001288:	2503      	movs	r5, #3
 800128a:	e799      	b.n	80011c0 <HAL_GPIO_Init+0xec>
 800128c:	2504      	movs	r5, #4
 800128e:	e797      	b.n	80011c0 <HAL_GPIO_Init+0xec>
 8001290:	40021000 	.word	0x40021000
 8001294:	40010400 	.word	0x40010400
 8001298:	40010800 	.word	0x40010800
 800129c:	40011c00 	.word	0x40011c00
 80012a0:	10210000 	.word	0x10210000
 80012a4:	10110000 	.word	0x10110000
 80012a8:	10310000 	.word	0x10310000

080012ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ac:	b10a      	cbz	r2, 80012b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ae:	6101      	str	r1, [r0, #16]
 80012b0:	4770      	bx	lr
 80012b2:	0409      	lsls	r1, r1, #16
 80012b4:	e7fb      	b.n	80012ae <HAL_GPIO_WritePin+0x2>
	...

080012b8 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b8:	6803      	ldr	r3, [r0, #0]
{
 80012ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	07db      	lsls	r3, r3, #31
{
 80012c0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	d410      	bmi.n	80012e6 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	079f      	lsls	r7, r3, #30
 80012c8:	d45e      	bmi.n	8001388 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	682b      	ldr	r3, [r5, #0]
 80012cc:	0719      	lsls	r1, r3, #28
 80012ce:	f100 8095 	bmi.w	80013fc <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d2:	682b      	ldr	r3, [r5, #0]
 80012d4:	075a      	lsls	r2, r3, #29
 80012d6:	f100 80bf 	bmi.w	8001458 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012da:	69ea      	ldr	r2, [r5, #28]
 80012dc:	2a00      	cmp	r2, #0
 80012de:	f040 812d 	bne.w	800153c <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80012e2:	2000      	movs	r0, #0
 80012e4:	e014      	b.n	8001310 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012e6:	4c90      	ldr	r4, [pc, #576]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 80012e8:	6863      	ldr	r3, [r4, #4]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f2:	6863      	ldr	r3, [r4, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d10c      	bne.n	8001316 <HAL_RCC_OscConfig+0x5e>
 80012fc:	6863      	ldr	r3, [r4, #4]
 80012fe:	03de      	lsls	r6, r3, #15
 8001300:	d509      	bpl.n	8001316 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	039c      	lsls	r4, r3, #14
 8001306:	d5dd      	bpl.n	80012c4 <HAL_RCC_OscConfig+0xc>
 8001308:	686b      	ldr	r3, [r5, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1da      	bne.n	80012c4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800130e:	2001      	movs	r0, #1
}
 8001310:	b002      	add	sp, #8
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001316:	686b      	ldr	r3, [r5, #4]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d110      	bne.n	8001340 <HAL_RCC_OscConfig+0x88>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001326:	f7ff fe73 	bl	8001010 <HAL_GetTick>
 800132a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	0398      	lsls	r0, r3, #14
 8001330:	d4c8      	bmi.n	80012c4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001332:	f7ff fe6d 	bl	8001010 <HAL_GetTick>
 8001336:	1b80      	subs	r0, r0, r6
 8001338:	2864      	cmp	r0, #100	; 0x64
 800133a:	d9f7      	bls.n	800132c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800133c:	2003      	movs	r0, #3
 800133e:	e7e7      	b.n	8001310 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	b99b      	cbnz	r3, 800136a <HAL_RCC_OscConfig+0xb2>
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001350:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001352:	f7ff fe5d 	bl	8001010 <HAL_GetTick>
 8001356:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	0399      	lsls	r1, r3, #14
 800135c:	d5b2      	bpl.n	80012c4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135e:	f7ff fe57 	bl	8001010 <HAL_GetTick>
 8001362:	1b80      	subs	r0, r0, r6
 8001364:	2864      	cmp	r0, #100	; 0x64
 8001366:	d9f7      	bls.n	8001358 <HAL_RCC_OscConfig+0xa0>
 8001368:	e7e8      	b.n	800133c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	d103      	bne.n	800137a <HAL_RCC_OscConfig+0xc2>
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	6023      	str	r3, [r4, #0]
 8001378:	e7d1      	b.n	800131e <HAL_RCC_OscConfig+0x66>
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	6023      	str	r3, [r4, #0]
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	e7cd      	b.n	8001324 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001388:	4c67      	ldr	r4, [pc, #412]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800138a:	6863      	ldr	r3, [r4, #4]
 800138c:	f013 0f0c 	tst.w	r3, #12
 8001390:	d007      	beq.n	80013a2 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001392:	6863      	ldr	r3, [r4, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d110      	bne.n	80013be <HAL_RCC_OscConfig+0x106>
 800139c:	6863      	ldr	r3, [r4, #4]
 800139e:	03da      	lsls	r2, r3, #15
 80013a0:	d40d      	bmi.n	80013be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	6823      	ldr	r3, [r4, #0]
 80013a4:	079b      	lsls	r3, r3, #30
 80013a6:	d502      	bpl.n	80013ae <HAL_RCC_OscConfig+0xf6>
 80013a8:	692b      	ldr	r3, [r5, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d1af      	bne.n	800130e <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	696a      	ldr	r2, [r5, #20]
 80013b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013ba:	6023      	str	r3, [r4, #0]
 80013bc:	e785      	b.n	80012ca <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013be:	692a      	ldr	r2, [r5, #16]
 80013c0:	4b5a      	ldr	r3, [pc, #360]	; (800152c <HAL_RCC_OscConfig+0x274>)
 80013c2:	b16a      	cbz	r2, 80013e0 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013c8:	f7ff fe22 	bl	8001010 <HAL_GetTick>
 80013cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	079f      	lsls	r7, r3, #30
 80013d2:	d4ec      	bmi.n	80013ae <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fe1c 	bl	8001010 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9f7      	bls.n	80013ce <HAL_RCC_OscConfig+0x116>
 80013de:	e7ad      	b.n	800133c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80013e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e2:	f7ff fe15 	bl	8001010 <HAL_GetTick>
 80013e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	0798      	lsls	r0, r3, #30
 80013ec:	f57f af6d 	bpl.w	80012ca <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fe0e 	bl	8001010 <HAL_GetTick>
 80013f4:	1b80      	subs	r0, r0, r6
 80013f6:	2802      	cmp	r0, #2
 80013f8:	d9f6      	bls.n	80013e8 <HAL_RCC_OscConfig+0x130>
 80013fa:	e79f      	b.n	800133c <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fc:	69aa      	ldr	r2, [r5, #24]
 80013fe:	4c4a      	ldr	r4, [pc, #296]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 8001400:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <HAL_RCC_OscConfig+0x278>)
 8001402:	b1da      	cbz	r2, 800143c <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001408:	f7ff fe02 	bl	8001010 <HAL_GetTick>
 800140c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001410:	079b      	lsls	r3, r3, #30
 8001412:	d50d      	bpl.n	8001430 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001414:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001418:	4b46      	ldr	r3, [pc, #280]	; (8001534 <HAL_RCC_OscConfig+0x27c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001420:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001422:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001424:	9b01      	ldr	r3, [sp, #4]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	9201      	str	r2, [sp, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_RCC_OscConfig+0x16a>
 800142e:	e750      	b.n	80012d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001430:	f7ff fdee 	bl	8001010 <HAL_GetTick>
 8001434:	1b80      	subs	r0, r0, r6
 8001436:	2802      	cmp	r0, #2
 8001438:	d9e9      	bls.n	800140e <HAL_RCC_OscConfig+0x156>
 800143a:	e77f      	b.n	800133c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800143c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800143e:	f7ff fde7 	bl	8001010 <HAL_GetTick>
 8001442:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001446:	079f      	lsls	r7, r3, #30
 8001448:	f57f af43 	bpl.w	80012d2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fde0 	bl	8001010 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	2802      	cmp	r0, #2
 8001454:	d9f6      	bls.n	8001444 <HAL_RCC_OscConfig+0x18c>
 8001456:	e771      	b.n	800133c <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4c33      	ldr	r4, [pc, #204]	; (8001528 <HAL_RCC_OscConfig+0x270>)
 800145a:	69e3      	ldr	r3, [r4, #28]
 800145c:	00d8      	lsls	r0, r3, #3
 800145e:	d424      	bmi.n	80014aa <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001460:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001462:	69e3      	ldr	r3, [r4, #28]
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	61e3      	str	r3, [r4, #28]
 800146a:	69e3      	ldr	r3, [r4, #28]
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4e30      	ldr	r6, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x280>)
 8001476:	6833      	ldr	r3, [r6, #0]
 8001478:	05d9      	lsls	r1, r3, #23
 800147a:	d518      	bpl.n	80014ae <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	68eb      	ldr	r3, [r5, #12]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d126      	bne.n	80014d0 <HAL_RCC_OscConfig+0x218>
 8001482:	6a23      	ldr	r3, [r4, #32]
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800148a:	f7ff fdc1 	bl	8001010 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001492:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001494:	6a23      	ldr	r3, [r4, #32]
 8001496:	079b      	lsls	r3, r3, #30
 8001498:	d53f      	bpl.n	800151a <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800149a:	2f00      	cmp	r7, #0
 800149c:	f43f af1d 	beq.w	80012da <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	69e3      	ldr	r3, [r4, #28]
 80014a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a6:	61e3      	str	r3, [r4, #28]
 80014a8:	e717      	b.n	80012da <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2700      	movs	r7, #0
 80014ac:	e7e2      	b.n	8001474 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ae:	6833      	ldr	r3, [r6, #0]
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80014b6:	f7ff fdab 	bl	8001010 <HAL_GetTick>
 80014ba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	6833      	ldr	r3, [r6, #0]
 80014be:	05da      	lsls	r2, r3, #23
 80014c0:	d4dc      	bmi.n	800147c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fda5 	bl	8001010 <HAL_GetTick>
 80014c6:	eba0 0008 	sub.w	r0, r0, r8
 80014ca:	2864      	cmp	r0, #100	; 0x64
 80014cc:	d9f6      	bls.n	80014bc <HAL_RCC_OscConfig+0x204>
 80014ce:	e735      	b.n	800133c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	b9ab      	cbnz	r3, 80014fe <HAL_RCC_OscConfig+0x246>
 80014d2:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014d4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	6223      	str	r3, [r4, #32]
 80014de:	6a23      	ldr	r3, [r4, #32]
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80014e6:	f7ff fd93 	bl	8001010 <HAL_GetTick>
 80014ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ec:	6a23      	ldr	r3, [r4, #32]
 80014ee:	0798      	lsls	r0, r3, #30
 80014f0:	d5d3      	bpl.n	800149a <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fd8d 	bl	8001010 <HAL_GetTick>
 80014f6:	1b80      	subs	r0, r0, r6
 80014f8:	4540      	cmp	r0, r8
 80014fa:	d9f7      	bls.n	80014ec <HAL_RCC_OscConfig+0x234>
 80014fc:	e71e      	b.n	800133c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	2b05      	cmp	r3, #5
 8001500:	6a23      	ldr	r3, [r4, #32]
 8001502:	d103      	bne.n	800150c <HAL_RCC_OscConfig+0x254>
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6223      	str	r3, [r4, #32]
 800150a:	e7ba      	b.n	8001482 <HAL_RCC_OscConfig+0x1ca>
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6223      	str	r3, [r4, #32]
 8001512:	6a23      	ldr	r3, [r4, #32]
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	e7b6      	b.n	8001488 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f7ff fd79 	bl	8001010 <HAL_GetTick>
 800151e:	eba0 0008 	sub.w	r0, r0, r8
 8001522:	42b0      	cmp	r0, r6
 8001524:	d9b6      	bls.n	8001494 <HAL_RCC_OscConfig+0x1dc>
 8001526:	e709      	b.n	800133c <HAL_RCC_OscConfig+0x84>
 8001528:	40021000 	.word	0x40021000
 800152c:	42420000 	.word	0x42420000
 8001530:	42420480 	.word	0x42420480
 8001534:	20000008 	.word	0x20000008
 8001538:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800153c:	4c22      	ldr	r4, [pc, #136]	; (80015c8 <HAL_RCC_OscConfig+0x310>)
 800153e:	6863      	ldr	r3, [r4, #4]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b08      	cmp	r3, #8
 8001546:	f43f aee2 	beq.w	800130e <HAL_RCC_OscConfig+0x56>
 800154a:	2300      	movs	r3, #0
 800154c:	4e1f      	ldr	r6, [pc, #124]	; (80015cc <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800154e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001550:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	d12b      	bne.n	80015ac <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001554:	f7ff fd5c 	bl	8001010 <HAL_GetTick>
 8001558:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	0199      	lsls	r1, r3, #6
 800155e:	d41f      	bmi.n	80015a0 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001560:	6a2b      	ldr	r3, [r5, #32]
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001568:	6862      	ldr	r2, [r4, #4]
 800156a:	68a9      	ldr	r1, [r5, #8]
 800156c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001570:	430a      	orrs	r2, r1
 8001572:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001574:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001576:	6862      	ldr	r2, [r4, #4]
 8001578:	430b      	orrs	r3, r1
 800157a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800157e:	4313      	orrs	r3, r2
 8001580:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001582:	2301      	movs	r3, #1
 8001584:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001586:	f7ff fd43 	bl	8001010 <HAL_GetTick>
 800158a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	019a      	lsls	r2, r3, #6
 8001590:	f53f aea7 	bmi.w	80012e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fd3c 	bl	8001010 <HAL_GetTick>
 8001598:	1b40      	subs	r0, r0, r5
 800159a:	2802      	cmp	r0, #2
 800159c:	d9f6      	bls.n	800158c <HAL_RCC_OscConfig+0x2d4>
 800159e:	e6cd      	b.n	800133c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fd36 	bl	8001010 <HAL_GetTick>
 80015a4:	1bc0      	subs	r0, r0, r7
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9d7      	bls.n	800155a <HAL_RCC_OscConfig+0x2a2>
 80015aa:	e6c7      	b.n	800133c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80015ac:	f7ff fd30 	bl	8001010 <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	f57f ae94 	bpl.w	80012e2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fd29 	bl	8001010 <HAL_GetTick>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	2802      	cmp	r0, #2
 80015c2:	d9f6      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2fa>
 80015c4:	e6ba      	b.n	800133c <HAL_RCC_OscConfig+0x84>
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	42420060 	.word	0x42420060

080015d0 <HAL_RCC_GetSysClockFreq>:
{
 80015d0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80015d4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015d6:	ac02      	add	r4, sp, #8
 80015d8:	f103 0510 	add.w	r5, r3, #16
 80015dc:	4622      	mov	r2, r4
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	3308      	adds	r3, #8
 80015e4:	c203      	stmia	r2!, {r0, r1}
 80015e6:	42ab      	cmp	r3, r5
 80015e8:	4614      	mov	r4, r2
 80015ea:	d1f7      	bne.n	80015dc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015ec:	2301      	movs	r3, #1
 80015ee:	f88d 3004 	strb.w	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80015f4:	4911      	ldr	r1, [pc, #68]	; (800163c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015f6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80015fa:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80015fc:	f003 020c 	and.w	r2, r3, #12
 8001600:	2a08      	cmp	r2, #8
 8001602:	d117      	bne.n	8001634 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001604:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001608:	a806      	add	r0, sp, #24
 800160a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800160c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001612:	d50c      	bpl.n	800162e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001614:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001616:	480a      	ldr	r0, [pc, #40]	; (8001640 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001618:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800161c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161e:	aa06      	add	r2, sp, #24
 8001620:	4413      	add	r3, r2
 8001622:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001626:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800162a:	b007      	add	sp, #28
 800162c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_RCC_GetSysClockFreq+0x74>)
 8001630:	4350      	muls	r0, r2
 8001632:	e7fa      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001636:	e7f8      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x5a>
 8001638:	08003774 	.word	0x08003774
 800163c:	40021000 	.word	0x40021000
 8001640:	007a1200 	.word	0x007a1200
 8001644:	003d0900 	.word	0x003d0900

08001648 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_RCC_ClockConfig+0x154>)
{
 800164a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800164e:	6813      	ldr	r3, [r2, #0]
{
 8001650:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	428b      	cmp	r3, r1
{
 8001658:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800165a:	d32a      	bcc.n	80016b2 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	6829      	ldr	r1, [r5, #0]
 800165e:	078c      	lsls	r4, r1, #30
 8001660:	d434      	bmi.n	80016cc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001662:	07ca      	lsls	r2, r1, #31
 8001664:	d447      	bmi.n	80016f6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001666:	4a4d      	ldr	r2, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x154>)
 8001668:	6813      	ldr	r3, [r2, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	429e      	cmp	r6, r3
 8001670:	f0c0 8082 	bcc.w	8001778 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001674:	682a      	ldr	r2, [r5, #0]
 8001676:	4c4a      	ldr	r4, [pc, #296]	; (80017a0 <HAL_RCC_ClockConfig+0x158>)
 8001678:	f012 0f04 	tst.w	r2, #4
 800167c:	f040 8087 	bne.w	800178e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001680:	0713      	lsls	r3, r2, #28
 8001682:	d506      	bpl.n	8001692 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001684:	6863      	ldr	r3, [r4, #4]
 8001686:	692a      	ldr	r2, [r5, #16]
 8001688:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800168c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001690:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001692:	f7ff ff9d 	bl	80015d0 <HAL_RCC_GetSysClockFreq>
 8001696:	6863      	ldr	r3, [r4, #4]
 8001698:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <HAL_RCC_ClockConfig+0x15c>)
 800169a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800169e:	5cd3      	ldrb	r3, [r2, r3]
 80016a0:	40d8      	lsrs	r0, r3
 80016a2:	4b41      	ldr	r3, [pc, #260]	; (80017a8 <HAL_RCC_ClockConfig+0x160>)
 80016a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fc70 	bl	8000f8c <HAL_InitTick>
  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
}
 80016ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	f023 0307 	bic.w	r3, r3, #7
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d0ca      	beq.n	800165c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80016c6:	2001      	movs	r0, #1
 80016c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016cc:	4b34      	ldr	r3, [pc, #208]	; (80017a0 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ce:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d2:	bf1e      	ittt	ne
 80016d4:	685a      	ldrne	r2, [r3, #4]
 80016d6:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80016da:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016de:	bf42      	ittt	mi
 80016e0:	685a      	ldrmi	r2, [r3, #4]
 80016e2:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80016e6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	68a8      	ldr	r0, [r5, #8]
 80016ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016f0:	4302      	orrs	r2, r0
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	e7b5      	b.n	8001662 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f6:	686a      	ldr	r2, [r5, #4]
 80016f8:	4c29      	ldr	r4, [pc, #164]	; (80017a0 <HAL_RCC_ClockConfig+0x158>)
 80016fa:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fc:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fe:	d11c      	bne.n	800173a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001700:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001704:	d0df      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001708:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170c:	f023 0303 	bic.w	r3, r3, #3
 8001710:	4313      	orrs	r3, r2
 8001712:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001714:	f7ff fc7c 	bl	8001010 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800171a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171c:	2b01      	cmp	r3, #1
 800171e:	d114      	bne.n	800174a <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b04      	cmp	r3, #4
 8001728:	d09d      	beq.n	8001666 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172a:	f7ff fc71 	bl	8001010 <HAL_GetTick>
 800172e:	1bc0      	subs	r0, r0, r7
 8001730:	4540      	cmp	r0, r8
 8001732:	d9f5      	bls.n	8001720 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001734:	2003      	movs	r0, #3
 8001736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173a:	2a02      	cmp	r2, #2
 800173c:	d102      	bne.n	8001744 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001742:	e7df      	b.n	8001704 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	f013 0f02 	tst.w	r3, #2
 8001748:	e7dc      	b.n	8001704 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174a:	2b02      	cmp	r3, #2
 800174c:	d10f      	bne.n	800176e <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174e:	6863      	ldr	r3, [r4, #4]
 8001750:	f003 030c 	and.w	r3, r3, #12
 8001754:	2b08      	cmp	r3, #8
 8001756:	d086      	beq.n	8001666 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001758:	f7ff fc5a 	bl	8001010 <HAL_GetTick>
 800175c:	1bc0      	subs	r0, r0, r7
 800175e:	4540      	cmp	r0, r8
 8001760:	d9f5      	bls.n	800174e <HAL_RCC_ClockConfig+0x106>
 8001762:	e7e7      	b.n	8001734 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001764:	f7ff fc54 	bl	8001010 <HAL_GetTick>
 8001768:	1bc0      	subs	r0, r0, r7
 800176a:	4540      	cmp	r0, r8
 800176c:	d8e2      	bhi.n	8001734 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	f013 0f0c 	tst.w	r3, #12
 8001774:	d1f6      	bne.n	8001764 <HAL_RCC_ClockConfig+0x11c>
 8001776:	e776      	b.n	8001666 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001778:	6813      	ldr	r3, [r2, #0]
 800177a:	f023 0307 	bic.w	r3, r3, #7
 800177e:	4333      	orrs	r3, r6
 8001780:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	429e      	cmp	r6, r3
 800178a:	d19c      	bne.n	80016c6 <HAL_RCC_ClockConfig+0x7e>
 800178c:	e772      	b.n	8001674 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	68e9      	ldr	r1, [r5, #12]
 8001792:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001796:	430b      	orrs	r3, r1
 8001798:	6063      	str	r3, [r4, #4]
 800179a:	e771      	b.n	8001680 <HAL_RCC_ClockConfig+0x38>
 800179c:	40022000 	.word	0x40022000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	080037df 	.word	0x080037df
 80017a8:	20000008 	.word	0x20000008

080017ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017b6:	5cd3      	ldrb	r3, [r2, r3]
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80017ba:	6810      	ldr	r0, [r2, #0]
}    
 80017bc:	40d8      	lsrs	r0, r3
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	080037ef 	.word	0x080037ef
 80017c8:	20000008 	.word	0x20000008

080017cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	4a03      	ldr	r2, [pc, #12]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80017da:	6810      	ldr	r0, [r2, #0]
} 
 80017dc:	40d8      	lsrs	r0, r3
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	080037ef 	.word	0x080037ef
 80017e8:	20000008 	.word	0x20000008

080017ec <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f0:	4604      	mov	r4, r0
 80017f2:	4688      	mov	r8, r1
 80017f4:	4617      	mov	r7, r2
 80017f6:	461d      	mov	r5, r3
 80017f8:	9e06      	ldr	r6, [sp, #24]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80017fa:	6822      	ldr	r2, [r4, #0]
 80017fc:	6893      	ldr	r3, [r2, #8]
 80017fe:	ea38 0303 	bics.w	r3, r8, r3
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	429f      	cmp	r7, r3
 800180a:	d102      	bne.n	8001812 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800180c:	2000      	movs	r0, #0
}
 800180e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001812:	1c6b      	adds	r3, r5, #1
 8001814:	d0f2      	beq.n	80017fc <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001816:	bb55      	cbnz	r5, 800186e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001820:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001822:	6862      	ldr	r2, [r4, #4]
 8001824:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001828:	d10a      	bne.n	8001840 <SPI_WaitFlagStateUntilTimeout+0x54>
 800182a:	68a2      	ldr	r2, [r4, #8]
 800182c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001830:	d002      	beq.n	8001838 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001832:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001836:	d103      	bne.n	8001840 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183e:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001840:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001842:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001846:	d109      	bne.n	800185c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800184e:	0412      	lsls	r2, r2, #16
 8001850:	0c12      	lsrs	r2, r2, #16
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800185a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 800185c:	2301      	movs	r3, #1
 800185e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001862:	2300      	movs	r3, #0
 8001864:	2003      	movs	r0, #3
 8001866:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800186e:	f7ff fbcf 	bl	8001010 <HAL_GetTick>
 8001872:	1b80      	subs	r0, r0, r6
 8001874:	4285      	cmp	r5, r0
 8001876:	d8c0      	bhi.n	80017fa <SPI_WaitFlagStateUntilTimeout+0xe>
 8001878:	e7ce      	b.n	8001818 <SPI_WaitFlagStateUntilTimeout+0x2c>

0800187a <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800187a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800187c:	460b      	mov	r3, r1
 800187e:	9200      	str	r2, [sp, #0]
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	2200      	movs	r2, #0
{
 8001884:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001886:	f7ff ffb1 	bl	80017ec <SPI_WaitFlagStateUntilTimeout>
 800188a:	b120      	cbz	r0, 8001896 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800188c:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800188e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001896:	b002      	add	sp, #8
 8001898:	bd10      	pop	{r4, pc}

0800189a <HAL_SPI_TransmitReceive>:
{
 800189a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800189e:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80018a0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80018a4:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80018a6:	2b01      	cmp	r3, #1
{
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	4616      	mov	r6, r2
 80018ae:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80018b0:	f000 80ee 	beq.w	8001a90 <HAL_SPI_TransmitReceive+0x1f6>
 80018b4:	2301      	movs	r3, #1
 80018b6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80018ba:	f7ff fba9 	bl	8001010 <HAL_GetTick>
  tmp  = hspi->State;
 80018be:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80018c2:	4680      	mov	r8, r0
  tmp  = hspi->State;
 80018c4:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80018c6:	2b01      	cmp	r3, #1
  tmp1 = hspi->Init.Mode;
 80018c8:	6861      	ldr	r1, [r4, #4]
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80018ca:	d00a      	beq.n	80018e2 <HAL_SPI_TransmitReceive+0x48>
 80018cc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80018d0:	f040 80dc 	bne.w	8001a8c <HAL_SPI_TransmitReceive+0x1f2>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80018d4:	68a2      	ldr	r2, [r4, #8]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	f040 80d8 	bne.w	8001a8c <HAL_SPI_TransmitReceive+0x1f2>
 80018dc:	2b04      	cmp	r3, #4
 80018de:	f040 80d5 	bne.w	8001a8c <HAL_SPI_TransmitReceive+0x1f2>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	d04e      	beq.n	8001984 <HAL_SPI_TransmitReceive+0xea>
 80018e6:	2e00      	cmp	r6, #0
 80018e8:	d04c      	beq.n	8001984 <HAL_SPI_TransmitReceive+0xea>
 80018ea:	f1b9 0f00 	cmp.w	r9, #0
 80018ee:	d049      	beq.n	8001984 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 80018f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80018f4:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 80018f6:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80018f8:	bf04      	itt	eq
 80018fa:	2305      	moveq	r3, #5
 80018fc:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001904:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001906:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001908:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800190a:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800190e:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001912:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001914:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001918:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800191a:	bf58      	it	pl
 800191c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800191e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001920:	bf58      	it	pl
 8001922:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001926:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800192a:	bf58      	it	pl
 800192c:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800192e:	68e2      	ldr	r2, [r4, #12]
 8001930:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001934:	d15d      	bne.n	80019f2 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001936:	b119      	cbz	r1, 8001940 <HAL_SPI_TransmitReceive+0xa6>
 8001938:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800193a:	b292      	uxth	r2, r2
 800193c:	2a01      	cmp	r2, #1
 800193e:	d106      	bne.n	800194e <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001940:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001944:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001946:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001948:	3b01      	subs	r3, #1
 800194a:	b29b      	uxth	r3, r3
 800194c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800194e:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001952:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001954:	b29b      	uxth	r3, r3
 8001956:	b9bb      	cbnz	r3, 8001988 <HAL_SPI_TransmitReceive+0xee>
 8001958:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800195a:	b29b      	uxth	r3, r3
 800195c:	b9a3      	cbnz	r3, 8001988 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800195e:	f8cd 8000 	str.w	r8, [sp]
 8001962:	463b      	mov	r3, r7
 8001964:	2201      	movs	r2, #1
 8001966:	2102      	movs	r1, #2
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff ff3f 	bl	80017ec <SPI_WaitFlagStateUntilTimeout>
 800196e:	2800      	cmp	r0, #0
 8001970:	d135      	bne.n	80019de <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001972:	4642      	mov	r2, r8
 8001974:	4639      	mov	r1, r7
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff ff7f 	bl	800187a <SPI_CheckFlag_BSY>
 800197c:	2800      	cmp	r0, #0
 800197e:	d07a      	beq.n	8001a76 <HAL_SPI_TransmitReceive+0x1dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001980:	2320      	movs	r3, #32
 8001982:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e02b      	b.n	80019e0 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001988:	f1b9 0f00 	cmp.w	r9, #0
 800198c:	d00f      	beq.n	80019ae <HAL_SPI_TransmitReceive+0x114>
 800198e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001990:	b29b      	uxth	r3, r3
 8001992:	b163      	cbz	r3, 80019ae <HAL_SPI_TransmitReceive+0x114>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	0791      	lsls	r1, r2, #30
 800199a:	d508      	bpl.n	80019ae <HAL_SPI_TransmitReceive+0x114>
        txallowed = 0U;
 800199c:	f04f 0900 	mov.w	r9, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80019a0:	f835 2b02 	ldrh.w	r2, [r5], #2
 80019a4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80019a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80019ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	b163      	cbz	r3, 80019ce <HAL_SPI_TransmitReceive+0x134>
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	07d2      	lsls	r2, r2, #31
 80019ba:	d508      	bpl.n	80019ce <HAL_SPI_TransmitReceive+0x134>
        txallowed = 1U;
 80019bc:	f04f 0901 	mov.w	r9, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 80019c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80019ce:	1c78      	adds	r0, r7, #1
 80019d0:	d0bf      	beq.n	8001952 <HAL_SPI_TransmitReceive+0xb8>
 80019d2:	f7ff fb1d 	bl	8001010 <HAL_GetTick>
 80019d6:	eba0 0008 	sub.w	r0, r0, r8
 80019da:	4287      	cmp	r7, r0
 80019dc:	d8b9      	bhi.n	8001952 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 80019de:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80019e6:	2300      	movs	r3, #0
 80019e8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80019ec:	b005      	add	sp, #20
 80019ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80019f2:	b119      	cbz	r1, 80019fc <HAL_SPI_TransmitReceive+0x162>
 80019f4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80019f6:	b292      	uxth	r2, r2
 80019f8:	2a01      	cmp	r2, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80019fc:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001a00:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001a02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001a0a:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b91b      	cbnz	r3, 8001a1c <HAL_SPI_TransmitReceive+0x182>
 8001a14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0a0      	beq.n	800195e <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001a1c:	f1b9 0f00 	cmp.w	r9, #0
 8001a20:	d00f      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0x1a8>
 8001a22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	b163      	cbz	r3, 8001a42 <HAL_SPI_TransmitReceive+0x1a8>
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	0791      	lsls	r1, r2, #30
 8001a2e:	d508      	bpl.n	8001a42 <HAL_SPI_TransmitReceive+0x1a8>
        txallowed = 0U;
 8001a30:	f04f 0900 	mov.w	r9, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001a34:	782a      	ldrb	r2, [r5, #0]
 8001a36:	3501      	adds	r5, #1
 8001a38:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001a3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001a42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b16b      	cbz	r3, 8001a64 <HAL_SPI_TransmitReceive+0x1ca>
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	07d2      	lsls	r2, r2, #31
 8001a4e:	d509      	bpl.n	8001a64 <HAL_SPI_TransmitReceive+0x1ca>
        txallowed = 1U;
 8001a50:	f04f 0901 	mov.w	r9, #1
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	3601      	adds	r6, #1
 8001a58:	f806 3c01 	strb.w	r3, [r6, #-1]
        hspi->RxXferCount--;
 8001a5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001a64:	1c7b      	adds	r3, r7, #1
 8001a66:	d0d2      	beq.n	8001a0e <HAL_SPI_TransmitReceive+0x174>
 8001a68:	f7ff fad2 	bl	8001010 <HAL_GetTick>
 8001a6c:	eba0 0008 	sub.w	r0, r0, r8
 8001a70:	4287      	cmp	r7, r0
 8001a72:	d8cc      	bhi.n	8001a0e <HAL_SPI_TransmitReceive+0x174>
 8001a74:	e7b3      	b.n	80019de <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a76:	68a3      	ldr	r3, [r4, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1b1      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	9003      	str	r0, [sp, #12]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	9203      	str	r2, [sp, #12]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	9303      	str	r3, [sp, #12]
 8001a88:	9b03      	ldr	r3, [sp, #12]
 8001a8a:	e7a9      	b.n	80019e0 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	e7a7      	b.n	80019e0 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001a90:	2002      	movs	r0, #2
 8001a92:	e7ab      	b.n	80019ec <HAL_SPI_TransmitReceive+0x152>

08001a94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a94:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001a96:	4604      	mov	r4, r0
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d034      	beq.n	8001b06 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001aa0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001aa4:	b90b      	cbnz	r3, 8001aaa <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001aa6:	f000 faf5 	bl	8002094 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001aaa:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001aac:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001aae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ab2:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ab4:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aba:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001abc:	6863      	ldr	r3, [r4, #4]
 8001abe:	69a2      	ldr	r2, [r4, #24]
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	68e0      	ldr	r0, [r4, #12]
 8001ac4:	4303      	orrs	r3, r0
 8001ac6:	6920      	ldr	r0, [r4, #16]
 8001ac8:	4303      	orrs	r3, r0
 8001aca:	6960      	ldr	r0, [r4, #20]
 8001acc:	4303      	orrs	r3, r0
 8001ace:	69e0      	ldr	r0, [r4, #28]
 8001ad0:	4303      	orrs	r3, r0
 8001ad2:	6a20      	ldr	r0, [r4, #32]
 8001ad4:	4303      	orrs	r3, r0
 8001ad6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ad8:	4303      	orrs	r3, r0
 8001ada:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001ade:	4303      	orrs	r3, r0
 8001ae0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ae2:	0c12      	lsrs	r2, r2, #16
 8001ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ae6:	f002 0204 	and.w	r2, r2, #4
 8001aea:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001aee:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001af0:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001af2:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001afa:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001afc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001afe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001b00:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001b04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
}
 8001b08:	bd10      	pop	{r4, pc}
	...

08001b0c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b10:	6805      	ldr	r5, [r0, #0]
 8001b12:	68c2      	ldr	r2, [r0, #12]
 8001b14:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b16:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b20:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001b22:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001b28:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001b2c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b30:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b36:	696b      	ldr	r3, [r5, #20]
 8001b38:	6982      	ldr	r2, [r0, #24]
 8001b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <UART_SetConfig+0x138>)
{
 8001b44:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001b46:	429d      	cmp	r5, r3
 8001b48:	f04f 0419 	mov.w	r4, #25
 8001b4c:	d146      	bne.n	8001bdc <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b4e:	f7ff fe3d 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 8001b52:	fb04 f300 	mul.w	r3, r4, r0
 8001b56:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001b5a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b5e:	00b6      	lsls	r6, r6, #2
 8001b60:	fbb3 f3f6 	udiv	r3, r3, r6
 8001b64:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b68:	011e      	lsls	r6, r3, #4
 8001b6a:	f7ff fe2f 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 8001b6e:	4360      	muls	r0, r4
 8001b70:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fbb0 f7f3 	udiv	r7, r0, r3
 8001b7a:	f7ff fe27 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 8001b7e:	4360      	muls	r0, r4
 8001b80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b8e:	fb08 7313 	mls	r3, r8, r3, r7
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	3332      	adds	r3, #50	; 0x32
 8001b96:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b9a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001b9e:	f7ff fe15 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 8001ba2:	4360      	muls	r0, r4
 8001ba4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	fbb0 faf2 	udiv	sl, r0, r2
 8001bae:	f7ff fe0d 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bb2:	4360      	muls	r0, r4
 8001bb4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bc2:	fb08 a313 	mls	r3, r8, r3, sl
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	3332      	adds	r3, #50	; 0x32
 8001bca:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	433b      	orrs	r3, r7
 8001bd4:	4433      	add	r3, r6
 8001bd6:	60ab      	str	r3, [r5, #8]
 8001bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bdc:	f7ff fde6 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8001be0:	fb04 f300 	mul.w	r3, r4, r0
 8001be4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001be8:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001bec:	00b6      	lsls	r6, r6, #2
 8001bee:	fbb3 f3f6 	udiv	r3, r3, r6
 8001bf2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bf6:	011e      	lsls	r6, r3, #4
 8001bf8:	f7ff fdd8 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8001bfc:	4360      	muls	r0, r4
 8001bfe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fbb0 f7f3 	udiv	r7, r0, r3
 8001c08:	f7ff fdd0 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8001c0c:	4360      	muls	r0, r4
 8001c0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c18:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c1c:	fb08 7313 	mls	r3, r8, r3, r7
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	3332      	adds	r3, #50	; 0x32
 8001c24:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c28:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001c2c:	f7ff fdbe 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8001c30:	4360      	muls	r0, r4
 8001c32:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001c36:	0092      	lsls	r2, r2, #2
 8001c38:	fbb0 faf2 	udiv	sl, r0, r2
 8001c3c:	f7ff fdb6 	bl	80017ac <HAL_RCC_GetPCLK1Freq>
 8001c40:	e7b7      	b.n	8001bb2 <UART_SetConfig+0xa6>
 8001c42:	bf00      	nop
 8001c44:	40013800 	.word	0x40013800

08001c48 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	460e      	mov	r6, r1
 8001c4e:	4617      	mov	r7, r2
 8001c50:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001c52:	6821      	ldr	r1, [r4, #0]
 8001c54:	680b      	ldr	r3, [r1, #0]
 8001c56:	ea36 0303 	bics.w	r3, r6, r3
 8001c5a:	d101      	bne.n	8001c60 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
}
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001c60:	1c6b      	adds	r3, r5, #1
 8001c62:	d0f7      	beq.n	8001c54 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c64:	b995      	cbnz	r5, 8001c8c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c66:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001c68:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c72:	695a      	ldr	r2, [r3, #20]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001c80:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001c84:	2300      	movs	r3, #0
 8001c86:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001c8c:	f7ff f9c0 	bl	8001010 <HAL_GetTick>
 8001c90:	1bc0      	subs	r0, r0, r7
 8001c92:	4285      	cmp	r5, r0
 8001c94:	d2dd      	bcs.n	8001c52 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001c96:	e7e6      	b.n	8001c66 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001c98 <HAL_UART_Init>:
{
 8001c98:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	b340      	cbz	r0, 8001cf0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ca2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ca6:	b91b      	cbnz	r3, 8001cb0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ca8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001cac:	f000 fd50 	bl	8002750 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001cb0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001cb2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001cb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001cb8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cc0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001cc2:	f7ff ff23 	bl	8001b0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cc6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cc8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cd8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ce0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001ce2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ce6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001cee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cf0:	2001      	movs	r0, #1
}
 8001cf2:	bd10      	pop	{r4, pc}

08001cf4 <HAL_UART_Transmit>:
{
 8001cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cf8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001cfa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001cfe:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8001d00:	2b20      	cmp	r3, #32
{
 8001d02:	460d      	mov	r5, r1
 8001d04:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001d06:	d14e      	bne.n	8001da6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8001d08:	2900      	cmp	r1, #0
 8001d0a:	d049      	beq.n	8001da0 <HAL_UART_Transmit+0xac>
 8001d0c:	2a00      	cmp	r2, #0
 8001d0e:	d047      	beq.n	8001da0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001d10:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d046      	beq.n	8001da6 <HAL_UART_Transmit+0xb2>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d22:	2321      	movs	r3, #33	; 0x21
 8001d24:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001d28:	f7ff f972 	bl	8001010 <HAL_GetTick>
 8001d2c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8001d2e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d32:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d36:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b96b      	cbnz	r3, 8001d58 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d3c:	463b      	mov	r3, r7
 8001d3e:	4632      	mov	r2, r6
 8001d40:	2140      	movs	r1, #64	; 0x40
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff ff80 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d48:	b9a8      	cbnz	r0, 8001d76 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8001d4a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8001d4c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8001d50:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001d58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d5a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d62:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d64:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d6e:	d10e      	bne.n	8001d8e <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d70:	f7ff ff6a 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d74:	b110      	cbz	r0, 8001d7c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
 8001d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d7c:	882b      	ldrh	r3, [r5, #0]
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d84:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d86:	6923      	ldr	r3, [r4, #16]
 8001d88:	b943      	cbnz	r3, 8001d9c <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001d8a:	3502      	adds	r5, #2
 8001d8c:	e7d3      	b.n	8001d36 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8e:	f7ff ff5b 	bl	8001c48 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001d92:	2800      	cmp	r0, #0
 8001d94:	d1ef      	bne.n	8001d76 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	782a      	ldrb	r2, [r5, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	3501      	adds	r5, #1
 8001d9e:	e7ca      	b.n	8001d36 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001da6:	2002      	movs	r0, #2
}
 8001da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001dac <Delay_us>:

void Delay_us(unsigned int time_us)			/* time delay for us in 72MHz */
{
    register unsigned int i;

    for (i = 0; i < time_us; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	4283      	cmp	r3, r0
 8001db0:	d100      	bne.n	8001db4 <Delay_us+0x8>
        asm("NOP");
        asm("NOP");
        asm("NOP");				// 65
        asm("NOP");
    }
}
 8001db2:	4770      	bx	lr
        asm("NOP");
 8001db4:	bf00      	nop
        asm("NOP");
 8001db6:	bf00      	nop
        asm("NOP");
 8001db8:	bf00      	nop
        asm("NOP");
 8001dba:	bf00      	nop
        asm("NOP");				// 5
 8001dbc:	bf00      	nop
        asm("NOP");
 8001dbe:	bf00      	nop
        asm("NOP");
 8001dc0:	bf00      	nop
        asm("NOP");
 8001dc2:	bf00      	nop
        asm("NOP");
 8001dc4:	bf00      	nop
        asm("NOP");				// 10
 8001dc6:	bf00      	nop
        asm("NOP");
 8001dc8:	bf00      	nop
        asm("NOP");
 8001dca:	bf00      	nop
        asm("NOP");
 8001dcc:	bf00      	nop
        asm("NOP");
 8001dce:	bf00      	nop
        asm("NOP");				// 15
 8001dd0:	bf00      	nop
        asm("NOP");
 8001dd2:	bf00      	nop
        asm("NOP");
 8001dd4:	bf00      	nop
        asm("NOP");
 8001dd6:	bf00      	nop
        asm("NOP");
 8001dd8:	bf00      	nop
        asm("NOP");				// 20
 8001dda:	bf00      	nop
        asm("NOP");
 8001ddc:	bf00      	nop
        asm("NOP");
 8001dde:	bf00      	nop
        asm("NOP");
 8001de0:	bf00      	nop
        asm("NOP");
 8001de2:	bf00      	nop
        asm("NOP");				// 25
 8001de4:	bf00      	nop
        asm("NOP");
 8001de6:	bf00      	nop
        asm("NOP");
 8001de8:	bf00      	nop
        asm("NOP");
 8001dea:	bf00      	nop
        asm("NOP");
 8001dec:	bf00      	nop
        asm("NOP");				// 30
 8001dee:	bf00      	nop
        asm("NOP");
 8001df0:	bf00      	nop
        asm("NOP");
 8001df2:	bf00      	nop
        asm("NOP");
 8001df4:	bf00      	nop
        asm("NOP");
 8001df6:	bf00      	nop
        asm("NOP");				// 35
 8001df8:	bf00      	nop
        asm("NOP");
 8001dfa:	bf00      	nop
        asm("NOP");
 8001dfc:	bf00      	nop
        asm("NOP");
 8001dfe:	bf00      	nop
        asm("NOP");
 8001e00:	bf00      	nop
        asm("NOP");				// 40
 8001e02:	bf00      	nop
        asm("NOP");
 8001e04:	bf00      	nop
        asm("NOP");
 8001e06:	bf00      	nop
        asm("NOP");
 8001e08:	bf00      	nop
        asm("NOP");
 8001e0a:	bf00      	nop
        asm("NOP");				// 45
 8001e0c:	bf00      	nop
        asm("NOP");
 8001e0e:	bf00      	nop
        asm("NOP");
 8001e10:	bf00      	nop
        asm("NOP");
 8001e12:	bf00      	nop
        asm("NOP");
 8001e14:	bf00      	nop
        asm("NOP");				// 50
 8001e16:	bf00      	nop
        asm("NOP");
 8001e18:	bf00      	nop
        asm("NOP");
 8001e1a:	bf00      	nop
        asm("NOP");
 8001e1c:	bf00      	nop
        asm("NOP");
 8001e1e:	bf00      	nop
        asm("NOP");				// 55
 8001e20:	bf00      	nop
        asm("NOP");
 8001e22:	bf00      	nop
        asm("NOP");
 8001e24:	bf00      	nop
        asm("NOP");
 8001e26:	bf00      	nop
        asm("NOP");
 8001e28:	bf00      	nop
        asm("NOP");				// 60
 8001e2a:	bf00      	nop
        asm("NOP");
 8001e2c:	bf00      	nop
        asm("NOP");
 8001e2e:	bf00      	nop
        asm("NOP");
 8001e30:	bf00      	nop
        asm("NOP");
 8001e32:	bf00      	nop
        asm("NOP");				// 65
 8001e34:	bf00      	nop
        asm("NOP");
 8001e36:	bf00      	nop
    for (i = 0; i < time_us; i++)
 8001e38:	3301      	adds	r3, #1
 8001e3a:	e7b8      	b.n	8001dae <Delay_us+0x2>

08001e3c <Delay_ms>:

void Delay_ms(unsigned int time_ms)			/* time delay for ms in 72MHz */
{
 8001e3c:	4601      	mov	r1, r0
    register unsigned int i;

    for (i = 0; i < time_ms; i++)
 8001e3e:	2200      	movs	r2, #0
{
 8001e40:	b508      	push	{r3, lr}
    for (i = 0; i < time_ms; i++)
 8001e42:	428a      	cmp	r2, r1
 8001e44:	d100      	bne.n	8001e48 <Delay_ms+0xc>
    {
        Delay_us(1000);
    }
}
 8001e46:	bd08      	pop	{r3, pc}
        Delay_us(1000);
 8001e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e4c:	f7ff ffae 	bl	8001dac <Delay_us>
    for (i = 0; i < time_ms; i++)
 8001e50:	3201      	adds	r2, #1
 8001e52:	e7f6      	b.n	8001e42 <Delay_ms+0x6>

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b510      	push	{r4, lr}
 8001e56:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e58:	2228      	movs	r2, #40	; 0x28
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	a806      	add	r0, sp, #24
 8001e5e:	f000 fd0d 	bl	800287c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e62:	2100      	movs	r1, #0
 8001e64:	2214      	movs	r2, #20
 8001e66:	a801      	add	r0, sp, #4
 8001e68:	f000 fd08 	bl	800287c <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e70:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e72:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e74:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e76:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e78:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e7e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e80:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e82:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e84:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e86:	f7ff fa17 	bl	80012b8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e90:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e94:	4621      	mov	r1, r4
 8001e96:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9c:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e9e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea0:	f7ff fbd2 	bl	8001648 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001ea4:	b010      	add	sp, #64	; 0x40
 8001ea6:	bd10      	pop	{r4, pc}

08001ea8 <main>:
{
 8001ea8:	b583      	push	{r0, r1, r7, lr}
	tmc5041_MotorPosition(TRUE, TMC5041_MOTOR_1, 256* 2 * 200 * 10, 5000, 5000000);
 8001eaa:	4d33      	ldr	r5, [pc, #204]	; (8001f78 <main+0xd0>)
	HAL_Init();
 8001eac:	f7ff f892 	bl	8000fd4 <HAL_Init>
	SystemClock_Config();
 8001eb0:	f7ff ffd0 	bl	8001e54 <SystemClock_Config>
	USART1_UART_Init();
 8001eb4:	f000 fc30 	bl	8002718 <USART1_UART_Init>
	tmc5041_IO_Init();
 8001eb8:	f000 f9c4 	bl	8002244 <tmc5041_IO_Init>
	tmc5041_Init();
 8001ebc:	f000 fb1e 	bl	80024fc <tmc5041_Init>
	printf("able?\r\n");
 8001ec0:	482e      	ldr	r0, [pc, #184]	; (8001f7c <main+0xd4>)
 8001ec2:	f000 fd57 	bl	8002974 <puts>
	tmc5041_MotorPosition(TRUE, TMC5041_MOTOR_1, 256* 2 * 200 * 10, 5000, 5000000);
 8001ec6:	9500      	str	r5, [sp, #0]
 8001ec8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ecc:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 fb9c 	bl	8002610 <tmc5041_MotorPosition>
        printf("STOP1 Actual : %ld\r\n", tmc5041_GetActualPosition(0));
 8001ed8:	4f29      	ldr	r7, [pc, #164]	; (8001f80 <main+0xd8>)
        tmc5041_MotorPosition(TRUE, TMC5041_MOTOR_1, 256 * 2 * 200 *10, 5000, -5000000);
 8001eda:	4e2a      	ldr	r6, [pc, #168]	; (8001f84 <main+0xdc>)
        tmc5041_MotorPosition(FALSE, TMC5041_MOTOR_1, 0, 0, 0);
 8001edc:	2400      	movs	r4, #0
        Delay_ms(3000);
 8001ede:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ee2:	f7ff ffab 	bl	8001e3c <Delay_ms>
        tmc5041_MotorPosition(FALSE, TMC5041_MOTOR_1, 0, 0, 0);
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	4622      	mov	r2, r4
 8001eea:	4621      	mov	r1, r4
 8001eec:	4620      	mov	r0, r4
 8001eee:	9400      	str	r4, [sp, #0]
 8001ef0:	f000 fb8e 	bl	8002610 <tmc5041_MotorPosition>
        printf("STOP1 Actual : %ld\r\n", tmc5041_GetActualPosition(0));
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f000 fb84 	bl	8002602 <tmc5041_GetActualPosition>
 8001efa:	4601      	mov	r1, r0
 8001efc:	4638      	mov	r0, r7
 8001efe:	f000 fcc5 	bl	800288c <iprintf>
        Delay_ms(3000);
 8001f02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f06:	f7ff ff99 	bl	8001e3c <Delay_ms>
        tmc5041_MotorPosition(TRUE, TMC5041_MOTOR_1, 256 * 2 * 200 *10, 5000, -5000000);
 8001f0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f0e:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001f12:	4621      	mov	r1, r4
 8001f14:	9600      	str	r6, [sp, #0]
 8001f16:	2001      	movs	r0, #1
 8001f18:	f000 fb7a 	bl	8002610 <tmc5041_MotorPosition>
        printf("STOP2 Actual : %ld\r\n", tmc5041_GetActualPosition(0));
 8001f1c:	4620      	mov	r0, r4
 8001f1e:	f000 fb70 	bl	8002602 <tmc5041_GetActualPosition>
 8001f22:	4601      	mov	r1, r0
 8001f24:	4818      	ldr	r0, [pc, #96]	; (8001f88 <main+0xe0>)
 8001f26:	f000 fcb1 	bl	800288c <iprintf>
        Delay_ms(3000);
 8001f2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f2e:	f7ff ff85 	bl	8001e3c <Delay_ms>
        tmc5041_MotorPosition(FALSE, TMC5041_MOTOR_1, 0, 0, 0);
 8001f32:	4623      	mov	r3, r4
 8001f34:	4622      	mov	r2, r4
 8001f36:	4621      	mov	r1, r4
 8001f38:	4620      	mov	r0, r4
 8001f3a:	9400      	str	r4, [sp, #0]
 8001f3c:	f000 fb68 	bl	8002610 <tmc5041_MotorPosition>
        printf("STOP3 Actual : %ld\r\n", tmc5041_GetActualPosition(0));
 8001f40:	4620      	mov	r0, r4
 8001f42:	f000 fb5e 	bl	8002602 <tmc5041_GetActualPosition>
 8001f46:	4601      	mov	r1, r0
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <main+0xe4>)
 8001f4a:	f000 fc9f 	bl	800288c <iprintf>
        Delay_ms(3000);
 8001f4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f52:	f7ff ff73 	bl	8001e3c <Delay_ms>
        tmc5041_MotorPosition(TRUE, TMC5041_MOTOR_1, 256 * 2 * 200 *10, 5000, 5000000);
 8001f56:	4621      	mov	r1, r4
 8001f58:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f5c:	f44f 227a 	mov.w	r2, #1024000	; 0xfa000
 8001f60:	9500      	str	r5, [sp, #0]
 8001f62:	2001      	movs	r0, #1
 8001f64:	f000 fb54 	bl	8002610 <tmc5041_MotorPosition>
        printf("STOP4 Actual : %ld\r\n", tmc5041_GetActualPosition(0));
 8001f68:	4620      	mov	r0, r4
 8001f6a:	f000 fb4a 	bl	8002602 <tmc5041_GetActualPosition>
 8001f6e:	4601      	mov	r1, r0
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <main+0xe8>)
 8001f72:	f000 fc8b 	bl	800288c <iprintf>
 8001f76:	e7b1      	b.n	8001edc <main+0x34>
 8001f78:	004c4b40 	.word	0x004c4b40
 8001f7c:	08003784 	.word	0x08003784
 8001f80:	0800378b 	.word	0x0800378b
 8001f84:	ffb3b4c0 	.word	0xffb3b4c0
 8001f88:	080037a0 	.word	0x080037a0
 8001f8c:	080037b5 	.word	0x080037b5
 8001f90:	080037ca 	.word	0x080037ca

08001f94 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001f94:	b510      	push	{r4, lr}
 8001f96:	4604      	mov	r4, r0
    UART1_PutChar(ch);
 8001f98:	b2c0      	uxtb	r0, r0
 8001f9a:	f000 fc15 	bl	80027c8 <UART1_PutChar>

	return ch;
}
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	bd10      	pop	{r4, pc}

08001fa2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa2:	4770      	bx	lr

08001fa4 <NMI_Handler>:
 8001fa4:	4770      	bx	lr

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler>

08001faa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler>

08001fae <SVC_Handler>:
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f7ff b820 	b.w	8000ff8 <HAL_IncTick>

08001fb8 <_read>:
//		*ptr++ = __io_getchar();
//	}
//
// return len;
   return 0;
}
 8001fb8:	2000      	movs	r0, #0
 8001fba:	4770      	bx	lr

08001fbc <_write>:

int _write(int file, char *ptr, int len)
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	460e      	mov	r6, r1
 8001fc0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	1ba3      	subs	r3, r4, r6
 8001fc6:	429d      	cmp	r5, r3
 8001fc8:	dc01      	bgt.n	8001fce <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001fca:	4628      	mov	r0, r5
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001fce:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001fd2:	f7ff ffdf 	bl	8001f94 <__io_putchar>
 8001fd6:	e7f5      	b.n	8001fc4 <_write+0x8>

08001fd8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <_sbrk+0x28>)
{
 8001fda:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	b909      	cbnz	r1, 8001fe4 <_sbrk+0xc>
		heap_end = &end;
 8001fe0:	4908      	ldr	r1, [pc, #32]	; (8002004 <_sbrk+0x2c>)
 8001fe2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001fe4:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001fe6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001fe8:	4402      	add	r2, r0
 8001fea:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001fec:	bf81      	itttt	hi
 8001fee:	220c      	movhi	r2, #12
 8001ff0:	4b05      	ldrhi	r3, [pc, #20]	; (8002008 <_sbrk+0x30>)
		return (caddr_t) -1;
 8001ff2:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 8001ff6:	601a      	strhi	r2, [r3, #0]
	}

	heap_end += incr;
 8001ff8:	bf98      	it	ls
 8001ffa:	601a      	strls	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000090 	.word	0x20000090
 8002004:	20000174 	.word	0x20000174
 8002008:	20000170 	.word	0x20000170

0800200c <_close>:

int _close(int file)
{
	return -1;
}
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	4770      	bx	lr

08002012 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002016:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002018:	604b      	str	r3, [r1, #4]
}
 800201a:	4770      	bx	lr

0800201c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800201c:	2001      	movs	r0, #1
 800201e:	4770      	bx	lr

08002020 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002020:	2000      	movs	r0, #0
 8002022:	4770      	bx	lr

08002024 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <SystemInit+0x40>)
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <SystemInit+0x44>)
 8002032:	400a      	ands	r2, r1
 8002034:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800203c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002040:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002048:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002050:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002052:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002056:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002058:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800205c:	4b03      	ldr	r3, [pc, #12]	; (800206c <SystemInit+0x48>)
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	f8ff0000 	.word	0xf8ff0000
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <tmc5041_SetRefPin.part.0>:
    {
        Delay_us(100);
    }
}

void tmc5041_SetRefPin(unsigned char motor_nr, bool bOnOff)
 8002070:	b538      	push	{r3, r4, r5, lr}
 8002072:	4605      	mov	r5, r0
{
    if(motor_nr == TMC5041_MOTOR_1)
    {
        HAL_GPIO_WritePin(TMC5041_REFR1_PORT, TMC5041_REFR1_PIN, bOnOff);
 8002074:	4c06      	ldr	r4, [pc, #24]	; (8002090 <tmc5041_SetRefPin.part.0+0x20>)
 8002076:	4602      	mov	r2, r0
 8002078:	2108      	movs	r1, #8
 800207a:	4620      	mov	r0, r4
 800207c:	f7ff f916 	bl	80012ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TMC5041_REFL1_PORT, TMC5041_REFL1_PIN, bOnOff);
 8002080:	462a      	mov	r2, r5
 8002082:	4620      	mov	r0, r4
    {
        HAL_GPIO_WritePin(TMC5041_REFR2_PORT, TMC5041_REFR2_PIN, bOnOff);
        HAL_GPIO_WritePin(TMC5041_REFL2_PORT, TMC5041_REFL2_PIN, bOnOff);
    }

}
 8002084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_GPIO_WritePin(TMC5041_REFL1_PORT, TMC5041_REFL1_PIN, bOnOff);
 8002088:	2102      	movs	r1, #2
 800208a:	f7ff b90f 	b.w	80012ac <HAL_GPIO_WritePin>
 800208e:	bf00      	nop
 8002090:	40010800 	.word	0x40010800

08002094 <HAL_SPI_MspInit>:
{
 8002094:	b510      	push	{r4, lr}
 8002096:	4604      	mov	r4, r0
 8002098:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	2210      	movs	r2, #16
 800209c:	2100      	movs	r1, #0
 800209e:	a802      	add	r0, sp, #8
 80020a0:	f000 fbec 	bl	800287c <memset>
  if(hspi->Instance==SPI2)
 80020a4:	6822      	ldr	r2, [r4, #0]
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_SPI_MspInit+0x70>)
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d128      	bne.n	80020fe <HAL_SPI_MspInit+0x6a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ac:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 80020b0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b8:	61da      	str	r2, [r3, #28]
 80020ba:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	4812      	ldr	r0, [pc, #72]	; (8002108 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020be:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80020c2:	9200      	str	r2, [sp, #0]
 80020c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	699a      	ldr	r2, [r3, #24]
 80020c8:	f042 0208 	orr.w	r2, r2, #8
 80020cc:	619a      	str	r2, [r3, #24]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	9301      	str	r3, [sp, #4]
 80020d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80020d8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80020dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f7fe fff5 	bl	80010d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f2:	a902      	add	r1, sp, #8
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <HAL_SPI_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fa:	f7fe ffeb 	bl	80010d4 <HAL_GPIO_Init>
}
 80020fe:	b006      	add	sp, #24
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop
 8002104:	40003800 	.word	0x40003800
 8002108:	40010c00 	.word	0x40010c00
 800210c:	00000000 	.word	0x00000000

08002110 <calculateCurrentValue>:
{
 8002110:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8002114:	4605      	mov	r5, r0
    float i_rms = current/1000.0;
 8002116:	4608      	mov	r0, r1
 8002118:	f7fe f9d8 	bl	80004cc <__aeabi_i2d>
 800211c:	2200      	movs	r2, #0
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <calculateCurrentValue+0xd0>)
 8002120:	f7fe fb64 	bl	80007ec <__aeabi_ddiv>
 8002124:	f7fe fcfa 	bl	8000b1c <__aeabi_d2f>
    _cs = ((i_rms * 32 * SQRT_2 * TMC_5041_R_SENSE)/V_HIGH_SENSE)-0.5;
 8002128:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800212c:	f7fe fd46 	bl	8000bbc <__aeabi_fmul>
 8002130:	f7fe f9de 	bl	80004f0 <__aeabi_f2d>
 8002134:	a322      	add	r3, pc, #136	; (adr r3, 80021c0 <calculateCurrentValue+0xb0>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe fa2d 	bl	8000598 <__aeabi_dmul>
 800213e:	a322      	add	r3, pc, #136	; (adr r3, 80021c8 <calculateCurrentValue+0xb8>)
 8002140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002144:	f7fe fa28 	bl	8000598 <__aeabi_dmul>
 8002148:	a321      	add	r3, pc, #132	; (adr r3, 80021d0 <calculateCurrentValue+0xc0>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	4680      	mov	r8, r0
 8002150:	4689      	mov	r9, r1
 8002152:	f7fe fb4b 	bl	80007ec <__aeabi_ddiv>
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <calculateCurrentValue+0xd4>)
 8002158:	2200      	movs	r2, #0
 800215a:	f7fe f869 	bl	8000230 <__aeabi_dsub>
 800215e:	f7fe fcdd 	bl	8000b1c <__aeabi_d2f>
    v_sense_high[motor] = TRUE;
 8002162:	2301      	movs	r3, #1
 8002164:	4e20      	ldr	r6, [pc, #128]	; (80021e8 <calculateCurrentValue+0xd8>)
    if (_cs > 31)
 8002166:	4921      	ldr	r1, [pc, #132]	; (80021ec <calculateCurrentValue+0xdc>)
    v_sense_high[motor] = TRUE;
 8002168:	5573      	strb	r3, [r6, r5]
    _cs = ((i_rms * 32 * SQRT_2 * TMC_5041_R_SENSE)/V_HIGH_SENSE)-0.5;
 800216a:	4604      	mov	r4, r0
    if (_cs > 31)
 800216c:	f7fe fee2 	bl	8000f34 <__aeabi_fcmpgt>
 8002170:	b198      	cbz	r0, 800219a <calculateCurrentValue+0x8a>
        _cs = ((i_rms * 32 * SQRT_2 * TMC_5041_R_SENSE)/V_LOW_SENSE)-0.5;
 8002172:	a319      	add	r3, pc, #100	; (adr r3, 80021d8 <calculateCurrentValue+0xc8>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	4640      	mov	r0, r8
 800217a:	4649      	mov	r1, r9
 800217c:	f7fe fb36 	bl	80007ec <__aeabi_ddiv>
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <calculateCurrentValue+0xd4>)
 8002182:	2200      	movs	r2, #0
 8002184:	f7fe f854 	bl	8000230 <__aeabi_dsub>
 8002188:	f7fe fcc8 	bl	8000b1c <__aeabi_d2f>
        v_sense_high[motor] = FALSE;
 800218c:	2300      	movs	r3, #0
        if (_cs > 31)
 800218e:	4917      	ldr	r1, [pc, #92]	; (80021ec <calculateCurrentValue+0xdc>)
        v_sense_high[motor] = FALSE;
 8002190:	5573      	strb	r3, [r6, r5]
        _cs = ((i_rms * 32 * SQRT_2 * TMC_5041_R_SENSE)/V_LOW_SENSE)-0.5;
 8002192:	4604      	mov	r4, r0
        if (_cs > 31)
 8002194:	f7fe fece 	bl	8000f34 <__aeabi_fcmpgt>
 8002198:	b968      	cbnz	r0, 80021b6 <calculateCurrentValue+0xa6>
        else if (_cs < 0)
 800219a:	2100      	movs	r1, #0
 800219c:	4620      	mov	r0, r4
 800219e:	f7fe feab 	bl	8000ef8 <__aeabi_fcmplt>
 80021a2:	b110      	cbz	r0, 80021aa <calculateCurrentValue+0x9a>
            return 0;
 80021a4:	2000      	movs	r0, #0
 80021a6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
        return (unsigned char)_cs;
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7fe fecc 	bl	8000f48 <__aeabi_f2uiz>
 80021b0:	b2c0      	uxtb	r0, r0
 80021b2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
            return 31;
 80021b6:	201f      	movs	r0, #31
}
 80021b8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80021bc:	f3af 8000 	nop.w
 80021c0:	667f3bcc 	.word	0x667f3bcc
 80021c4:	3ff6a09e 	.word	0x3ff6a09e
 80021c8:	28f5c28f 	.word	0x28f5c28f
 80021cc:	3fd28f5c 	.word	0x3fd28f5c
 80021d0:	70a3d70a 	.word	0x70a3d70a
 80021d4:	3fc70a3d 	.word	0x3fc70a3d
 80021d8:	cccccccd 	.word	0xcccccccd
 80021dc:	3fd4cccc 	.word	0x3fd4cccc
 80021e0:	408f4000 	.word	0x408f4000
 80021e4:	3fe00000 	.word	0x3fe00000
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	41f80000 	.word	0x41f80000

080021f0 <tmc5041_Chip_Select>:
    HAL_GPIO_WritePin(TMC5041_CS_PORT, TMC5041_CS_PIN, (set ? GPIO_PIN_RESET : GPIO_PIN_SET));
 80021f0:	fab0 f280 	clz	r2, r0
{
 80021f4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(TMC5041_CS_PORT, TMC5041_CS_PIN, (set ? GPIO_PIN_RESET : GPIO_PIN_SET));
 80021f6:	4604      	mov	r4, r0
 80021f8:	0952      	lsrs	r2, r2, #5
 80021fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <tmc5041_Chip_Select+0x24>)
 8002200:	f7ff f854 	bl	80012ac <HAL_GPIO_WritePin>
    if(set)
 8002204:	b124      	cbz	r4, 8002210 <tmc5041_Chip_Select+0x20>
}
 8002206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Delay_us(100);
 800220a:	2064      	movs	r0, #100	; 0x64
 800220c:	f7ff bdce 	b.w	8001dac <Delay_us>
 8002210:	bd10      	pop	{r4, pc}
 8002212:	bf00      	nop
 8002214:	40010c00 	.word	0x40010c00

08002218 <tmc5041_SetRefPin>:
{
 8002218:	b510      	push	{r4, lr}
 800221a:	460c      	mov	r4, r1
    if(motor_nr == TMC5041_MOTOR_1)
 800221c:	b920      	cbnz	r0, 8002228 <tmc5041_SetRefPin+0x10>
}
 800221e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002222:	4608      	mov	r0, r1
 8002224:	f7ff bf24 	b.w	8002070 <tmc5041_SetRefPin.part.0>
        HAL_GPIO_WritePin(TMC5041_REFR2_PORT, TMC5041_REFR2_PIN, bOnOff);
 8002228:	460a      	mov	r2, r1
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <tmc5041_SetRefPin+0x28>)
 800222c:	2104      	movs	r1, #4
 800222e:	f7ff f83d 	bl	80012ac <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(TMC5041_REFL2_PORT, TMC5041_REFL2_PIN, bOnOff);
 8002232:	4622      	mov	r2, r4
}
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(TMC5041_REFL2_PORT, TMC5041_REFL2_PIN, bOnOff);
 8002238:	2101      	movs	r1, #1
 800223a:	4801      	ldr	r0, [pc, #4]	; (8002240 <tmc5041_SetRefPin+0x28>)
 800223c:	f7ff b836 	b.w	80012ac <HAL_GPIO_WritePin>
 8002240:	40010800 	.word	0x40010800

08002244 <tmc5041_IO_Init>:
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002244:	4b38      	ldr	r3, [pc, #224]	; (8002328 <tmc5041_IO_Init+0xe4>)
{
 8002246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	699a      	ldr	r2, [r3, #24]
{
 800224c:	b086      	sub	sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	f042 0204 	orr.w	r2, r2, #4
 8002252:	619a      	str	r2, [r3, #24]
 8002254:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002258:	f002 0204 	and.w	r2, r2, #4
 800225c:	9200      	str	r2, [sp, #0]
 800225e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002260:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002262:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	f042 0208 	orr.w	r2, r2, #8
 8002268:	619a      	str	r2, [r3, #24]
 800226a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = TMC5041_CS_PIN;
 800226c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002278:	2303      	movs	r3, #3
    HAL_GPIO_Init(TMC5041_CS_PORT, &GPIO_InitStruct);
 800227a:	a902      	add	r1, sp, #8
 800227c:	482b      	ldr	r0, [pc, #172]	; (800232c <tmc5041_IO_Init+0xe8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = TMC5041_CS_PIN;
 8002280:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002282:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(TMC5041_CS_PORT, &GPIO_InitStruct);
 8002286:	f7fe ff25 	bl	80010d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TMC5041_REFR1_PIN;
 800228a:	2308      	movs	r3, #8
    GPIO_InitStruct.Pin = TMC5041_REFL1_PIN;
 800228c:	2602      	movs	r6, #2
    HAL_GPIO_Init(TMC5041_REFR1_PORT, &GPIO_InitStruct);
 800228e:	eb0d 0103 	add.w	r1, sp, r3
 8002292:	4827      	ldr	r0, [pc, #156]	; (8002330 <tmc5041_IO_Init+0xec>)
    GPIO_InitStruct.Pin = TMC5041_REFR1_PIN;
 8002294:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(TMC5041_REFR1_PORT, &GPIO_InitStruct);
 8002296:	f7fe ff1d 	bl	80010d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(TMC5041_REFL1_PORT, &GPIO_InitStruct);
 800229a:	a902      	add	r1, sp, #8
 800229c:	4824      	ldr	r0, [pc, #144]	; (8002330 <tmc5041_IO_Init+0xec>)
    GPIO_InitStruct.Pin = TMC5041_REFL1_PIN;
 800229e:	9602      	str	r6, [sp, #8]
    HAL_GPIO_Init(TMC5041_REFL1_PORT, &GPIO_InitStruct);
 80022a0:	f7fe ff18 	bl	80010d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TMC5041_REFR2_PIN;
 80022a4:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = TMC5041_EN_PIN;
 80022a6:	f44f 6800 	mov.w	r8, #2048	; 0x800
    HAL_GPIO_Init(TMC5041_REFR2_PORT, &GPIO_InitStruct);
 80022aa:	a902      	add	r1, sp, #8
 80022ac:	4820      	ldr	r0, [pc, #128]	; (8002330 <tmc5041_IO_Init+0xec>)
    GPIO_InitStruct.Pin = TMC5041_REFR2_PIN;
 80022ae:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(TMC5041_REFR2_PORT, &GPIO_InitStruct);
 80022b0:	f7fe ff10 	bl	80010d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(TMC5041_REFL2_PORT, &GPIO_InitStruct);
 80022b4:	a902      	add	r1, sp, #8
 80022b6:	481e      	ldr	r0, [pc, #120]	; (8002330 <tmc5041_IO_Init+0xec>)
    GPIO_InitStruct.Pin = TMC5041_REFL2_PIN;
 80022b8:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(TMC5041_REFL2_PORT, &GPIO_InitStruct);
 80022ba:	f7fe ff0b 	bl	80010d4 <HAL_GPIO_Init>
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff fed6 	bl	8002070 <tmc5041_SetRefPin.part.0>
    tmc5041_SetRefPin(TMC5041_MOTOR_2, FALSE);
 80022c4:	4621      	mov	r1, r4
 80022c6:	4628      	mov	r0, r5
 80022c8:	f7ff ffa6 	bl	8002218 <tmc5041_SetRefPin>
    HAL_GPIO_Init(TMC5041_EN_PORT, &GPIO_InitStruct);
 80022cc:	a902      	add	r1, sp, #8
 80022ce:	4817      	ldr	r0, [pc, #92]	; (800232c <tmc5041_IO_Init+0xe8>)
    GPIO_InitStruct.Pin = TMC5041_EN_PIN;
 80022d0:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d4:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(TMC5041_EN_PORT, &GPIO_InitStruct);
 80022d6:	f7fe fefd 	bl	80010d4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(TMC5041_EN_PORT, TMC5041_EN_PIN, GPIO_PIN_RESET);
 80022da:	4622      	mov	r2, r4
 80022dc:	4641      	mov	r1, r8
 80022de:	4813      	ldr	r0, [pc, #76]	; (800232c <tmc5041_IO_Init+0xe8>)
 80022e0:	f7fe ffe4 	bl	80012ac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TMC5041_CS_PORT, TMC5041_CS_PIN, GPIO_PIN_SET);
 80022e4:	462a      	mov	r2, r5
 80022e6:	4811      	ldr	r0, [pc, #68]	; (800232c <tmc5041_IO_Init+0xe8>)
 80022e8:	4639      	mov	r1, r7
 80022ea:	f7fe ffdf 	bl	80012ac <HAL_GPIO_WritePin>
    Handle_SPI.Init.Mode = SPI_MODE_MASTER;
 80022ee:	f44f 7382 	mov.w	r3, #260	; 0x104
    Handle_SPI.Instance = TMC5041_SPI;
 80022f2:	4810      	ldr	r0, [pc, #64]	; (8002334 <tmc5041_IO_Init+0xf0>)
    Handle_SPI.Init.Mode = SPI_MODE_MASTER;
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <tmc5041_IO_Init+0xf4>)
    Handle_SPI.Init.Direction = SPI_DIRECTION_2LINES;
 80022f6:	6084      	str	r4, [r0, #8]
    Handle_SPI.Init.Mode = SPI_MODE_MASTER;
 80022f8:	e880 000c 	stmia.w	r0, {r2, r3}
    Handle_SPI.Init.NSS = SPI_NSS_SOFT;
 80022fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002300:	6183      	str	r3, [r0, #24]
    Handle_SPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002302:	2310      	movs	r3, #16
 8002304:	61c3      	str	r3, [r0, #28]
    Handle_SPI.Init.CRCPolynomial = 7;
 8002306:	2307      	movs	r3, #7
    Handle_SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 8002308:	60c4      	str	r4, [r0, #12]
    Handle_SPI.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800230a:	6106      	str	r6, [r0, #16]
    Handle_SPI.Init.CLKPhase = SPI_PHASE_2EDGE;
 800230c:	6145      	str	r5, [r0, #20]
    Handle_SPI.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230e:	6204      	str	r4, [r0, #32]
    Handle_SPI.Init.TIMode = SPI_TIMODE_DISABLE;
 8002310:	6244      	str	r4, [r0, #36]	; 0x24
    Handle_SPI.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002312:	6284      	str	r4, [r0, #40]	; 0x28
    Handle_SPI.Init.CRCPolynomial = 7;
 8002314:	62c3      	str	r3, [r0, #44]	; 0x2c
    if (HAL_SPI_Init(&Handle_SPI) != HAL_OK)
 8002316:	f7ff fbbd 	bl	8001a94 <HAL_SPI_Init>
 800231a:	b108      	cbz	r0, 8002320 <tmc5041_IO_Init+0xdc>
        Error_Handler();
 800231c:	f7ff fe41 	bl	8001fa2 <Error_Handler>
}
 8002320:	b006      	add	sp, #24
 8002322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	40010c00 	.word	0x40010c00
 8002330:	40010800 	.word	0x40010800
 8002334:	200000cc 	.word	0x200000cc
 8002338:	40003800 	.word	0x40003800

0800233c <tmc5041_WriteRegister>:
}

#define WRITE_ACCESS    0x80

uint8_t tmc5041_WriteRegister(uint8_t address, uint32_t data)
{
 800233c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t status;

    //PRINTF(LOG_DEBUG, "address : 0x%02x, data : 0x%08lx", address, data);

    tmc5041_TxBuffer[0] = address | WRITE_ACCESS;
 800233e:	4c0e      	ldr	r4, [pc, #56]	; (8002378 <tmc5041_WriteRegister+0x3c>)
    tmc5041_TxBuffer[1] = (data >> 24) & 0xff;
 8002340:	0e0b      	lsrs	r3, r1, #24
 8002342:	7063      	strb	r3, [r4, #1]
    tmc5041_TxBuffer[0] = address | WRITE_ACCESS;
 8002344:	f060 007f 	orn	r0, r0, #127	; 0x7f
    tmc5041_TxBuffer[2] = (data >> 16) & 0xff;
 8002348:	0c0b      	lsrs	r3, r1, #16
    tmc5041_TxBuffer[0] = address | WRITE_ACCESS;
 800234a:	7020      	strb	r0, [r4, #0]
    tmc5041_TxBuffer[2] = (data >> 16) & 0xff;
 800234c:	70a3      	strb	r3, [r4, #2]
    tmc5041_TxBuffer[3] = (data >> 8) & 0xff;
    tmc5041_TxBuffer[4] = data & 0xff;

    tmc5041_Chip_Select(TRUE);
 800234e:	2001      	movs	r0, #1
    tmc5041_TxBuffer[3] = (data >> 8) & 0xff;
 8002350:	0a0b      	lsrs	r3, r1, #8
 8002352:	70e3      	strb	r3, [r4, #3]
    tmc5041_TxBuffer[4] = data & 0xff;
 8002354:	7121      	strb	r1, [r4, #4]
    tmc5041_Chip_Select(TRUE);
 8002356:	f7ff ff4b 	bl	80021f0 <tmc5041_Chip_Select>
    HAL_SPI_TransmitReceive(&Handle_SPI, tmc5041_TxBuffer, tmc5041_RxBuffer, 5, 100);
 800235a:	2364      	movs	r3, #100	; 0x64
 800235c:	4d07      	ldr	r5, [pc, #28]	; (800237c <tmc5041_WriteRegister+0x40>)
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	462a      	mov	r2, r5
 8002362:	2305      	movs	r3, #5
 8002364:	4621      	mov	r1, r4
 8002366:	4806      	ldr	r0, [pc, #24]	; (8002380 <tmc5041_WriteRegister+0x44>)
 8002368:	f7ff fa97 	bl	800189a <HAL_SPI_TransmitReceive>
    tmc5041_Chip_Select(FALSE);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ff3f 	bl	80021f0 <tmc5041_Chip_Select>

    status = tmc5041_RxBuffer[0];

    return status;
}
 8002372:	7828      	ldrb	r0, [r5, #0]
 8002374:	b003      	add	sp, #12
 8002376:	bd30      	pop	{r4, r5, pc}
 8002378:	20000099 	.word	0x20000099
 800237c:	20000094 	.word	0x20000094
 8002380:	200000cc 	.word	0x200000cc
 8002384:	00000000 	.word	0x00000000

08002388 <tmc5041_SetCurrent>:
{
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	4604      	mov	r4, r0
    unsigned char run_current = calculateCurrentValue(motor_number, newCurrent);
 800238c:	f7ff fec0 	bl	8002110 <calculateCurrentValue>
 8002390:	4606      	mov	r6, r0
    printf("run_current : %d\r\n", run_current);
 8002392:	4601      	mov	r1, r0
 8002394:	4832      	ldr	r0, [pc, #200]	; (8002460 <tmc5041_SetCurrent+0xd8>)
 8002396:	f000 fa79 	bl	800288c <iprintf>
    current_register.VALUE = 0;
 800239a:	2500      	movs	r5, #0
    current_register.bit.IHOLDDELAY = 2;
 800239c:	2302      	movs	r3, #2
 800239e:	f363 258d 	bfi	r5, r3, #10, #4
    current_register.bit.IRUN = run_current;
 80023a2:	f006 031f 	and.w	r3, r6, #31
 80023a6:	f363 1549 	bfi	r5, r3, #5, #5
    tmc5041_WriteRegister((motor_number == TMC5041_MOTOR_1) ? TMC5041_HOLD_RUN_CURRENT_REGISTER_1 : TMC5041_HOLD_RUN_CURRENT_REGISTER_2, current_register.VALUE);
 80023aa:	2c00      	cmp	r4, #0
    current_register.bit.IHOLD = hold_current;
 80023ac:	f363 0504 	bfi	r5, r3, #0, #5
    tmc5041_WriteRegister((motor_number == TMC5041_MOTOR_1) ? TMC5041_HOLD_RUN_CURRENT_REGISTER_1 : TMC5041_HOLD_RUN_CURRENT_REGISTER_2, current_register.VALUE);
 80023b0:	bf0c      	ite	eq
 80023b2:	2030      	moveq	r0, #48	; 0x30
 80023b4:	2050      	movne	r0, #80	; 0x50
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7ff ffc0 	bl	800233c <tmc5041_WriteRegister>
    set_currents[motor_number] = (int)(((run_current + 1.0)/32.0)*((v_sense_high[motor_number]? V_HIGH_SENSE : V_LOW_SENSE) / TMC_5041_R_SENSE) * (1000.0 / SQRT_2));
 80023bc:	4630      	mov	r0, r6
 80023be:	f7fe f885 	bl	80004cc <__aeabi_i2d>
 80023c2:	2200      	movs	r2, #0
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <tmc5041_SetCurrent+0xdc>)
 80023c6:	f7fd ff35 	bl	8000234 <__adddf3>
 80023ca:	2200      	movs	r2, #0
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <tmc5041_SetCurrent+0xe0>)
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_dmul>
 80023d2:	4d26      	ldr	r5, [pc, #152]	; (800246c <tmc5041_SetCurrent+0xe4>)
 80023d4:	4606      	mov	r6, r0
 80023d6:	5d2a      	ldrb	r2, [r5, r4]
 80023d8:	460f      	mov	r7, r1
 80023da:	bb62      	cbnz	r2, 8002436 <tmc5041_SetCurrent+0xae>
 80023dc:	a11a      	add	r1, pc, #104	; (adr r1, 8002448 <tmc5041_SetCurrent+0xc0>)
 80023de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023e2:	4632      	mov	r2, r6
 80023e4:	463b      	mov	r3, r7
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_dmul>
 80023ea:	a319      	add	r3, pc, #100	; (adr r3, 8002450 <tmc5041_SetCurrent+0xc8>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f8d2 	bl	8000598 <__aeabi_dmul>
 80023f4:	f7fe fb6a 	bl	8000acc <__aeabi_d2iz>
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <tmc5041_SetCurrent+0xe8>)
    chopper_control_register.VALUE = 0;
 80023fa:	2100      	movs	r1, #0
    set_currents[motor_number] = (int)(((run_current + 1.0)/32.0)*((v_sense_high[motor_number]? V_HIGH_SENSE : V_LOW_SENSE) / TMC_5041_R_SENSE) * (1000.0 / SQRT_2));
 80023fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    chopper_control_register.bit.TOFF = 5;
 8002400:	2305      	movs	r3, #5
 8002402:	f363 0103 	bfi	r1, r3, #0, #4
    chopper_control_register.bit.HSTRT = 5;
 8002406:	f363 1106 	bfi	r1, r3, #4, #3
    chopper_control_register.bit.HEND = 3;
 800240a:	2303      	movs	r3, #3
 800240c:	f363 11ca 	bfi	r1, r3, #7, #4
    chopper_control_register.bit.TBL = 2;
 8002410:	2302      	movs	r3, #2
    chopper_control_register.bit.RNDTF = 1;
 8002412:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
    chopper_control_register.bit.TBL = 2;
 8002416:	f363 31d0 	bfi	r1, r3, #15, #2
    if (v_sense_high[motor_number])
 800241a:	5d2b      	ldrb	r3, [r5, r4]
 800241c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002420:	b16b      	cbz	r3, 800243e <tmc5041_SetCurrent+0xb6>
        chopper_control_register.bit.VSENSE = 1; // lower v_sense voltage
 8002422:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
    tmc5041_WriteRegister((motor_number == TMC5041_MOTOR_1) ? TMC5041_CHOPPER_CONFIGURATION_REGISTER_1 : TMC5041_CHOPPER_CONFIGURATION_REGISTER_2, chopper_control_register.VALUE);
 8002426:	2c00      	cmp	r4, #0
 8002428:	bf0c      	ite	eq
 800242a:	206c      	moveq	r0, #108	; 0x6c
 800242c:	207c      	movne	r0, #124	; 0x7c
 800242e:	f7ff ff85 	bl	800233c <tmc5041_WriteRegister>
}
 8002432:	2000      	movs	r0, #0
 8002434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    set_currents[motor_number] = (int)(((run_current + 1.0)/32.0)*((v_sense_high[motor_number]? V_HIGH_SENSE : V_LOW_SENSE) / TMC_5041_R_SENSE) * (1000.0 / SQRT_2));
 8002436:	a108      	add	r1, pc, #32	; (adr r1, 8002458 <tmc5041_SetCurrent+0xd0>)
 8002438:	e9d1 0100 	ldrd	r0, r1, [r1]
 800243c:	e7d1      	b.n	80023e2 <tmc5041_SetCurrent+0x5a>
        chopper_control_register.bit.VSENSE = 0; // higher v_sense voltage
 800243e:	f362 4151 	bfi	r1, r2, #17, #1
 8002442:	e7f0      	b.n	8002426 <tmc5041_SetCurrent+0x9e>
 8002444:	f3af 8000 	nop.w
 8002448:	469ee585 	.word	0x469ee585
 800244c:	3ff1ee58 	.word	0x3ff1ee58
 8002450:	b0184066 	.word	0xb0184066
 8002454:	408618da 	.word	0x408618da
 8002458:	8d3dcb09 	.word	0x8d3dcb09
 800245c:	3fe3dcb0 	.word	0x3fe3dcb0
 8002460:	08003809 	.word	0x08003809
 8002464:	3ff00000 	.word	0x3ff00000
 8002468:	3fa00000 	.word	0x3fa00000
 800246c:	2000000c 	.word	0x2000000c
 8002470:	200000c4 	.word	0x200000c4

08002474 <tmc5041_ReadRegister>:

uint32_t tmc5041_ReadRegister(uint8_t address)
{
 8002474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint32_t value;

    memset(tmc5041_TxBuffer, 0x00, 5);
 8002478:	2600      	movs	r6, #0

    tmc5041_TxBuffer[0] = address;

    tmc5041_Chip_Select(TRUE);
    HAL_SPI_TransmitReceive(&Handle_SPI, tmc5041_TxBuffer, tmc5041_RxBuffer, 5, 100);
 800247a:	f04f 0864 	mov.w	r8, #100	; 0x64
    memset(tmc5041_TxBuffer, 0x00, 5);
 800247e:	4c1b      	ldr	r4, [pc, #108]	; (80024ec <tmc5041_ReadRegister+0x78>)
    HAL_SPI_TransmitReceive(&Handle_SPI, tmc5041_TxBuffer, tmc5041_RxBuffer, 5, 100);
 8002480:	4d1b      	ldr	r5, [pc, #108]	; (80024f0 <tmc5041_ReadRegister+0x7c>)
 8002482:	4f1c      	ldr	r7, [pc, #112]	; (80024f4 <tmc5041_ReadRegister+0x80>)
    memset(tmc5041_TxBuffer, 0x00, 5);
 8002484:	6026      	str	r6, [r4, #0]
 8002486:	7126      	strb	r6, [r4, #4]
    tmc5041_TxBuffer[0] = address;
 8002488:	7020      	strb	r0, [r4, #0]
    tmc5041_Chip_Select(TRUE);
 800248a:	2001      	movs	r0, #1
 800248c:	f7ff feb0 	bl	80021f0 <tmc5041_Chip_Select>
    HAL_SPI_TransmitReceive(&Handle_SPI, tmc5041_TxBuffer, tmc5041_RxBuffer, 5, 100);
 8002490:	462a      	mov	r2, r5
 8002492:	4621      	mov	r1, r4
 8002494:	2305      	movs	r3, #5
 8002496:	f8cd 8000 	str.w	r8, [sp]
 800249a:	4638      	mov	r0, r7
 800249c:	f7ff f9fd 	bl	800189a <HAL_SPI_TransmitReceive>
    tmc5041_Chip_Select(FALSE);
 80024a0:	4630      	mov	r0, r6
 80024a2:	f7ff fea5 	bl	80021f0 <tmc5041_Chip_Select>

    Delay_us(1);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff fc80 	bl	8001dac <Delay_us>

    tmc5041_Chip_Select(TRUE);
 80024ac:	2001      	movs	r0, #1
 80024ae:	f7ff fe9f 	bl	80021f0 <tmc5041_Chip_Select>
    HAL_SPI_TransmitReceive(&Handle_SPI, tmc5041_TxBuffer, tmc5041_RxBuffer, 5, 100);
 80024b2:	462a      	mov	r2, r5
 80024b4:	4621      	mov	r1, r4
 80024b6:	2305      	movs	r3, #5
 80024b8:	f8cd 8000 	str.w	r8, [sp]
 80024bc:	4638      	mov	r0, r7
 80024be:	f7ff f9ec 	bl	800189a <HAL_SPI_TransmitReceive>
    tmc5041_Chip_Select(FALSE);
 80024c2:	4630      	mov	r0, r6
 80024c4:	f7ff fe94 	bl	80021f0 <tmc5041_Chip_Select>

	value = 0;
    value |= tmc5041_RxBuffer[1] << 24;
    value |= tmc5041_RxBuffer[2] << 16;
 80024c8:	78ac      	ldrb	r4, [r5, #2]
    value |= tmc5041_RxBuffer[1] << 24;
 80024ca:	786b      	ldrb	r3, [r5, #1]
    value |= tmc5041_RxBuffer[2] << 16;
 80024cc:	0424      	lsls	r4, r4, #16
 80024ce:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    value |= tmc5041_RxBuffer[3] << 8;
    value |= tmc5041_RxBuffer[4];
 80024d2:	792b      	ldrb	r3, [r5, #4]

    // PRINTF(LOG_DEBUG, "value : 0x%08lx", value);
    printf("value : 0x%08lx\r\n", value);
 80024d4:	4808      	ldr	r0, [pc, #32]	; (80024f8 <tmc5041_ReadRegister+0x84>)
 80024d6:	431c      	orrs	r4, r3
    value |= tmc5041_RxBuffer[3] << 8;
 80024d8:	78eb      	ldrb	r3, [r5, #3]
    value |= tmc5041_RxBuffer[4];
 80024da:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    printf("value : 0x%08lx\r\n", value);
 80024de:	4621      	mov	r1, r4
 80024e0:	f000 f9d4 	bl	800288c <iprintf>
    return value;
}
 80024e4:	4620      	mov	r0, r4
 80024e6:	b002      	add	sp, #8
 80024e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024ec:	20000099 	.word	0x20000099
 80024f0:	20000094 	.word	0x20000094
 80024f4:	200000cc 	.word	0x200000cc
 80024f8:	080037f7 	.word	0x080037f7

080024fc <tmc5041_Init>:
{
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg_gconf.bit.POSCMP_EN = 1;
 80024fe:	2400      	movs	r4, #0
    chopper_control_register.bit.TOFF = 5;
 8002500:	2305      	movs	r3, #5
    chopper_control_register.VALUE = 0;
 8002502:	4625      	mov	r5, r4
    chopper_control_register.bit.TOFF = 5;
 8002504:	f363 0503 	bfi	r5, r3, #0, #4
    chopper_control_register.bit.HSTRT = 5;
 8002508:	f363 1506 	bfi	r5, r3, #4, #3
    chopper_control_register.bit.HEND = 3;
 800250c:	2303      	movs	r3, #3
    reg_sw_mode.bit.LATCH_L_ACTIVE = 1;
 800250e:	2601      	movs	r6, #1
    chopper_control_register.bit.HEND = 3;
 8002510:	f363 15ca 	bfi	r5, r3, #7, #4
    chopper_control_register.bit.TBL = 2;
 8002514:	2302      	movs	r3, #2
    tmc5041_ReadRegister(TMC5041_GENERAL_STATUS_REGISTER);
 8002516:	4630      	mov	r0, r6
    chopper_control_register.bit.RNDTF = 1;
 8002518:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
    chopper_control_register.bit.TBL = 2;
 800251c:	f363 35d0 	bfi	r5, r3, #15, #2
    tmc5041_ReadRegister(TMC5041_GENERAL_STATUS_REGISTER);
 8002520:	f7ff ffa8 	bl	8002474 <tmc5041_ReadRegister>
    tmc5041_WriteRegister(TMC5041_GENERAL_CONFIG_REGISTER, reg_gconf.VALUE); //int/PP are outputs
 8002524:	2108      	movs	r1, #8
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ff08 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_RAMP_MODE_REGISTER_1, reg_ramp_mode.VALUE); //enforce positioing mode
 800252c:	4621      	mov	r1, r4
 800252e:	2020      	movs	r0, #32
 8002530:	f7ff ff04 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_X_TARGET_REGISTER_1, reg_xtarget);
 8002534:	4621      	mov	r1, r4
 8002536:	202d      	movs	r0, #45	; 0x2d
 8002538:	f7ff ff00 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_X_ACTUAL_REGISTER_1, reg_xactual);
 800253c:	4621      	mov	r1, r4
 800253e:	2021      	movs	r0, #33	; 0x21
 8002540:	f7ff fefc 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_SetCurrent(0, DEFAULT_CURRENT_IN_MA);
 8002544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff ff1d 	bl	8002388 <tmc5041_SetCurrent>
    chopper_control_register.VALUE |= tmc5041_ReadRegister(TMC5041_CHOPPER_CONFIGURATION_REGISTER_1);
 800254e:	206c      	movs	r0, #108	; 0x6c
 8002550:	f7ff ff90 	bl	8002474 <tmc5041_ReadRegister>
 8002554:	4305      	orrs	r5, r0
    tmc5041_WriteRegister(TMC5041_CHOPPER_CONFIGURATION_REGISTER_1, chopper_control_register.VALUE);
 8002556:	4629      	mov	r1, r5
 8002558:	206c      	movs	r0, #108	; 0x6c
 800255a:	f7ff feef 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_RAMP_MODE_REGISTER_2, reg_ramp_mode.VALUE); //enforce positioing mode
 800255e:	4621      	mov	r1, r4
 8002560:	2040      	movs	r0, #64	; 0x40
 8002562:	f7ff feeb 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_X_TARGET_REGISTER_2, reg_xtarget);
 8002566:	4621      	mov	r1, r4
 8002568:	204d      	movs	r0, #77	; 0x4d
 800256a:	f7ff fee7 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_X_ACTUAL_REGISTER_2, reg_xactual);
 800256e:	4621      	mov	r1, r4
 8002570:	2041      	movs	r0, #65	; 0x41
 8002572:	f7ff fee3 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_SetCurrent(1, DEFAULT_CURRENT_IN_MA);
 8002576:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800257a:	4630      	mov	r0, r6
 800257c:	f7ff ff04 	bl	8002388 <tmc5041_SetCurrent>
    chopper_control_register.VALUE |= tmc5041_ReadRegister(TMC5041_CHOPPER_CONFIGURATION_REGISTER_2);
 8002580:	207c      	movs	r0, #124	; 0x7c
 8002582:	f7ff ff77 	bl	8002474 <tmc5041_ReadRegister>
    reg_sw_mode.bit.LATCH_R_ACTIVE = 1;
 8002586:	27a3      	movs	r7, #163	; 0xa3
    tmc5041_WriteRegister(TMC5041_CHOPPER_CONFIGURATION_REGISTER_2, chopper_control_register.VALUE);
 8002588:	ea45 0100 	orr.w	r1, r5, r0
 800258c:	207c      	movs	r0, #124	; 0x7c
 800258e:	f7ff fed5 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_REFERENCE_SWITCH_CONFIG_REGISTER_1, reg_sw_mode.VALUE);
 8002592:	4639      	mov	r1, r7
 8002594:	2034      	movs	r0, #52	; 0x34
 8002596:	f7ff fed1 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_REFERENCE_SWITCH_CONFIG_REGISTER_2, reg_sw_mode.VALUE);
 800259a:	4639      	mov	r1, r7
 800259c:	2054      	movs	r0, #84	; 0x54
 800259e:	f7ff fecd 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_A_1_REGISTER_1, 0);
 80025a2:	4621      	mov	r1, r4
 80025a4:	2024      	movs	r0, #36	; 0x24
 80025a6:	f7ff fec9 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_D_1_REGISTER_1, 1); //the datahseet says it is needed
 80025aa:	4631      	mov	r1, r6
 80025ac:	202a      	movs	r0, #42	; 0x2a
 80025ae:	f7ff fec5 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_START_REGISTER_1, 0);
 80025b2:	4621      	mov	r1, r4
 80025b4:	2023      	movs	r0, #35	; 0x23
 80025b6:	f7ff fec1 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_STOP_REGISTER_1, 1); //needed acc to the datasheet?
 80025ba:	4631      	mov	r1, r6
 80025bc:	202b      	movs	r0, #43	; 0x2b
 80025be:	f7ff febd 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_1_REGISTER_1, 0);
 80025c2:	4621      	mov	r1, r4
 80025c4:	2025      	movs	r0, #37	; 0x25
 80025c6:	f7ff feb9 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_A_1_REGISTER_2, 0);
 80025ca:	4621      	mov	r1, r4
 80025cc:	2044      	movs	r0, #68	; 0x44
 80025ce:	f7ff feb5 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_D_1_REGISTER_2, 1); //the datahseet says it is needed
 80025d2:	4631      	mov	r1, r6
 80025d4:	204a      	movs	r0, #74	; 0x4a
 80025d6:	f7ff feb1 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_START_REGISTER_2, 0);
 80025da:	4621      	mov	r1, r4
 80025dc:	2043      	movs	r0, #67	; 0x43
 80025de:	f7ff fead 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_STOP_REGISTER_2, 1); //needed acc to the datasheet?
 80025e2:	4631      	mov	r1, r6
 80025e4:	204b      	movs	r0, #75	; 0x4b
 80025e6:	f7ff fea9 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_WriteRegister(TMC5041_V_1_REGISTER_2, 0);
 80025ea:	4621      	mov	r1, r4
 80025ec:	2045      	movs	r0, #69	; 0x45
 80025ee:	f7ff fea5 	bl	800233c <tmc5041_WriteRegister>
    tmc5041_ReadRegister(TMC5041_RAMP_STATUS_REGISTER_1);
 80025f2:	2035      	movs	r0, #53	; 0x35
 80025f4:	f7ff ff3e 	bl	8002474 <tmc5041_ReadRegister>
}
 80025f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    tmc5041_ReadRegister(TMC5041_RAMP_STATUS_REGISTER_2);
 80025fc:	2055      	movs	r0, #85	; 0x55
 80025fe:	f7ff bf39 	b.w	8002474 <tmc5041_ReadRegister>

08002602 <tmc5041_GetActualPosition>:
    return tmc5041_ReadRegister((motor_nr==TMC5041_MOTOR_1) ? TMC5041_X_ACTUAL_REGISTER_1 : TMC5041_X_ACTUAL_REGISTER_2);
 8002602:	2800      	cmp	r0, #0
 8002604:	bf0c      	ite	eq
 8002606:	2021      	moveq	r0, #33	; 0x21
 8002608:	2041      	movne	r0, #65	; 0x41
 800260a:	f7ff bf33 	b.w	8002474 <tmc5041_ReadRegister>
	...

08002610 <tmc5041_MotorPosition>:
{
 8002610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(motor_nr < 2)
 8002614:	2901      	cmp	r1, #1
{
 8002616:	4607      	mov	r7, r0
 8002618:	460c      	mov	r4, r1
 800261a:	4616      	mov	r6, r2
 800261c:	461d      	mov	r5, r3
 800261e:	f8dd a020 	ldr.w	sl, [sp, #32]
    if(motor_nr < 2)
 8002622:	d865      	bhi.n	80026f0 <tmc5041_MotorPosition+0xe0>
        LIMIT(0, pow(2, 16)-1, aMax);
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff41 	bl	80004ac <__aeabi_ui2d>
 800262a:	a333      	add	r3, pc, #204	; (adr r3, 80026f8 <tmc5041_MotorPosition+0xe8>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f7fe fa42 	bl	8000ab8 <__aeabi_dcmpgt>
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	2800      	cmp	r0, #0
 800263a:	bf18      	it	ne
 800263c:	461d      	movne	r5, r3
        LIMIT(0, pow(2, 23) - 512, vMax);
 800263e:	4630      	mov	r0, r6
 8002640:	f7fd ff34 	bl	80004ac <__aeabi_ui2d>
 8002644:	a32e      	add	r3, pc, #184	; (adr r3, 8002700 <tmc5041_MotorPosition+0xf0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe fa35 	bl	8000ab8 <__aeabi_dcmpgt>
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <tmc5041_MotorPosition+0xf8>)
        reg_dmax[motor_nr].VALUE = aMax;
 8002650:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002710 <tmc5041_MotorPosition+0x100>
        LIMIT(0, pow(2, 23) - 512, vMax);
 8002654:	2800      	cmp	r0, #0
 8002656:	bf18      	it	ne
 8002658:	461e      	movne	r6, r3
        reg_vmax[motor_nr].VALUE = vMax;
 800265a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8002714 <tmc5041_MotorPosition+0x104>
        reg_amax[motor_nr].VALUE = aMax;
 800265e:	4b2b      	ldr	r3, [pc, #172]	; (800270c <tmc5041_MotorPosition+0xfc>)
        reg_dmax[motor_nr].VALUE = aMax;
 8002660:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
        reg_amax[motor_nr].VALUE = aMax;
 8002664:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
        reg_vmax[motor_nr].VALUE = vMax;
 8002668:	f848 6024 	str.w	r6, [r8, r4, lsl #2]
        if(bOnOff)
 800266c:	b34f      	cbz	r7, 80026c2 <tmc5041_MotorPosition+0xb2>
            if (reg_vmax[motor_nr].VALUE != 0)
 800266e:	2e00      	cmp	r6, #0
 8002670:	d03e      	beq.n	80026f0 <tmc5041_MotorPosition+0xe0>
                tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_A_MAX_REGISTER_1 : TMC5041_A_MAX_REGISTER_2, reg_amax[motor_nr].VALUE);
 8002672:	2c00      	cmp	r4, #0
 8002674:	4629      	mov	r1, r5
 8002676:	bf0c      	ite	eq
 8002678:	2026      	moveq	r0, #38	; 0x26
 800267a:	2046      	movne	r0, #70	; 0x46
 800267c:	f7ff fe5e 	bl	800233c <tmc5041_WriteRegister>
                tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_D_MAX_REGISTER_1 : TMC5041_D_MAX_REGISTER_2, reg_dmax[motor_nr].VALUE);
 8002680:	2c00      	cmp	r4, #0
 8002682:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 8002686:	bf0c      	ite	eq
 8002688:	2028      	moveq	r0, #40	; 0x28
 800268a:	2048      	movne	r0, #72	; 0x48
 800268c:	f7ff fe56 	bl	800233c <tmc5041_WriteRegister>
                tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_V_MAX_REGISTER_1 : TMC5041_V_MAX_REGISTER_2, reg_vmax[motor_nr].VALUE);
 8002690:	2c00      	cmp	r4, #0
 8002692:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8002696:	bf0c      	ite	eq
 8002698:	2027      	moveq	r0, #39	; 0x27
 800269a:	2047      	movne	r0, #71	; 0x47
 800269c:	f7ff fe4e 	bl	800233c <tmc5041_WriteRegister>
                read_conf = tmc5041_ReadRegister((motor_nr==TMC5041_MOTOR_1) ? TMC5041_X_ACTUAL_REGISTER_1 : TMC5041_X_ACTUAL_REGISTER_2);
 80026a0:	2c00      	cmp	r4, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2021      	moveq	r0, #33	; 0x21
 80026a6:	2041      	movne	r0, #65	; 0x41
 80026a8:	f7ff fee4 	bl	8002474 <tmc5041_ReadRegister>
                tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_X_TARGET_REGISTER_1: TMC5041_X_TARGET_REGISTER_2, read_conf + position);
 80026ac:	2c00      	cmp	r4, #0
 80026ae:	eb00 010a 	add.w	r1, r0, sl
 80026b2:	bf08      	it	eq
 80026b4:	202d      	moveq	r0, #45	; 0x2d
}
 80026b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_X_TARGET_REGISTER_1: TMC5041_X_TARGET_REGISTER_2, read_conf + position);
 80026ba:	bf18      	it	ne
 80026bc:	204d      	movne	r0, #77	; 0x4d
 80026be:	f7ff be3d 	b.w	800233c <tmc5041_WriteRegister>
            tmc5041_SetRefPin(motor_nr, TRUE);
 80026c2:	4620      	mov	r0, r4
 80026c4:	2101      	movs	r1, #1
 80026c6:	f7ff fda7 	bl	8002218 <tmc5041_SetRefPin>
            read_conf = tmc5041_ReadRegister((motor_nr==TMC5041_MOTOR_1) ? TMC5041_X_ACTUAL_REGISTER_1 : TMC5041_X_ACTUAL_REGISTER_2);
 80026ca:	2c00      	cmp	r4, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2021      	moveq	r0, #33	; 0x21
 80026d0:	2041      	movne	r0, #65	; 0x41
 80026d2:	f7ff fecf 	bl	8002474 <tmc5041_ReadRegister>
            tmc5041_WriteRegister((motor_nr == TMC5041_MOTOR_1) ? TMC5041_X_TARGET_REGISTER_1: TMC5041_X_TARGET_REGISTER_2, read_conf);
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	4601      	mov	r1, r0
 80026da:	bf0c      	ite	eq
 80026dc:	202d      	moveq	r0, #45	; 0x2d
 80026de:	204d      	movne	r0, #77	; 0x4d
 80026e0:	f7ff fe2c 	bl	800233c <tmc5041_WriteRegister>
            tmc5041_SetRefPin(motor_nr, FALSE);
 80026e4:	4639      	mov	r1, r7
 80026e6:	4620      	mov	r0, r4
}
 80026e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            tmc5041_SetRefPin(motor_nr, FALSE);
 80026ec:	f7ff bd94 	b.w	8002218 <tmc5041_SetRefPin>
 80026f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f4:	f3af 8000 	nop.w
 80026f8:	00000000 	.word	0x00000000
 80026fc:	40efffe0 	.word	0x40efffe0
 8002700:	00000000 	.word	0x00000000
 8002704:	415fff80 	.word	0x415fff80
 8002708:	007ffe00 	.word	0x007ffe00
 800270c:	200000ac 	.word	0x200000ac
 8002710:	20000124 	.word	0x20000124
 8002714:	200000b4 	.word	0x200000b4

08002718 <USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void USART1_UART_Init(void)
{
 8002718:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 800271a:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 800271e:	480a      	ldr	r0, [pc, #40]	; (8002748 <USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002722:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8002724:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002728:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800272c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800272e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002730:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002736:	f7ff faaf 	bl	8001c98 <HAL_UART_Init>
 800273a:	b118      	cbz	r0, 8002744 <USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800273c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002740:	f7ff bc2f 	b.w	8001fa2 <Error_Handler>
 8002744:	bd08      	pop	{r3, pc}
 8002746:	bf00      	nop
 8002748:	20000130 	.word	0x20000130
 800274c:	40013800 	.word	0x40013800

08002750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b510      	push	{r4, lr}
 8002752:	4604      	mov	r4, r0
 8002754:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	2210      	movs	r2, #16
 8002758:	2100      	movs	r1, #0
 800275a:	a802      	add	r0, sp, #8
 800275c:	f000 f88e 	bl	800287c <memset>
  if(huart->Instance==USART1)
 8002760:	6822      	ldr	r2, [r4, #0]
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <HAL_UART_MspInit+0x70>)
 8002764:	429a      	cmp	r2, r3
 8002766:	d128      	bne.n	80027ba <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002768:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800276c:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002774:	619a      	str	r2, [r3, #24]
 8002776:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	4812      	ldr	r0, [pc, #72]	; (80027c4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800277a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800277e:	9200      	str	r2, [sp, #0]
 8002780:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	f042 0204 	orr.w	r2, r2, #4
 8002788:	619a      	str	r2, [r3, #24]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002794:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002798:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2302      	movs	r3, #2
 800279c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f7fe fc97 	bl	80010d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ac:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	a902      	add	r1, sp, #8
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f7fe fc8d 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ba:	b006      	add	sp, #24
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	bf00      	nop
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40010800 	.word	0x40010800

080027c8 <UART1_PutChar>:
  }

}

void UART1_PutChar(uint8_t data)
{
 80027c8:	b507      	push	{r0, r1, r2, lr}
 80027ca:	a902      	add	r1, sp, #8
 80027cc:	f801 0d01 	strb.w	r0, [r1, #-1]!
   HAL_UART_Transmit(&huart1, (uint8_t *)&data, 1, 0xFFFF);
 80027d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d4:	2201      	movs	r2, #1
 80027d6:	4803      	ldr	r0, [pc, #12]	; (80027e4 <UART1_PutChar+0x1c>)
 80027d8:	f7ff fa8c 	bl	8001cf4 <HAL_UART_Transmit>
}
 80027dc:	b003      	add	sp, #12
 80027de:	f85d fb04 	ldr.w	pc, [sp], #4
 80027e2:	bf00      	nop
 80027e4:	20000130 	.word	0x20000130

080027e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80027e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80027ea:	e003      	b.n	80027f4 <LoopCopyDataInit>

080027ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80027ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80027f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80027f2:	3104      	adds	r1, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80027f4:	480a      	ldr	r0, [pc, #40]	; (8002820 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80027f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80027fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80027fc:	d3f6      	bcc.n	80027ec <CopyDataInit>
  ldr r2, =_sbss
 80027fe:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002800:	e002      	b.n	8002808 <LoopFillZerobss>

08002802 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002802:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002804:	f842 3b04 	str.w	r3, [r2], #4

08002808 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800280a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800280c:	d3f9      	bcc.n	8002802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280e:	f7ff fc09 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002812:	f000 f80f 	bl	8002834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002816:	f7ff fb47 	bl	8001ea8 <main>
  bx lr
 800281a:	4770      	bx	lr
  ldr r3, =_sidata
 800281c:	080038bc 	.word	0x080038bc
  ldr r0, =_sdata
 8002820:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002824:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002828:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 800282c:	20000174 	.word	0x20000174

08002830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_2_IRQHandler>
	...

08002834 <__libc_init_array>:
 8002834:	b570      	push	{r4, r5, r6, lr}
 8002836:	2500      	movs	r5, #0
 8002838:	4e0c      	ldr	r6, [pc, #48]	; (800286c <__libc_init_array+0x38>)
 800283a:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <__libc_init_array+0x3c>)
 800283c:	1ba4      	subs	r4, r4, r6
 800283e:	10a4      	asrs	r4, r4, #2
 8002840:	42a5      	cmp	r5, r4
 8002842:	d109      	bne.n	8002858 <__libc_init_array+0x24>
 8002844:	f000 ff8a 	bl	800375c <_init>
 8002848:	2500      	movs	r5, #0
 800284a:	4e0a      	ldr	r6, [pc, #40]	; (8002874 <__libc_init_array+0x40>)
 800284c:	4c0a      	ldr	r4, [pc, #40]	; (8002878 <__libc_init_array+0x44>)
 800284e:	1ba4      	subs	r4, r4, r6
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	42a5      	cmp	r5, r4
 8002854:	d105      	bne.n	8002862 <__libc_init_array+0x2e>
 8002856:	bd70      	pop	{r4, r5, r6, pc}
 8002858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800285c:	4798      	blx	r3
 800285e:	3501      	adds	r5, #1
 8002860:	e7ee      	b.n	8002840 <__libc_init_array+0xc>
 8002862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002866:	4798      	blx	r3
 8002868:	3501      	adds	r5, #1
 800286a:	e7f2      	b.n	8002852 <__libc_init_array+0x1e>
 800286c:	080038b4 	.word	0x080038b4
 8002870:	080038b4 	.word	0x080038b4
 8002874:	080038b4 	.word	0x080038b4
 8002878:	080038b8 	.word	0x080038b8

0800287c <memset>:
 800287c:	4603      	mov	r3, r0
 800287e:	4402      	add	r2, r0
 8002880:	4293      	cmp	r3, r2
 8002882:	d100      	bne.n	8002886 <memset+0xa>
 8002884:	4770      	bx	lr
 8002886:	f803 1b01 	strb.w	r1, [r3], #1
 800288a:	e7f9      	b.n	8002880 <memset+0x4>

0800288c <iprintf>:
 800288c:	b40f      	push	{r0, r1, r2, r3}
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <iprintf+0x2c>)
 8002890:	b513      	push	{r0, r1, r4, lr}
 8002892:	681c      	ldr	r4, [r3, #0]
 8002894:	b124      	cbz	r4, 80028a0 <iprintf+0x14>
 8002896:	69a3      	ldr	r3, [r4, #24]
 8002898:	b913      	cbnz	r3, 80028a0 <iprintf+0x14>
 800289a:	4620      	mov	r0, r4
 800289c:	f000 fa24 	bl	8002ce8 <__sinit>
 80028a0:	ab05      	add	r3, sp, #20
 80028a2:	9a04      	ldr	r2, [sp, #16]
 80028a4:	68a1      	ldr	r1, [r4, #8]
 80028a6:	4620      	mov	r0, r4
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	f000 fbdd 	bl	8003068 <_vfiprintf_r>
 80028ae:	b002      	add	sp, #8
 80028b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b4:	b004      	add	sp, #16
 80028b6:	4770      	bx	lr
 80028b8:	20000010 	.word	0x20000010

080028bc <_puts_r>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	460e      	mov	r6, r1
 80028c0:	4605      	mov	r5, r0
 80028c2:	b118      	cbz	r0, 80028cc <_puts_r+0x10>
 80028c4:	6983      	ldr	r3, [r0, #24]
 80028c6:	b90b      	cbnz	r3, 80028cc <_puts_r+0x10>
 80028c8:	f000 fa0e 	bl	8002ce8 <__sinit>
 80028cc:	69ab      	ldr	r3, [r5, #24]
 80028ce:	68ac      	ldr	r4, [r5, #8]
 80028d0:	b913      	cbnz	r3, 80028d8 <_puts_r+0x1c>
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 fa08 	bl	8002ce8 <__sinit>
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <_puts_r+0xac>)
 80028da:	429c      	cmp	r4, r3
 80028dc:	d117      	bne.n	800290e <_puts_r+0x52>
 80028de:	686c      	ldr	r4, [r5, #4]
 80028e0:	89a3      	ldrh	r3, [r4, #12]
 80028e2:	071b      	lsls	r3, r3, #28
 80028e4:	d51d      	bpl.n	8002922 <_puts_r+0x66>
 80028e6:	6923      	ldr	r3, [r4, #16]
 80028e8:	b1db      	cbz	r3, 8002922 <_puts_r+0x66>
 80028ea:	3e01      	subs	r6, #1
 80028ec:	68a3      	ldr	r3, [r4, #8]
 80028ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028f2:	3b01      	subs	r3, #1
 80028f4:	60a3      	str	r3, [r4, #8]
 80028f6:	b9e9      	cbnz	r1, 8002934 <_puts_r+0x78>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da2e      	bge.n	800295a <_puts_r+0x9e>
 80028fc:	4622      	mov	r2, r4
 80028fe:	210a      	movs	r1, #10
 8002900:	4628      	mov	r0, r5
 8002902:	f000 f83f 	bl	8002984 <__swbuf_r>
 8002906:	3001      	adds	r0, #1
 8002908:	d011      	beq.n	800292e <_puts_r+0x72>
 800290a:	200a      	movs	r0, #10
 800290c:	bd70      	pop	{r4, r5, r6, pc}
 800290e:	4b17      	ldr	r3, [pc, #92]	; (800296c <_puts_r+0xb0>)
 8002910:	429c      	cmp	r4, r3
 8002912:	d101      	bne.n	8002918 <_puts_r+0x5c>
 8002914:	68ac      	ldr	r4, [r5, #8]
 8002916:	e7e3      	b.n	80028e0 <_puts_r+0x24>
 8002918:	4b15      	ldr	r3, [pc, #84]	; (8002970 <_puts_r+0xb4>)
 800291a:	429c      	cmp	r4, r3
 800291c:	bf08      	it	eq
 800291e:	68ec      	ldreq	r4, [r5, #12]
 8002920:	e7de      	b.n	80028e0 <_puts_r+0x24>
 8002922:	4621      	mov	r1, r4
 8002924:	4628      	mov	r0, r5
 8002926:	f000 f87f 	bl	8002a28 <__swsetup_r>
 800292a:	2800      	cmp	r0, #0
 800292c:	d0dd      	beq.n	80028ea <_puts_r+0x2e>
 800292e:	f04f 30ff 	mov.w	r0, #4294967295
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	2b00      	cmp	r3, #0
 8002936:	da04      	bge.n	8002942 <_puts_r+0x86>
 8002938:	69a2      	ldr	r2, [r4, #24]
 800293a:	4293      	cmp	r3, r2
 800293c:	db06      	blt.n	800294c <_puts_r+0x90>
 800293e:	290a      	cmp	r1, #10
 8002940:	d004      	beq.n	800294c <_puts_r+0x90>
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	6022      	str	r2, [r4, #0]
 8002948:	7019      	strb	r1, [r3, #0]
 800294a:	e7cf      	b.n	80028ec <_puts_r+0x30>
 800294c:	4622      	mov	r2, r4
 800294e:	4628      	mov	r0, r5
 8002950:	f000 f818 	bl	8002984 <__swbuf_r>
 8002954:	3001      	adds	r0, #1
 8002956:	d1c9      	bne.n	80028ec <_puts_r+0x30>
 8002958:	e7e9      	b.n	800292e <_puts_r+0x72>
 800295a:	200a      	movs	r0, #10
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	6022      	str	r2, [r4, #0]
 8002962:	7018      	strb	r0, [r3, #0]
 8002964:	bd70      	pop	{r4, r5, r6, pc}
 8002966:	bf00      	nop
 8002968:	0800383c 	.word	0x0800383c
 800296c:	0800385c 	.word	0x0800385c
 8002970:	0800381c 	.word	0x0800381c

08002974 <puts>:
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <puts+0xc>)
 8002976:	4601      	mov	r1, r0
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f7ff bf9f 	b.w	80028bc <_puts_r>
 800297e:	bf00      	nop
 8002980:	20000010 	.word	0x20000010

08002984 <__swbuf_r>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	460e      	mov	r6, r1
 8002988:	4614      	mov	r4, r2
 800298a:	4605      	mov	r5, r0
 800298c:	b118      	cbz	r0, 8002996 <__swbuf_r+0x12>
 800298e:	6983      	ldr	r3, [r0, #24]
 8002990:	b90b      	cbnz	r3, 8002996 <__swbuf_r+0x12>
 8002992:	f000 f9a9 	bl	8002ce8 <__sinit>
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <__swbuf_r+0x98>)
 8002998:	429c      	cmp	r4, r3
 800299a:	d12a      	bne.n	80029f2 <__swbuf_r+0x6e>
 800299c:	686c      	ldr	r4, [r5, #4]
 800299e:	69a3      	ldr	r3, [r4, #24]
 80029a0:	60a3      	str	r3, [r4, #8]
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	071a      	lsls	r2, r3, #28
 80029a6:	d52e      	bpl.n	8002a06 <__swbuf_r+0x82>
 80029a8:	6923      	ldr	r3, [r4, #16]
 80029aa:	b363      	cbz	r3, 8002a06 <__swbuf_r+0x82>
 80029ac:	6923      	ldr	r3, [r4, #16]
 80029ae:	6820      	ldr	r0, [r4, #0]
 80029b0:	b2f6      	uxtb	r6, r6
 80029b2:	1ac0      	subs	r0, r0, r3
 80029b4:	6963      	ldr	r3, [r4, #20]
 80029b6:	4637      	mov	r7, r6
 80029b8:	4298      	cmp	r0, r3
 80029ba:	db04      	blt.n	80029c6 <__swbuf_r+0x42>
 80029bc:	4621      	mov	r1, r4
 80029be:	4628      	mov	r0, r5
 80029c0:	f000 f928 	bl	8002c14 <_fflush_r>
 80029c4:	bb28      	cbnz	r0, 8002a12 <__swbuf_r+0x8e>
 80029c6:	68a3      	ldr	r3, [r4, #8]
 80029c8:	3001      	adds	r0, #1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	60a3      	str	r3, [r4, #8]
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	6022      	str	r2, [r4, #0]
 80029d4:	701e      	strb	r6, [r3, #0]
 80029d6:	6963      	ldr	r3, [r4, #20]
 80029d8:	4298      	cmp	r0, r3
 80029da:	d004      	beq.n	80029e6 <__swbuf_r+0x62>
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	07db      	lsls	r3, r3, #31
 80029e0:	d519      	bpl.n	8002a16 <__swbuf_r+0x92>
 80029e2:	2e0a      	cmp	r6, #10
 80029e4:	d117      	bne.n	8002a16 <__swbuf_r+0x92>
 80029e6:	4621      	mov	r1, r4
 80029e8:	4628      	mov	r0, r5
 80029ea:	f000 f913 	bl	8002c14 <_fflush_r>
 80029ee:	b190      	cbz	r0, 8002a16 <__swbuf_r+0x92>
 80029f0:	e00f      	b.n	8002a12 <__swbuf_r+0x8e>
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <__swbuf_r+0x9c>)
 80029f4:	429c      	cmp	r4, r3
 80029f6:	d101      	bne.n	80029fc <__swbuf_r+0x78>
 80029f8:	68ac      	ldr	r4, [r5, #8]
 80029fa:	e7d0      	b.n	800299e <__swbuf_r+0x1a>
 80029fc:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <__swbuf_r+0xa0>)
 80029fe:	429c      	cmp	r4, r3
 8002a00:	bf08      	it	eq
 8002a02:	68ec      	ldreq	r4, [r5, #12]
 8002a04:	e7cb      	b.n	800299e <__swbuf_r+0x1a>
 8002a06:	4621      	mov	r1, r4
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 f80d 	bl	8002a28 <__swsetup_r>
 8002a0e:	2800      	cmp	r0, #0
 8002a10:	d0cc      	beq.n	80029ac <__swbuf_r+0x28>
 8002a12:	f04f 37ff 	mov.w	r7, #4294967295
 8002a16:	4638      	mov	r0, r7
 8002a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0800383c 	.word	0x0800383c
 8002a20:	0800385c 	.word	0x0800385c
 8002a24:	0800381c 	.word	0x0800381c

08002a28 <__swsetup_r>:
 8002a28:	4b32      	ldr	r3, [pc, #200]	; (8002af4 <__swsetup_r+0xcc>)
 8002a2a:	b570      	push	{r4, r5, r6, lr}
 8002a2c:	681d      	ldr	r5, [r3, #0]
 8002a2e:	4606      	mov	r6, r0
 8002a30:	460c      	mov	r4, r1
 8002a32:	b125      	cbz	r5, 8002a3e <__swsetup_r+0x16>
 8002a34:	69ab      	ldr	r3, [r5, #24]
 8002a36:	b913      	cbnz	r3, 8002a3e <__swsetup_r+0x16>
 8002a38:	4628      	mov	r0, r5
 8002a3a:	f000 f955 	bl	8002ce8 <__sinit>
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <__swsetup_r+0xd0>)
 8002a40:	429c      	cmp	r4, r3
 8002a42:	d10f      	bne.n	8002a64 <__swsetup_r+0x3c>
 8002a44:	686c      	ldr	r4, [r5, #4]
 8002a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	0715      	lsls	r5, r2, #28
 8002a4e:	d42c      	bmi.n	8002aaa <__swsetup_r+0x82>
 8002a50:	06d0      	lsls	r0, r2, #27
 8002a52:	d411      	bmi.n	8002a78 <__swsetup_r+0x50>
 8002a54:	2209      	movs	r2, #9
 8002a56:	6032      	str	r2, [r6, #0]
 8002a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5c:	81a3      	strh	r3, [r4, #12]
 8002a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <__swsetup_r+0xd4>)
 8002a66:	429c      	cmp	r4, r3
 8002a68:	d101      	bne.n	8002a6e <__swsetup_r+0x46>
 8002a6a:	68ac      	ldr	r4, [r5, #8]
 8002a6c:	e7eb      	b.n	8002a46 <__swsetup_r+0x1e>
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <__swsetup_r+0xd8>)
 8002a70:	429c      	cmp	r4, r3
 8002a72:	bf08      	it	eq
 8002a74:	68ec      	ldreq	r4, [r5, #12]
 8002a76:	e7e6      	b.n	8002a46 <__swsetup_r+0x1e>
 8002a78:	0751      	lsls	r1, r2, #29
 8002a7a:	d512      	bpl.n	8002aa2 <__swsetup_r+0x7a>
 8002a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a7e:	b141      	cbz	r1, 8002a92 <__swsetup_r+0x6a>
 8002a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a84:	4299      	cmp	r1, r3
 8002a86:	d002      	beq.n	8002a8e <__swsetup_r+0x66>
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f000 fa1b 	bl	8002ec4 <_free_r>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	6363      	str	r3, [r4, #52]	; 0x34
 8002a92:	89a3      	ldrh	r3, [r4, #12]
 8002a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a98:	81a3      	strh	r3, [r4, #12]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	6063      	str	r3, [r4, #4]
 8002a9e:	6923      	ldr	r3, [r4, #16]
 8002aa0:	6023      	str	r3, [r4, #0]
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	81a3      	strh	r3, [r4, #12]
 8002aaa:	6923      	ldr	r3, [r4, #16]
 8002aac:	b94b      	cbnz	r3, 8002ac2 <__swsetup_r+0x9a>
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab8:	d003      	beq.n	8002ac2 <__swsetup_r+0x9a>
 8002aba:	4621      	mov	r1, r4
 8002abc:	4630      	mov	r0, r6
 8002abe:	f000 f9c1 	bl	8002e44 <__smakebuf_r>
 8002ac2:	89a2      	ldrh	r2, [r4, #12]
 8002ac4:	f012 0301 	ands.w	r3, r2, #1
 8002ac8:	d00c      	beq.n	8002ae4 <__swsetup_r+0xbc>
 8002aca:	2300      	movs	r3, #0
 8002acc:	60a3      	str	r3, [r4, #8]
 8002ace:	6963      	ldr	r3, [r4, #20]
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	61a3      	str	r3, [r4, #24]
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	b953      	cbnz	r3, 8002aee <__swsetup_r+0xc6>
 8002ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002adc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ae0:	d1ba      	bne.n	8002a58 <__swsetup_r+0x30>
 8002ae2:	bd70      	pop	{r4, r5, r6, pc}
 8002ae4:	0792      	lsls	r2, r2, #30
 8002ae6:	bf58      	it	pl
 8002ae8:	6963      	ldrpl	r3, [r4, #20]
 8002aea:	60a3      	str	r3, [r4, #8]
 8002aec:	e7f2      	b.n	8002ad4 <__swsetup_r+0xac>
 8002aee:	2000      	movs	r0, #0
 8002af0:	e7f7      	b.n	8002ae2 <__swsetup_r+0xba>
 8002af2:	bf00      	nop
 8002af4:	20000010 	.word	0x20000010
 8002af8:	0800383c 	.word	0x0800383c
 8002afc:	0800385c 	.word	0x0800385c
 8002b00:	0800381c 	.word	0x0800381c

08002b04 <__sflush_r>:
 8002b04:	898a      	ldrh	r2, [r1, #12]
 8002b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0a:	4605      	mov	r5, r0
 8002b0c:	0710      	lsls	r0, r2, #28
 8002b0e:	460c      	mov	r4, r1
 8002b10:	d45a      	bmi.n	8002bc8 <__sflush_r+0xc4>
 8002b12:	684b      	ldr	r3, [r1, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	dc05      	bgt.n	8002b24 <__sflush_r+0x20>
 8002b18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	dc02      	bgt.n	8002b24 <__sflush_r+0x20>
 8002b1e:	2000      	movs	r0, #0
 8002b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d0f9      	beq.n	8002b1e <__sflush_r+0x1a>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b30:	682f      	ldr	r7, [r5, #0]
 8002b32:	602b      	str	r3, [r5, #0]
 8002b34:	d033      	beq.n	8002b9e <__sflush_r+0x9a>
 8002b36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b38:	89a3      	ldrh	r3, [r4, #12]
 8002b3a:	075a      	lsls	r2, r3, #29
 8002b3c:	d505      	bpl.n	8002b4a <__sflush_r+0x46>
 8002b3e:	6863      	ldr	r3, [r4, #4]
 8002b40:	1ac0      	subs	r0, r0, r3
 8002b42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b44:	b10b      	cbz	r3, 8002b4a <__sflush_r+0x46>
 8002b46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b48:	1ac0      	subs	r0, r0, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b50:	6a21      	ldr	r1, [r4, #32]
 8002b52:	4628      	mov	r0, r5
 8002b54:	47b0      	blx	r6
 8002b56:	1c43      	adds	r3, r0, #1
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	d106      	bne.n	8002b6a <__sflush_r+0x66>
 8002b5c:	6829      	ldr	r1, [r5, #0]
 8002b5e:	291d      	cmp	r1, #29
 8002b60:	d84b      	bhi.n	8002bfa <__sflush_r+0xf6>
 8002b62:	4a2b      	ldr	r2, [pc, #172]	; (8002c10 <__sflush_r+0x10c>)
 8002b64:	40ca      	lsrs	r2, r1
 8002b66:	07d6      	lsls	r6, r2, #31
 8002b68:	d547      	bpl.n	8002bfa <__sflush_r+0xf6>
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	6062      	str	r2, [r4, #4]
 8002b6e:	6922      	ldr	r2, [r4, #16]
 8002b70:	04d9      	lsls	r1, r3, #19
 8002b72:	6022      	str	r2, [r4, #0]
 8002b74:	d504      	bpl.n	8002b80 <__sflush_r+0x7c>
 8002b76:	1c42      	adds	r2, r0, #1
 8002b78:	d101      	bne.n	8002b7e <__sflush_r+0x7a>
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	b903      	cbnz	r3, 8002b80 <__sflush_r+0x7c>
 8002b7e:	6560      	str	r0, [r4, #84]	; 0x54
 8002b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b82:	602f      	str	r7, [r5, #0]
 8002b84:	2900      	cmp	r1, #0
 8002b86:	d0ca      	beq.n	8002b1e <__sflush_r+0x1a>
 8002b88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b8c:	4299      	cmp	r1, r3
 8002b8e:	d002      	beq.n	8002b96 <__sflush_r+0x92>
 8002b90:	4628      	mov	r0, r5
 8002b92:	f000 f997 	bl	8002ec4 <_free_r>
 8002b96:	2000      	movs	r0, #0
 8002b98:	6360      	str	r0, [r4, #52]	; 0x34
 8002b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b9e:	6a21      	ldr	r1, [r4, #32]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	47b0      	blx	r6
 8002ba6:	1c41      	adds	r1, r0, #1
 8002ba8:	d1c6      	bne.n	8002b38 <__sflush_r+0x34>
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0c3      	beq.n	8002b38 <__sflush_r+0x34>
 8002bb0:	2b1d      	cmp	r3, #29
 8002bb2:	d001      	beq.n	8002bb8 <__sflush_r+0xb4>
 8002bb4:	2b16      	cmp	r3, #22
 8002bb6:	d101      	bne.n	8002bbc <__sflush_r+0xb8>
 8002bb8:	602f      	str	r7, [r5, #0]
 8002bba:	e7b0      	b.n	8002b1e <__sflush_r+0x1a>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bc8:	690f      	ldr	r7, [r1, #16]
 8002bca:	2f00      	cmp	r7, #0
 8002bcc:	d0a7      	beq.n	8002b1e <__sflush_r+0x1a>
 8002bce:	0793      	lsls	r3, r2, #30
 8002bd0:	bf18      	it	ne
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	680e      	ldr	r6, [r1, #0]
 8002bd6:	bf08      	it	eq
 8002bd8:	694b      	ldreq	r3, [r1, #20]
 8002bda:	eba6 0807 	sub.w	r8, r6, r7
 8002bde:	600f      	str	r7, [r1, #0]
 8002be0:	608b      	str	r3, [r1, #8]
 8002be2:	f1b8 0f00 	cmp.w	r8, #0
 8002be6:	dd9a      	ble.n	8002b1e <__sflush_r+0x1a>
 8002be8:	4643      	mov	r3, r8
 8002bea:	463a      	mov	r2, r7
 8002bec:	6a21      	ldr	r1, [r4, #32]
 8002bee:	4628      	mov	r0, r5
 8002bf0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bf2:	47b0      	blx	r6
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	dc07      	bgt.n	8002c08 <__sflush_r+0x104>
 8002bf8:	89a3      	ldrh	r3, [r4, #12]
 8002bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfe:	81a3      	strh	r3, [r4, #12]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c08:	4407      	add	r7, r0
 8002c0a:	eba8 0800 	sub.w	r8, r8, r0
 8002c0e:	e7e8      	b.n	8002be2 <__sflush_r+0xde>
 8002c10:	20400001 	.word	0x20400001

08002c14 <_fflush_r>:
 8002c14:	b538      	push	{r3, r4, r5, lr}
 8002c16:	690b      	ldr	r3, [r1, #16]
 8002c18:	4605      	mov	r5, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	b1db      	cbz	r3, 8002c56 <_fflush_r+0x42>
 8002c1e:	b118      	cbz	r0, 8002c28 <_fflush_r+0x14>
 8002c20:	6983      	ldr	r3, [r0, #24]
 8002c22:	b90b      	cbnz	r3, 8002c28 <_fflush_r+0x14>
 8002c24:	f000 f860 	bl	8002ce8 <__sinit>
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <_fflush_r+0x48>)
 8002c2a:	429c      	cmp	r4, r3
 8002c2c:	d109      	bne.n	8002c42 <_fflush_r+0x2e>
 8002c2e:	686c      	ldr	r4, [r5, #4]
 8002c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c34:	b17b      	cbz	r3, 8002c56 <_fflush_r+0x42>
 8002c36:	4621      	mov	r1, r4
 8002c38:	4628      	mov	r0, r5
 8002c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c3e:	f7ff bf61 	b.w	8002b04 <__sflush_r>
 8002c42:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <_fflush_r+0x4c>)
 8002c44:	429c      	cmp	r4, r3
 8002c46:	d101      	bne.n	8002c4c <_fflush_r+0x38>
 8002c48:	68ac      	ldr	r4, [r5, #8]
 8002c4a:	e7f1      	b.n	8002c30 <_fflush_r+0x1c>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <_fflush_r+0x50>)
 8002c4e:	429c      	cmp	r4, r3
 8002c50:	bf08      	it	eq
 8002c52:	68ec      	ldreq	r4, [r5, #12]
 8002c54:	e7ec      	b.n	8002c30 <_fflush_r+0x1c>
 8002c56:	2000      	movs	r0, #0
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	bf00      	nop
 8002c5c:	0800383c 	.word	0x0800383c
 8002c60:	0800385c 	.word	0x0800385c
 8002c64:	0800381c 	.word	0x0800381c

08002c68 <_cleanup_r>:
 8002c68:	4901      	ldr	r1, [pc, #4]	; (8002c70 <_cleanup_r+0x8>)
 8002c6a:	f000 b8a9 	b.w	8002dc0 <_fwalk_reent>
 8002c6e:	bf00      	nop
 8002c70:	08002c15 	.word	0x08002c15

08002c74 <std.isra.0>:
 8002c74:	2300      	movs	r3, #0
 8002c76:	b510      	push	{r4, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	6003      	str	r3, [r0, #0]
 8002c7c:	6043      	str	r3, [r0, #4]
 8002c7e:	6083      	str	r3, [r0, #8]
 8002c80:	8181      	strh	r1, [r0, #12]
 8002c82:	6643      	str	r3, [r0, #100]	; 0x64
 8002c84:	81c2      	strh	r2, [r0, #14]
 8002c86:	6103      	str	r3, [r0, #16]
 8002c88:	6143      	str	r3, [r0, #20]
 8002c8a:	6183      	str	r3, [r0, #24]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	2208      	movs	r2, #8
 8002c90:	305c      	adds	r0, #92	; 0x5c
 8002c92:	f7ff fdf3 	bl	800287c <memset>
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <std.isra.0+0x38>)
 8002c98:	6224      	str	r4, [r4, #32]
 8002c9a:	6263      	str	r3, [r4, #36]	; 0x24
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <std.isra.0+0x3c>)
 8002c9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <std.isra.0+0x40>)
 8002ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <std.isra.0+0x44>)
 8002ca6:	6323      	str	r3, [r4, #48]	; 0x30
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	bf00      	nop
 8002cac:	080035e5 	.word	0x080035e5
 8002cb0:	08003607 	.word	0x08003607
 8002cb4:	0800363f 	.word	0x0800363f
 8002cb8:	08003663 	.word	0x08003663

08002cbc <__sfmoreglue>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	2568      	movs	r5, #104	; 0x68
 8002cc0:	1e4a      	subs	r2, r1, #1
 8002cc2:	4355      	muls	r5, r2
 8002cc4:	460e      	mov	r6, r1
 8002cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002cca:	f000 f947 	bl	8002f5c <_malloc_r>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	b140      	cbz	r0, 8002ce4 <__sfmoreglue+0x28>
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	e880 0042 	stmia.w	r0, {r1, r6}
 8002cd8:	300c      	adds	r0, #12
 8002cda:	60a0      	str	r0, [r4, #8]
 8002cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ce0:	f7ff fdcc 	bl	800287c <memset>
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}

08002ce8 <__sinit>:
 8002ce8:	6983      	ldr	r3, [r0, #24]
 8002cea:	b510      	push	{r4, lr}
 8002cec:	4604      	mov	r4, r0
 8002cee:	bb33      	cbnz	r3, 8002d3e <__sinit+0x56>
 8002cf0:	6483      	str	r3, [r0, #72]	; 0x48
 8002cf2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002cf4:	6503      	str	r3, [r0, #80]	; 0x50
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <__sinit+0x58>)
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <__sinit+0x5c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6282      	str	r2, [r0, #40]	; 0x28
 8002cfe:	4298      	cmp	r0, r3
 8002d00:	bf04      	itt	eq
 8002d02:	2301      	moveq	r3, #1
 8002d04:	6183      	streq	r3, [r0, #24]
 8002d06:	f000 f81f 	bl	8002d48 <__sfp>
 8002d0a:	6060      	str	r0, [r4, #4]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f000 f81b 	bl	8002d48 <__sfp>
 8002d12:	60a0      	str	r0, [r4, #8]
 8002d14:	4620      	mov	r0, r4
 8002d16:	f000 f817 	bl	8002d48 <__sfp>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60e0      	str	r0, [r4, #12]
 8002d1e:	2104      	movs	r1, #4
 8002d20:	6860      	ldr	r0, [r4, #4]
 8002d22:	f7ff ffa7 	bl	8002c74 <std.isra.0>
 8002d26:	2201      	movs	r2, #1
 8002d28:	2109      	movs	r1, #9
 8002d2a:	68a0      	ldr	r0, [r4, #8]
 8002d2c:	f7ff ffa2 	bl	8002c74 <std.isra.0>
 8002d30:	2202      	movs	r2, #2
 8002d32:	2112      	movs	r1, #18
 8002d34:	68e0      	ldr	r0, [r4, #12]
 8002d36:	f7ff ff9d 	bl	8002c74 <std.isra.0>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61a3      	str	r3, [r4, #24]
 8002d3e:	bd10      	pop	{r4, pc}
 8002d40:	0800387c 	.word	0x0800387c
 8002d44:	08002c69 	.word	0x08002c69

08002d48 <__sfp>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <__sfp+0x74>)
 8002d4c:	4607      	mov	r7, r0
 8002d4e:	681e      	ldr	r6, [r3, #0]
 8002d50:	69b3      	ldr	r3, [r6, #24]
 8002d52:	b913      	cbnz	r3, 8002d5a <__sfp+0x12>
 8002d54:	4630      	mov	r0, r6
 8002d56:	f7ff ffc7 	bl	8002ce8 <__sinit>
 8002d5a:	3648      	adds	r6, #72	; 0x48
 8002d5c:	68b4      	ldr	r4, [r6, #8]
 8002d5e:	6873      	ldr	r3, [r6, #4]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	d503      	bpl.n	8002d6c <__sfp+0x24>
 8002d64:	6833      	ldr	r3, [r6, #0]
 8002d66:	b133      	cbz	r3, 8002d76 <__sfp+0x2e>
 8002d68:	6836      	ldr	r6, [r6, #0]
 8002d6a:	e7f7      	b.n	8002d5c <__sfp+0x14>
 8002d6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d70:	b16d      	cbz	r5, 8002d8e <__sfp+0x46>
 8002d72:	3468      	adds	r4, #104	; 0x68
 8002d74:	e7f4      	b.n	8002d60 <__sfp+0x18>
 8002d76:	2104      	movs	r1, #4
 8002d78:	4638      	mov	r0, r7
 8002d7a:	f7ff ff9f 	bl	8002cbc <__sfmoreglue>
 8002d7e:	6030      	str	r0, [r6, #0]
 8002d80:	2800      	cmp	r0, #0
 8002d82:	d1f1      	bne.n	8002d68 <__sfp+0x20>
 8002d84:	230c      	movs	r3, #12
 8002d86:	4604      	mov	r4, r0
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d92:	81e3      	strh	r3, [r4, #14]
 8002d94:	2301      	movs	r3, #1
 8002d96:	6665      	str	r5, [r4, #100]	; 0x64
 8002d98:	81a3      	strh	r3, [r4, #12]
 8002d9a:	6025      	str	r5, [r4, #0]
 8002d9c:	60a5      	str	r5, [r4, #8]
 8002d9e:	6065      	str	r5, [r4, #4]
 8002da0:	6125      	str	r5, [r4, #16]
 8002da2:	6165      	str	r5, [r4, #20]
 8002da4:	61a5      	str	r5, [r4, #24]
 8002da6:	2208      	movs	r2, #8
 8002da8:	4629      	mov	r1, r5
 8002daa:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002dae:	f7ff fd65 	bl	800287c <memset>
 8002db2:	6365      	str	r5, [r4, #52]	; 0x34
 8002db4:	63a5      	str	r5, [r4, #56]	; 0x38
 8002db6:	64a5      	str	r5, [r4, #72]	; 0x48
 8002db8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002dba:	e7e6      	b.n	8002d8a <__sfp+0x42>
 8002dbc:	0800387c 	.word	0x0800387c

08002dc0 <_fwalk_reent>:
 8002dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc4:	4680      	mov	r8, r0
 8002dc6:	4689      	mov	r9, r1
 8002dc8:	2600      	movs	r6, #0
 8002dca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002dce:	b914      	cbnz	r4, 8002dd6 <_fwalk_reent+0x16>
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dd6:	68a5      	ldr	r5, [r4, #8]
 8002dd8:	6867      	ldr	r7, [r4, #4]
 8002dda:	3f01      	subs	r7, #1
 8002ddc:	d501      	bpl.n	8002de2 <_fwalk_reent+0x22>
 8002dde:	6824      	ldr	r4, [r4, #0]
 8002de0:	e7f5      	b.n	8002dce <_fwalk_reent+0xe>
 8002de2:	89ab      	ldrh	r3, [r5, #12]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d907      	bls.n	8002df8 <_fwalk_reent+0x38>
 8002de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dec:	3301      	adds	r3, #1
 8002dee:	d003      	beq.n	8002df8 <_fwalk_reent+0x38>
 8002df0:	4629      	mov	r1, r5
 8002df2:	4640      	mov	r0, r8
 8002df4:	47c8      	blx	r9
 8002df6:	4306      	orrs	r6, r0
 8002df8:	3568      	adds	r5, #104	; 0x68
 8002dfa:	e7ee      	b.n	8002dda <_fwalk_reent+0x1a>

08002dfc <__swhatbuf_r>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	460e      	mov	r6, r1
 8002e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e04:	b090      	sub	sp, #64	; 0x40
 8002e06:	2900      	cmp	r1, #0
 8002e08:	4614      	mov	r4, r2
 8002e0a:	461d      	mov	r5, r3
 8002e0c:	da07      	bge.n	8002e1e <__swhatbuf_r+0x22>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	89b3      	ldrh	r3, [r6, #12]
 8002e14:	061a      	lsls	r2, r3, #24
 8002e16:	d410      	bmi.n	8002e3a <__swhatbuf_r+0x3e>
 8002e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e1c:	e00e      	b.n	8002e3c <__swhatbuf_r+0x40>
 8002e1e:	aa01      	add	r2, sp, #4
 8002e20:	f000 fc46 	bl	80036b0 <_fstat_r>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	dbf2      	blt.n	8002e0e <__swhatbuf_r+0x12>
 8002e28:	9a02      	ldr	r2, [sp, #8]
 8002e2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e32:	425a      	negs	r2, r3
 8002e34:	415a      	adcs	r2, r3
 8002e36:	602a      	str	r2, [r5, #0]
 8002e38:	e7ee      	b.n	8002e18 <__swhatbuf_r+0x1c>
 8002e3a:	2340      	movs	r3, #64	; 0x40
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	b010      	add	sp, #64	; 0x40
 8002e42:	bd70      	pop	{r4, r5, r6, pc}

08002e44 <__smakebuf_r>:
 8002e44:	898b      	ldrh	r3, [r1, #12]
 8002e46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e48:	079d      	lsls	r5, r3, #30
 8002e4a:	4606      	mov	r6, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	d507      	bpl.n	8002e60 <__smakebuf_r+0x1c>
 8002e50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	6123      	str	r3, [r4, #16]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	6163      	str	r3, [r4, #20]
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	ab01      	add	r3, sp, #4
 8002e62:	466a      	mov	r2, sp
 8002e64:	f7ff ffca 	bl	8002dfc <__swhatbuf_r>
 8002e68:	9900      	ldr	r1, [sp, #0]
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f000 f875 	bl	8002f5c <_malloc_r>
 8002e72:	b948      	cbnz	r0, 8002e88 <__smakebuf_r+0x44>
 8002e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e78:	059a      	lsls	r2, r3, #22
 8002e7a:	d4ef      	bmi.n	8002e5c <__smakebuf_r+0x18>
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	81a3      	strh	r3, [r4, #12]
 8002e86:	e7e3      	b.n	8002e50 <__smakebuf_r+0xc>
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <__smakebuf_r+0x7c>)
 8002e8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	6020      	str	r0, [r4, #0]
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	81a3      	strh	r3, [r4, #12]
 8002e96:	9b00      	ldr	r3, [sp, #0]
 8002e98:	6120      	str	r0, [r4, #16]
 8002e9a:	6163      	str	r3, [r4, #20]
 8002e9c:	9b01      	ldr	r3, [sp, #4]
 8002e9e:	b15b      	cbz	r3, 8002eb8 <__smakebuf_r+0x74>
 8002ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	f000 fc15 	bl	80036d4 <_isatty_r>
 8002eaa:	b128      	cbz	r0, 8002eb8 <__smakebuf_r+0x74>
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	81a3      	strh	r3, [r4, #12]
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	431d      	orrs	r5, r3
 8002ebc:	81a5      	strh	r5, [r4, #12]
 8002ebe:	e7cd      	b.n	8002e5c <__smakebuf_r+0x18>
 8002ec0:	08002c69 	.word	0x08002c69

08002ec4 <_free_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	2900      	cmp	r1, #0
 8002eca:	d043      	beq.n	8002f54 <_free_r+0x90>
 8002ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed0:	1f0c      	subs	r4, r1, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bfb8      	it	lt
 8002ed6:	18e4      	addlt	r4, r4, r3
 8002ed8:	f000 fc2c 	bl	8003734 <__malloc_lock>
 8002edc:	4a1e      	ldr	r2, [pc, #120]	; (8002f58 <_free_r+0x94>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	b933      	cbnz	r3, 8002ef2 <_free_r+0x2e>
 8002ee4:	6063      	str	r3, [r4, #4]
 8002ee6:	6014      	str	r4, [r2, #0]
 8002ee8:	4628      	mov	r0, r5
 8002eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eee:	f000 bc22 	b.w	8003736 <__malloc_unlock>
 8002ef2:	42a3      	cmp	r3, r4
 8002ef4:	d90b      	bls.n	8002f0e <_free_r+0x4a>
 8002ef6:	6821      	ldr	r1, [r4, #0]
 8002ef8:	1862      	adds	r2, r4, r1
 8002efa:	4293      	cmp	r3, r2
 8002efc:	bf01      	itttt	eq
 8002efe:	681a      	ldreq	r2, [r3, #0]
 8002f00:	685b      	ldreq	r3, [r3, #4]
 8002f02:	1852      	addeq	r2, r2, r1
 8002f04:	6022      	streq	r2, [r4, #0]
 8002f06:	6063      	str	r3, [r4, #4]
 8002f08:	6004      	str	r4, [r0, #0]
 8002f0a:	e7ed      	b.n	8002ee8 <_free_r+0x24>
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	b10a      	cbz	r2, 8002f16 <_free_r+0x52>
 8002f12:	42a2      	cmp	r2, r4
 8002f14:	d9fa      	bls.n	8002f0c <_free_r+0x48>
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	1858      	adds	r0, r3, r1
 8002f1a:	42a0      	cmp	r0, r4
 8002f1c:	d10b      	bne.n	8002f36 <_free_r+0x72>
 8002f1e:	6820      	ldr	r0, [r4, #0]
 8002f20:	4401      	add	r1, r0
 8002f22:	1858      	adds	r0, r3, r1
 8002f24:	4282      	cmp	r2, r0
 8002f26:	6019      	str	r1, [r3, #0]
 8002f28:	d1de      	bne.n	8002ee8 <_free_r+0x24>
 8002f2a:	6810      	ldr	r0, [r2, #0]
 8002f2c:	6852      	ldr	r2, [r2, #4]
 8002f2e:	4401      	add	r1, r0
 8002f30:	6019      	str	r1, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	e7d8      	b.n	8002ee8 <_free_r+0x24>
 8002f36:	d902      	bls.n	8002f3e <_free_r+0x7a>
 8002f38:	230c      	movs	r3, #12
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	e7d4      	b.n	8002ee8 <_free_r+0x24>
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	1821      	adds	r1, r4, r0
 8002f42:	428a      	cmp	r2, r1
 8002f44:	bf01      	itttt	eq
 8002f46:	6811      	ldreq	r1, [r2, #0]
 8002f48:	6852      	ldreq	r2, [r2, #4]
 8002f4a:	1809      	addeq	r1, r1, r0
 8002f4c:	6021      	streq	r1, [r4, #0]
 8002f4e:	6062      	str	r2, [r4, #4]
 8002f50:	605c      	str	r4, [r3, #4]
 8002f52:	e7c9      	b.n	8002ee8 <_free_r+0x24>
 8002f54:	bd38      	pop	{r3, r4, r5, pc}
 8002f56:	bf00      	nop
 8002f58:	200000a0 	.word	0x200000a0

08002f5c <_malloc_r>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	1ccd      	adds	r5, r1, #3
 8002f60:	f025 0503 	bic.w	r5, r5, #3
 8002f64:	3508      	adds	r5, #8
 8002f66:	2d0c      	cmp	r5, #12
 8002f68:	bf38      	it	cc
 8002f6a:	250c      	movcc	r5, #12
 8002f6c:	2d00      	cmp	r5, #0
 8002f6e:	4606      	mov	r6, r0
 8002f70:	db01      	blt.n	8002f76 <_malloc_r+0x1a>
 8002f72:	42a9      	cmp	r1, r5
 8002f74:	d903      	bls.n	8002f7e <_malloc_r+0x22>
 8002f76:	230c      	movs	r3, #12
 8002f78:	6033      	str	r3, [r6, #0]
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	bd70      	pop	{r4, r5, r6, pc}
 8002f7e:	f000 fbd9 	bl	8003734 <__malloc_lock>
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <_malloc_r+0xb4>)
 8002f84:	6814      	ldr	r4, [r2, #0]
 8002f86:	4621      	mov	r1, r4
 8002f88:	b991      	cbnz	r1, 8002fb0 <_malloc_r+0x54>
 8002f8a:	4c22      	ldr	r4, [pc, #136]	; (8003014 <_malloc_r+0xb8>)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	b91b      	cbnz	r3, 8002f98 <_malloc_r+0x3c>
 8002f90:	4630      	mov	r0, r6
 8002f92:	f000 fb17 	bl	80035c4 <_sbrk_r>
 8002f96:	6020      	str	r0, [r4, #0]
 8002f98:	4629      	mov	r1, r5
 8002f9a:	4630      	mov	r0, r6
 8002f9c:	f000 fb12 	bl	80035c4 <_sbrk_r>
 8002fa0:	1c43      	adds	r3, r0, #1
 8002fa2:	d126      	bne.n	8002ff2 <_malloc_r+0x96>
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	4630      	mov	r0, r6
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	f000 fbc4 	bl	8003736 <__malloc_unlock>
 8002fae:	e7e4      	b.n	8002f7a <_malloc_r+0x1e>
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	1b5b      	subs	r3, r3, r5
 8002fb4:	d41a      	bmi.n	8002fec <_malloc_r+0x90>
 8002fb6:	2b0b      	cmp	r3, #11
 8002fb8:	d90f      	bls.n	8002fda <_malloc_r+0x7e>
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	18cc      	adds	r4, r1, r3
 8002fbe:	50cd      	str	r5, [r1, r3]
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f000 fbb8 	bl	8003736 <__malloc_unlock>
 8002fc6:	f104 000b 	add.w	r0, r4, #11
 8002fca:	1d23      	adds	r3, r4, #4
 8002fcc:	f020 0007 	bic.w	r0, r0, #7
 8002fd0:	1ac3      	subs	r3, r0, r3
 8002fd2:	d01b      	beq.n	800300c <_malloc_r+0xb0>
 8002fd4:	425a      	negs	r2, r3
 8002fd6:	50e2      	str	r2, [r4, r3]
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	428c      	cmp	r4, r1
 8002fdc:	bf0b      	itete	eq
 8002fde:	6863      	ldreq	r3, [r4, #4]
 8002fe0:	684b      	ldrne	r3, [r1, #4]
 8002fe2:	6013      	streq	r3, [r2, #0]
 8002fe4:	6063      	strne	r3, [r4, #4]
 8002fe6:	bf18      	it	ne
 8002fe8:	460c      	movne	r4, r1
 8002fea:	e7e9      	b.n	8002fc0 <_malloc_r+0x64>
 8002fec:	460c      	mov	r4, r1
 8002fee:	6849      	ldr	r1, [r1, #4]
 8002ff0:	e7ca      	b.n	8002f88 <_malloc_r+0x2c>
 8002ff2:	1cc4      	adds	r4, r0, #3
 8002ff4:	f024 0403 	bic.w	r4, r4, #3
 8002ff8:	42a0      	cmp	r0, r4
 8002ffa:	d005      	beq.n	8003008 <_malloc_r+0xac>
 8002ffc:	1a21      	subs	r1, r4, r0
 8002ffe:	4630      	mov	r0, r6
 8003000:	f000 fae0 	bl	80035c4 <_sbrk_r>
 8003004:	3001      	adds	r0, #1
 8003006:	d0cd      	beq.n	8002fa4 <_malloc_r+0x48>
 8003008:	6025      	str	r5, [r4, #0]
 800300a:	e7d9      	b.n	8002fc0 <_malloc_r+0x64>
 800300c:	bd70      	pop	{r4, r5, r6, pc}
 800300e:	bf00      	nop
 8003010:	200000a0 	.word	0x200000a0
 8003014:	200000a4 	.word	0x200000a4

08003018 <__sfputc_r>:
 8003018:	6893      	ldr	r3, [r2, #8]
 800301a:	b410      	push	{r4}
 800301c:	3b01      	subs	r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	da08      	bge.n	8003036 <__sfputc_r+0x1e>
 8003024:	6994      	ldr	r4, [r2, #24]
 8003026:	42a3      	cmp	r3, r4
 8003028:	db02      	blt.n	8003030 <__sfputc_r+0x18>
 800302a:	b2cb      	uxtb	r3, r1
 800302c:	2b0a      	cmp	r3, #10
 800302e:	d102      	bne.n	8003036 <__sfputc_r+0x1e>
 8003030:	bc10      	pop	{r4}
 8003032:	f7ff bca7 	b.w	8002984 <__swbuf_r>
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	1c58      	adds	r0, r3, #1
 800303a:	6010      	str	r0, [r2, #0]
 800303c:	7019      	strb	r1, [r3, #0]
 800303e:	b2c8      	uxtb	r0, r1
 8003040:	bc10      	pop	{r4}
 8003042:	4770      	bx	lr

08003044 <__sfputs_r>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	4606      	mov	r6, r0
 8003048:	460f      	mov	r7, r1
 800304a:	4614      	mov	r4, r2
 800304c:	18d5      	adds	r5, r2, r3
 800304e:	42ac      	cmp	r4, r5
 8003050:	d101      	bne.n	8003056 <__sfputs_r+0x12>
 8003052:	2000      	movs	r0, #0
 8003054:	e007      	b.n	8003066 <__sfputs_r+0x22>
 8003056:	463a      	mov	r2, r7
 8003058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800305c:	4630      	mov	r0, r6
 800305e:	f7ff ffdb 	bl	8003018 <__sfputc_r>
 8003062:	1c43      	adds	r3, r0, #1
 8003064:	d1f3      	bne.n	800304e <__sfputs_r+0xa>
 8003066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003068 <_vfiprintf_r>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	b09d      	sub	sp, #116	; 0x74
 800306e:	460c      	mov	r4, r1
 8003070:	4617      	mov	r7, r2
 8003072:	9303      	str	r3, [sp, #12]
 8003074:	4606      	mov	r6, r0
 8003076:	b118      	cbz	r0, 8003080 <_vfiprintf_r+0x18>
 8003078:	6983      	ldr	r3, [r0, #24]
 800307a:	b90b      	cbnz	r3, 8003080 <_vfiprintf_r+0x18>
 800307c:	f7ff fe34 	bl	8002ce8 <__sinit>
 8003080:	4b7c      	ldr	r3, [pc, #496]	; (8003274 <_vfiprintf_r+0x20c>)
 8003082:	429c      	cmp	r4, r3
 8003084:	d157      	bne.n	8003136 <_vfiprintf_r+0xce>
 8003086:	6874      	ldr	r4, [r6, #4]
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	0718      	lsls	r0, r3, #28
 800308c:	d55d      	bpl.n	800314a <_vfiprintf_r+0xe2>
 800308e:	6923      	ldr	r3, [r4, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05a      	beq.n	800314a <_vfiprintf_r+0xe2>
 8003094:	2300      	movs	r3, #0
 8003096:	9309      	str	r3, [sp, #36]	; 0x24
 8003098:	2320      	movs	r3, #32
 800309a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800309e:	2330      	movs	r3, #48	; 0x30
 80030a0:	f04f 0b01 	mov.w	fp, #1
 80030a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030a8:	46b8      	mov	r8, r7
 80030aa:	4645      	mov	r5, r8
 80030ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d155      	bne.n	8003160 <_vfiprintf_r+0xf8>
 80030b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80030b8:	d00b      	beq.n	80030d2 <_vfiprintf_r+0x6a>
 80030ba:	4653      	mov	r3, sl
 80030bc:	463a      	mov	r2, r7
 80030be:	4621      	mov	r1, r4
 80030c0:	4630      	mov	r0, r6
 80030c2:	f7ff ffbf 	bl	8003044 <__sfputs_r>
 80030c6:	3001      	adds	r0, #1
 80030c8:	f000 80c4 	beq.w	8003254 <_vfiprintf_r+0x1ec>
 80030cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ce:	4453      	add	r3, sl
 80030d0:	9309      	str	r3, [sp, #36]	; 0x24
 80030d2:	f898 3000 	ldrb.w	r3, [r8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80bc 	beq.w	8003254 <_vfiprintf_r+0x1ec>
 80030dc:	2300      	movs	r3, #0
 80030de:	f04f 32ff 	mov.w	r2, #4294967295
 80030e2:	9304      	str	r3, [sp, #16]
 80030e4:	9307      	str	r3, [sp, #28]
 80030e6:	9205      	str	r2, [sp, #20]
 80030e8:	9306      	str	r3, [sp, #24]
 80030ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030ee:	931a      	str	r3, [sp, #104]	; 0x68
 80030f0:	2205      	movs	r2, #5
 80030f2:	7829      	ldrb	r1, [r5, #0]
 80030f4:	4860      	ldr	r0, [pc, #384]	; (8003278 <_vfiprintf_r+0x210>)
 80030f6:	f000 fb0f 	bl	8003718 <memchr>
 80030fa:	f105 0801 	add.w	r8, r5, #1
 80030fe:	9b04      	ldr	r3, [sp, #16]
 8003100:	2800      	cmp	r0, #0
 8003102:	d131      	bne.n	8003168 <_vfiprintf_r+0x100>
 8003104:	06d9      	lsls	r1, r3, #27
 8003106:	bf44      	itt	mi
 8003108:	2220      	movmi	r2, #32
 800310a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800310e:	071a      	lsls	r2, r3, #28
 8003110:	bf44      	itt	mi
 8003112:	222b      	movmi	r2, #43	; 0x2b
 8003114:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003118:	782a      	ldrb	r2, [r5, #0]
 800311a:	2a2a      	cmp	r2, #42	; 0x2a
 800311c:	d02c      	beq.n	8003178 <_vfiprintf_r+0x110>
 800311e:	2100      	movs	r1, #0
 8003120:	200a      	movs	r0, #10
 8003122:	9a07      	ldr	r2, [sp, #28]
 8003124:	46a8      	mov	r8, r5
 8003126:	f898 3000 	ldrb.w	r3, [r8]
 800312a:	3501      	adds	r5, #1
 800312c:	3b30      	subs	r3, #48	; 0x30
 800312e:	2b09      	cmp	r3, #9
 8003130:	d96d      	bls.n	800320e <_vfiprintf_r+0x1a6>
 8003132:	b371      	cbz	r1, 8003192 <_vfiprintf_r+0x12a>
 8003134:	e026      	b.n	8003184 <_vfiprintf_r+0x11c>
 8003136:	4b51      	ldr	r3, [pc, #324]	; (800327c <_vfiprintf_r+0x214>)
 8003138:	429c      	cmp	r4, r3
 800313a:	d101      	bne.n	8003140 <_vfiprintf_r+0xd8>
 800313c:	68b4      	ldr	r4, [r6, #8]
 800313e:	e7a3      	b.n	8003088 <_vfiprintf_r+0x20>
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <_vfiprintf_r+0x218>)
 8003142:	429c      	cmp	r4, r3
 8003144:	bf08      	it	eq
 8003146:	68f4      	ldreq	r4, [r6, #12]
 8003148:	e79e      	b.n	8003088 <_vfiprintf_r+0x20>
 800314a:	4621      	mov	r1, r4
 800314c:	4630      	mov	r0, r6
 800314e:	f7ff fc6b 	bl	8002a28 <__swsetup_r>
 8003152:	2800      	cmp	r0, #0
 8003154:	d09e      	beq.n	8003094 <_vfiprintf_r+0x2c>
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	b01d      	add	sp, #116	; 0x74
 800315c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003160:	2b25      	cmp	r3, #37	; 0x25
 8003162:	d0a7      	beq.n	80030b4 <_vfiprintf_r+0x4c>
 8003164:	46a8      	mov	r8, r5
 8003166:	e7a0      	b.n	80030aa <_vfiprintf_r+0x42>
 8003168:	4a43      	ldr	r2, [pc, #268]	; (8003278 <_vfiprintf_r+0x210>)
 800316a:	4645      	mov	r5, r8
 800316c:	1a80      	subs	r0, r0, r2
 800316e:	fa0b f000 	lsl.w	r0, fp, r0
 8003172:	4318      	orrs	r0, r3
 8003174:	9004      	str	r0, [sp, #16]
 8003176:	e7bb      	b.n	80030f0 <_vfiprintf_r+0x88>
 8003178:	9a03      	ldr	r2, [sp, #12]
 800317a:	1d11      	adds	r1, r2, #4
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	9103      	str	r1, [sp, #12]
 8003180:	2a00      	cmp	r2, #0
 8003182:	db01      	blt.n	8003188 <_vfiprintf_r+0x120>
 8003184:	9207      	str	r2, [sp, #28]
 8003186:	e004      	b.n	8003192 <_vfiprintf_r+0x12a>
 8003188:	4252      	negs	r2, r2
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	9207      	str	r2, [sp, #28]
 8003190:	9304      	str	r3, [sp, #16]
 8003192:	f898 3000 	ldrb.w	r3, [r8]
 8003196:	2b2e      	cmp	r3, #46	; 0x2e
 8003198:	d110      	bne.n	80031bc <_vfiprintf_r+0x154>
 800319a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800319e:	f108 0101 	add.w	r1, r8, #1
 80031a2:	2b2a      	cmp	r3, #42	; 0x2a
 80031a4:	d137      	bne.n	8003216 <_vfiprintf_r+0x1ae>
 80031a6:	9b03      	ldr	r3, [sp, #12]
 80031a8:	f108 0802 	add.w	r8, r8, #2
 80031ac:	1d1a      	adds	r2, r3, #4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	9203      	str	r2, [sp, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bfb8      	it	lt
 80031b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031ba:	9305      	str	r3, [sp, #20]
 80031bc:	4d31      	ldr	r5, [pc, #196]	; (8003284 <_vfiprintf_r+0x21c>)
 80031be:	2203      	movs	r2, #3
 80031c0:	f898 1000 	ldrb.w	r1, [r8]
 80031c4:	4628      	mov	r0, r5
 80031c6:	f000 faa7 	bl	8003718 <memchr>
 80031ca:	b140      	cbz	r0, 80031de <_vfiprintf_r+0x176>
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	1b40      	subs	r0, r0, r5
 80031d0:	fa03 f000 	lsl.w	r0, r3, r0
 80031d4:	9b04      	ldr	r3, [sp, #16]
 80031d6:	f108 0801 	add.w	r8, r8, #1
 80031da:	4303      	orrs	r3, r0
 80031dc:	9304      	str	r3, [sp, #16]
 80031de:	f898 1000 	ldrb.w	r1, [r8]
 80031e2:	2206      	movs	r2, #6
 80031e4:	4828      	ldr	r0, [pc, #160]	; (8003288 <_vfiprintf_r+0x220>)
 80031e6:	f108 0701 	add.w	r7, r8, #1
 80031ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031ee:	f000 fa93 	bl	8003718 <memchr>
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d034      	beq.n	8003260 <_vfiprintf_r+0x1f8>
 80031f6:	4b25      	ldr	r3, [pc, #148]	; (800328c <_vfiprintf_r+0x224>)
 80031f8:	bb03      	cbnz	r3, 800323c <_vfiprintf_r+0x1d4>
 80031fa:	9b03      	ldr	r3, [sp, #12]
 80031fc:	3307      	adds	r3, #7
 80031fe:	f023 0307 	bic.w	r3, r3, #7
 8003202:	3308      	adds	r3, #8
 8003204:	9303      	str	r3, [sp, #12]
 8003206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003208:	444b      	add	r3, r9
 800320a:	9309      	str	r3, [sp, #36]	; 0x24
 800320c:	e74c      	b.n	80030a8 <_vfiprintf_r+0x40>
 800320e:	fb00 3202 	mla	r2, r0, r2, r3
 8003212:	2101      	movs	r1, #1
 8003214:	e786      	b.n	8003124 <_vfiprintf_r+0xbc>
 8003216:	2300      	movs	r3, #0
 8003218:	250a      	movs	r5, #10
 800321a:	4618      	mov	r0, r3
 800321c:	9305      	str	r3, [sp, #20]
 800321e:	4688      	mov	r8, r1
 8003220:	f898 2000 	ldrb.w	r2, [r8]
 8003224:	3101      	adds	r1, #1
 8003226:	3a30      	subs	r2, #48	; 0x30
 8003228:	2a09      	cmp	r2, #9
 800322a:	d903      	bls.n	8003234 <_vfiprintf_r+0x1cc>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0c5      	beq.n	80031bc <_vfiprintf_r+0x154>
 8003230:	9005      	str	r0, [sp, #20]
 8003232:	e7c3      	b.n	80031bc <_vfiprintf_r+0x154>
 8003234:	fb05 2000 	mla	r0, r5, r0, r2
 8003238:	2301      	movs	r3, #1
 800323a:	e7f0      	b.n	800321e <_vfiprintf_r+0x1b6>
 800323c:	ab03      	add	r3, sp, #12
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4622      	mov	r2, r4
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <_vfiprintf_r+0x228>)
 8003244:	a904      	add	r1, sp, #16
 8003246:	4630      	mov	r0, r6
 8003248:	f3af 8000 	nop.w
 800324c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003250:	4681      	mov	r9, r0
 8003252:	d1d8      	bne.n	8003206 <_vfiprintf_r+0x19e>
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	065b      	lsls	r3, r3, #25
 8003258:	f53f af7d 	bmi.w	8003156 <_vfiprintf_r+0xee>
 800325c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800325e:	e77c      	b.n	800315a <_vfiprintf_r+0xf2>
 8003260:	ab03      	add	r3, sp, #12
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	4622      	mov	r2, r4
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <_vfiprintf_r+0x228>)
 8003268:	a904      	add	r1, sp, #16
 800326a:	4630      	mov	r0, r6
 800326c:	f000 f88a 	bl	8003384 <_printf_i>
 8003270:	e7ec      	b.n	800324c <_vfiprintf_r+0x1e4>
 8003272:	bf00      	nop
 8003274:	0800383c 	.word	0x0800383c
 8003278:	08003880 	.word	0x08003880
 800327c:	0800385c 	.word	0x0800385c
 8003280:	0800381c 	.word	0x0800381c
 8003284:	08003886 	.word	0x08003886
 8003288:	0800388a 	.word	0x0800388a
 800328c:	00000000 	.word	0x00000000
 8003290:	08003045 	.word	0x08003045

08003294 <_printf_common>:
 8003294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003298:	4691      	mov	r9, r2
 800329a:	461f      	mov	r7, r3
 800329c:	688a      	ldr	r2, [r1, #8]
 800329e:	690b      	ldr	r3, [r1, #16]
 80032a0:	4606      	mov	r6, r0
 80032a2:	4293      	cmp	r3, r2
 80032a4:	bfb8      	it	lt
 80032a6:	4613      	movlt	r3, r2
 80032a8:	f8c9 3000 	str.w	r3, [r9]
 80032ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032b0:	460c      	mov	r4, r1
 80032b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032b6:	b112      	cbz	r2, 80032be <_printf_common+0x2a>
 80032b8:	3301      	adds	r3, #1
 80032ba:	f8c9 3000 	str.w	r3, [r9]
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	0699      	lsls	r1, r3, #26
 80032c2:	bf42      	ittt	mi
 80032c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032c8:	3302      	addmi	r3, #2
 80032ca:	f8c9 3000 	strmi.w	r3, [r9]
 80032ce:	6825      	ldr	r5, [r4, #0]
 80032d0:	f015 0506 	ands.w	r5, r5, #6
 80032d4:	d107      	bne.n	80032e6 <_printf_common+0x52>
 80032d6:	f104 0a19 	add.w	sl, r4, #25
 80032da:	68e3      	ldr	r3, [r4, #12]
 80032dc:	f8d9 2000 	ldr.w	r2, [r9]
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	429d      	cmp	r5, r3
 80032e4:	db2a      	blt.n	800333c <_printf_common+0xa8>
 80032e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032ea:	6822      	ldr	r2, [r4, #0]
 80032ec:	3300      	adds	r3, #0
 80032ee:	bf18      	it	ne
 80032f0:	2301      	movne	r3, #1
 80032f2:	0692      	lsls	r2, r2, #26
 80032f4:	d42f      	bmi.n	8003356 <_printf_common+0xc2>
 80032f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032fa:	4639      	mov	r1, r7
 80032fc:	4630      	mov	r0, r6
 80032fe:	47c0      	blx	r8
 8003300:	3001      	adds	r0, #1
 8003302:	d022      	beq.n	800334a <_printf_common+0xb6>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	68e5      	ldr	r5, [r4, #12]
 8003308:	f003 0306 	and.w	r3, r3, #6
 800330c:	2b04      	cmp	r3, #4
 800330e:	bf18      	it	ne
 8003310:	2500      	movne	r5, #0
 8003312:	f8d9 2000 	ldr.w	r2, [r9]
 8003316:	f04f 0900 	mov.w	r9, #0
 800331a:	bf08      	it	eq
 800331c:	1aad      	subeq	r5, r5, r2
 800331e:	68a3      	ldr	r3, [r4, #8]
 8003320:	6922      	ldr	r2, [r4, #16]
 8003322:	bf08      	it	eq
 8003324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003328:	4293      	cmp	r3, r2
 800332a:	bfc4      	itt	gt
 800332c:	1a9b      	subgt	r3, r3, r2
 800332e:	18ed      	addgt	r5, r5, r3
 8003330:	341a      	adds	r4, #26
 8003332:	454d      	cmp	r5, r9
 8003334:	d11b      	bne.n	800336e <_printf_common+0xda>
 8003336:	2000      	movs	r0, #0
 8003338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333c:	2301      	movs	r3, #1
 800333e:	4652      	mov	r2, sl
 8003340:	4639      	mov	r1, r7
 8003342:	4630      	mov	r0, r6
 8003344:	47c0      	blx	r8
 8003346:	3001      	adds	r0, #1
 8003348:	d103      	bne.n	8003352 <_printf_common+0xbe>
 800334a:	f04f 30ff 	mov.w	r0, #4294967295
 800334e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003352:	3501      	adds	r5, #1
 8003354:	e7c1      	b.n	80032da <_printf_common+0x46>
 8003356:	2030      	movs	r0, #48	; 0x30
 8003358:	18e1      	adds	r1, r4, r3
 800335a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003364:	4422      	add	r2, r4
 8003366:	3302      	adds	r3, #2
 8003368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800336c:	e7c3      	b.n	80032f6 <_printf_common+0x62>
 800336e:	2301      	movs	r3, #1
 8003370:	4622      	mov	r2, r4
 8003372:	4639      	mov	r1, r7
 8003374:	4630      	mov	r0, r6
 8003376:	47c0      	blx	r8
 8003378:	3001      	adds	r0, #1
 800337a:	d0e6      	beq.n	800334a <_printf_common+0xb6>
 800337c:	f109 0901 	add.w	r9, r9, #1
 8003380:	e7d7      	b.n	8003332 <_printf_common+0x9e>
	...

08003384 <_printf_i>:
 8003384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003388:	4617      	mov	r7, r2
 800338a:	7e0a      	ldrb	r2, [r1, #24]
 800338c:	b085      	sub	sp, #20
 800338e:	2a6e      	cmp	r2, #110	; 0x6e
 8003390:	4698      	mov	r8, r3
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003398:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800339c:	f000 80bc 	beq.w	8003518 <_printf_i+0x194>
 80033a0:	d81a      	bhi.n	80033d8 <_printf_i+0x54>
 80033a2:	2a63      	cmp	r2, #99	; 0x63
 80033a4:	d02e      	beq.n	8003404 <_printf_i+0x80>
 80033a6:	d80a      	bhi.n	80033be <_printf_i+0x3a>
 80033a8:	2a00      	cmp	r2, #0
 80033aa:	f000 80c8 	beq.w	800353e <_printf_i+0x1ba>
 80033ae:	2a58      	cmp	r2, #88	; 0x58
 80033b0:	f000 808a 	beq.w	80034c8 <_printf_i+0x144>
 80033b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033b8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033bc:	e02a      	b.n	8003414 <_printf_i+0x90>
 80033be:	2a64      	cmp	r2, #100	; 0x64
 80033c0:	d001      	beq.n	80033c6 <_printf_i+0x42>
 80033c2:	2a69      	cmp	r2, #105	; 0x69
 80033c4:	d1f6      	bne.n	80033b4 <_printf_i+0x30>
 80033c6:	6821      	ldr	r1, [r4, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033ce:	d023      	beq.n	8003418 <_printf_i+0x94>
 80033d0:	1d11      	adds	r1, r2, #4
 80033d2:	6019      	str	r1, [r3, #0]
 80033d4:	6813      	ldr	r3, [r2, #0]
 80033d6:	e027      	b.n	8003428 <_printf_i+0xa4>
 80033d8:	2a73      	cmp	r2, #115	; 0x73
 80033da:	f000 80b4 	beq.w	8003546 <_printf_i+0x1c2>
 80033de:	d808      	bhi.n	80033f2 <_printf_i+0x6e>
 80033e0:	2a6f      	cmp	r2, #111	; 0x6f
 80033e2:	d02a      	beq.n	800343a <_printf_i+0xb6>
 80033e4:	2a70      	cmp	r2, #112	; 0x70
 80033e6:	d1e5      	bne.n	80033b4 <_printf_i+0x30>
 80033e8:	680a      	ldr	r2, [r1, #0]
 80033ea:	f042 0220 	orr.w	r2, r2, #32
 80033ee:	600a      	str	r2, [r1, #0]
 80033f0:	e003      	b.n	80033fa <_printf_i+0x76>
 80033f2:	2a75      	cmp	r2, #117	; 0x75
 80033f4:	d021      	beq.n	800343a <_printf_i+0xb6>
 80033f6:	2a78      	cmp	r2, #120	; 0x78
 80033f8:	d1dc      	bne.n	80033b4 <_printf_i+0x30>
 80033fa:	2278      	movs	r2, #120	; 0x78
 80033fc:	496f      	ldr	r1, [pc, #444]	; (80035bc <_printf_i+0x238>)
 80033fe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003402:	e064      	b.n	80034ce <_printf_i+0x14a>
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800340a:	1d11      	adds	r1, r2, #4
 800340c:	6019      	str	r1, [r3, #0]
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003414:	2301      	movs	r3, #1
 8003416:	e0a3      	b.n	8003560 <_printf_i+0x1dc>
 8003418:	f011 0f40 	tst.w	r1, #64	; 0x40
 800341c:	f102 0104 	add.w	r1, r2, #4
 8003420:	6019      	str	r1, [r3, #0]
 8003422:	d0d7      	beq.n	80033d4 <_printf_i+0x50>
 8003424:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003428:	2b00      	cmp	r3, #0
 800342a:	da03      	bge.n	8003434 <_printf_i+0xb0>
 800342c:	222d      	movs	r2, #45	; 0x2d
 800342e:	425b      	negs	r3, r3
 8003430:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003434:	4962      	ldr	r1, [pc, #392]	; (80035c0 <_printf_i+0x23c>)
 8003436:	220a      	movs	r2, #10
 8003438:	e017      	b.n	800346a <_printf_i+0xe6>
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	6819      	ldr	r1, [r3, #0]
 800343e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003442:	d003      	beq.n	800344c <_printf_i+0xc8>
 8003444:	1d08      	adds	r0, r1, #4
 8003446:	6018      	str	r0, [r3, #0]
 8003448:	680b      	ldr	r3, [r1, #0]
 800344a:	e006      	b.n	800345a <_printf_i+0xd6>
 800344c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003450:	f101 0004 	add.w	r0, r1, #4
 8003454:	6018      	str	r0, [r3, #0]
 8003456:	d0f7      	beq.n	8003448 <_printf_i+0xc4>
 8003458:	880b      	ldrh	r3, [r1, #0]
 800345a:	2a6f      	cmp	r2, #111	; 0x6f
 800345c:	bf14      	ite	ne
 800345e:	220a      	movne	r2, #10
 8003460:	2208      	moveq	r2, #8
 8003462:	4957      	ldr	r1, [pc, #348]	; (80035c0 <_printf_i+0x23c>)
 8003464:	2000      	movs	r0, #0
 8003466:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800346a:	6865      	ldr	r5, [r4, #4]
 800346c:	2d00      	cmp	r5, #0
 800346e:	60a5      	str	r5, [r4, #8]
 8003470:	f2c0 809c 	blt.w	80035ac <_printf_i+0x228>
 8003474:	6820      	ldr	r0, [r4, #0]
 8003476:	f020 0004 	bic.w	r0, r0, #4
 800347a:	6020      	str	r0, [r4, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d13f      	bne.n	8003500 <_printf_i+0x17c>
 8003480:	2d00      	cmp	r5, #0
 8003482:	f040 8095 	bne.w	80035b0 <_printf_i+0x22c>
 8003486:	4675      	mov	r5, lr
 8003488:	2a08      	cmp	r2, #8
 800348a:	d10b      	bne.n	80034a4 <_printf_i+0x120>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	07da      	lsls	r2, r3, #31
 8003490:	d508      	bpl.n	80034a4 <_printf_i+0x120>
 8003492:	6923      	ldr	r3, [r4, #16]
 8003494:	6862      	ldr	r2, [r4, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	bfde      	ittt	le
 800349a:	2330      	movle	r3, #48	; 0x30
 800349c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034a4:	ebae 0305 	sub.w	r3, lr, r5
 80034a8:	6123      	str	r3, [r4, #16]
 80034aa:	f8cd 8000 	str.w	r8, [sp]
 80034ae:	463b      	mov	r3, r7
 80034b0:	aa03      	add	r2, sp, #12
 80034b2:	4621      	mov	r1, r4
 80034b4:	4630      	mov	r0, r6
 80034b6:	f7ff feed 	bl	8003294 <_printf_common>
 80034ba:	3001      	adds	r0, #1
 80034bc:	d155      	bne.n	800356a <_printf_i+0x1e6>
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	b005      	add	sp, #20
 80034c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034c8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80034cc:	493c      	ldr	r1, [pc, #240]	; (80035c0 <_printf_i+0x23c>)
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034d6:	f100 0504 	add.w	r5, r0, #4
 80034da:	601d      	str	r5, [r3, #0]
 80034dc:	d001      	beq.n	80034e2 <_printf_i+0x15e>
 80034de:	6803      	ldr	r3, [r0, #0]
 80034e0:	e002      	b.n	80034e8 <_printf_i+0x164>
 80034e2:	0655      	lsls	r5, r2, #25
 80034e4:	d5fb      	bpl.n	80034de <_printf_i+0x15a>
 80034e6:	8803      	ldrh	r3, [r0, #0]
 80034e8:	07d0      	lsls	r0, r2, #31
 80034ea:	bf44      	itt	mi
 80034ec:	f042 0220 	orrmi.w	r2, r2, #32
 80034f0:	6022      	strmi	r2, [r4, #0]
 80034f2:	b91b      	cbnz	r3, 80034fc <_printf_i+0x178>
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	f022 0220 	bic.w	r2, r2, #32
 80034fa:	6022      	str	r2, [r4, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	e7b1      	b.n	8003464 <_printf_i+0xe0>
 8003500:	4675      	mov	r5, lr
 8003502:	fbb3 f0f2 	udiv	r0, r3, r2
 8003506:	fb02 3310 	mls	r3, r2, r0, r3
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003510:	4603      	mov	r3, r0
 8003512:	2800      	cmp	r0, #0
 8003514:	d1f5      	bne.n	8003502 <_printf_i+0x17e>
 8003516:	e7b7      	b.n	8003488 <_printf_i+0x104>
 8003518:	6808      	ldr	r0, [r1, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003520:	6949      	ldr	r1, [r1, #20]
 8003522:	d004      	beq.n	800352e <_printf_i+0x1aa>
 8003524:	1d10      	adds	r0, r2, #4
 8003526:	6018      	str	r0, [r3, #0]
 8003528:	6813      	ldr	r3, [r2, #0]
 800352a:	6019      	str	r1, [r3, #0]
 800352c:	e007      	b.n	800353e <_printf_i+0x1ba>
 800352e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003532:	f102 0004 	add.w	r0, r2, #4
 8003536:	6018      	str	r0, [r3, #0]
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	d0f6      	beq.n	800352a <_printf_i+0x1a6>
 800353c:	8019      	strh	r1, [r3, #0]
 800353e:	2300      	movs	r3, #0
 8003540:	4675      	mov	r5, lr
 8003542:	6123      	str	r3, [r4, #16]
 8003544:	e7b1      	b.n	80034aa <_printf_i+0x126>
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	1d11      	adds	r1, r2, #4
 800354a:	6019      	str	r1, [r3, #0]
 800354c:	6815      	ldr	r5, [r2, #0]
 800354e:	2100      	movs	r1, #0
 8003550:	6862      	ldr	r2, [r4, #4]
 8003552:	4628      	mov	r0, r5
 8003554:	f000 f8e0 	bl	8003718 <memchr>
 8003558:	b108      	cbz	r0, 800355e <_printf_i+0x1da>
 800355a:	1b40      	subs	r0, r0, r5
 800355c:	6060      	str	r0, [r4, #4]
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	6123      	str	r3, [r4, #16]
 8003562:	2300      	movs	r3, #0
 8003564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003568:	e79f      	b.n	80034aa <_printf_i+0x126>
 800356a:	6923      	ldr	r3, [r4, #16]
 800356c:	462a      	mov	r2, r5
 800356e:	4639      	mov	r1, r7
 8003570:	4630      	mov	r0, r6
 8003572:	47c0      	blx	r8
 8003574:	3001      	adds	r0, #1
 8003576:	d0a2      	beq.n	80034be <_printf_i+0x13a>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	079b      	lsls	r3, r3, #30
 800357c:	d507      	bpl.n	800358e <_printf_i+0x20a>
 800357e:	2500      	movs	r5, #0
 8003580:	f104 0919 	add.w	r9, r4, #25
 8003584:	68e3      	ldr	r3, [r4, #12]
 8003586:	9a03      	ldr	r2, [sp, #12]
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	429d      	cmp	r5, r3
 800358c:	db05      	blt.n	800359a <_printf_i+0x216>
 800358e:	68e0      	ldr	r0, [r4, #12]
 8003590:	9b03      	ldr	r3, [sp, #12]
 8003592:	4298      	cmp	r0, r3
 8003594:	bfb8      	it	lt
 8003596:	4618      	movlt	r0, r3
 8003598:	e793      	b.n	80034c2 <_printf_i+0x13e>
 800359a:	2301      	movs	r3, #1
 800359c:	464a      	mov	r2, r9
 800359e:	4639      	mov	r1, r7
 80035a0:	4630      	mov	r0, r6
 80035a2:	47c0      	blx	r8
 80035a4:	3001      	adds	r0, #1
 80035a6:	d08a      	beq.n	80034be <_printf_i+0x13a>
 80035a8:	3501      	adds	r5, #1
 80035aa:	e7eb      	b.n	8003584 <_printf_i+0x200>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1a7      	bne.n	8003500 <_printf_i+0x17c>
 80035b0:	780b      	ldrb	r3, [r1, #0]
 80035b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ba:	e765      	b.n	8003488 <_printf_i+0x104>
 80035bc:	080038a2 	.word	0x080038a2
 80035c0:	08003891 	.word	0x08003891

080035c4 <_sbrk_r>:
 80035c4:	b538      	push	{r3, r4, r5, lr}
 80035c6:	2300      	movs	r3, #0
 80035c8:	4c05      	ldr	r4, [pc, #20]	; (80035e0 <_sbrk_r+0x1c>)
 80035ca:	4605      	mov	r5, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	6023      	str	r3, [r4, #0]
 80035d0:	f7fe fd02 	bl	8001fd8 <_sbrk>
 80035d4:	1c43      	adds	r3, r0, #1
 80035d6:	d102      	bne.n	80035de <_sbrk_r+0x1a>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	b103      	cbz	r3, 80035de <_sbrk_r+0x1a>
 80035dc:	602b      	str	r3, [r5, #0]
 80035de:	bd38      	pop	{r3, r4, r5, pc}
 80035e0:	20000170 	.word	0x20000170

080035e4 <__sread>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	460c      	mov	r4, r1
 80035e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035ec:	f000 f8a4 	bl	8003738 <_read_r>
 80035f0:	2800      	cmp	r0, #0
 80035f2:	bfab      	itete	ge
 80035f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80035f6:	89a3      	ldrhlt	r3, [r4, #12]
 80035f8:	181b      	addge	r3, r3, r0
 80035fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80035fe:	bfac      	ite	ge
 8003600:	6563      	strge	r3, [r4, #84]	; 0x54
 8003602:	81a3      	strhlt	r3, [r4, #12]
 8003604:	bd10      	pop	{r4, pc}

08003606 <__swrite>:
 8003606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360a:	461f      	mov	r7, r3
 800360c:	898b      	ldrh	r3, [r1, #12]
 800360e:	4605      	mov	r5, r0
 8003610:	05db      	lsls	r3, r3, #23
 8003612:	460c      	mov	r4, r1
 8003614:	4616      	mov	r6, r2
 8003616:	d505      	bpl.n	8003624 <__swrite+0x1e>
 8003618:	2302      	movs	r3, #2
 800361a:	2200      	movs	r2, #0
 800361c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003620:	f000 f868 	bl	80036f4 <_lseek_r>
 8003624:	89a3      	ldrh	r3, [r4, #12]
 8003626:	4632      	mov	r2, r6
 8003628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003632:	463b      	mov	r3, r7
 8003634:	4628      	mov	r0, r5
 8003636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800363a:	f000 b817 	b.w	800366c <_write_r>

0800363e <__sseek>:
 800363e:	b510      	push	{r4, lr}
 8003640:	460c      	mov	r4, r1
 8003642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003646:	f000 f855 	bl	80036f4 <_lseek_r>
 800364a:	1c43      	adds	r3, r0, #1
 800364c:	89a3      	ldrh	r3, [r4, #12]
 800364e:	bf15      	itete	ne
 8003650:	6560      	strne	r0, [r4, #84]	; 0x54
 8003652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800365a:	81a3      	strheq	r3, [r4, #12]
 800365c:	bf18      	it	ne
 800365e:	81a3      	strhne	r3, [r4, #12]
 8003660:	bd10      	pop	{r4, pc}

08003662 <__sclose>:
 8003662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003666:	f000 b813 	b.w	8003690 <_close_r>
	...

0800366c <_write_r>:
 800366c:	b538      	push	{r3, r4, r5, lr}
 800366e:	4605      	mov	r5, r0
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	2200      	movs	r2, #0
 8003676:	4c05      	ldr	r4, [pc, #20]	; (800368c <_write_r+0x20>)
 8003678:	6022      	str	r2, [r4, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f7fe fc9e 	bl	8001fbc <_write>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d102      	bne.n	800368a <_write_r+0x1e>
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	b103      	cbz	r3, 800368a <_write_r+0x1e>
 8003688:	602b      	str	r3, [r5, #0]
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	20000170 	.word	0x20000170

08003690 <_close_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	2300      	movs	r3, #0
 8003694:	4c05      	ldr	r4, [pc, #20]	; (80036ac <_close_r+0x1c>)
 8003696:	4605      	mov	r5, r0
 8003698:	4608      	mov	r0, r1
 800369a:	6023      	str	r3, [r4, #0]
 800369c:	f7fe fcb6 	bl	800200c <_close>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_close_r+0x1a>
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_close_r+0x1a>
 80036a8:	602b      	str	r3, [r5, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000170 	.word	0x20000170

080036b0 <_fstat_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	2300      	movs	r3, #0
 80036b4:	4c06      	ldr	r4, [pc, #24]	; (80036d0 <_fstat_r+0x20>)
 80036b6:	4605      	mov	r5, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	6023      	str	r3, [r4, #0]
 80036be:	f7fe fca8 	bl	8002012 <_fstat>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	d102      	bne.n	80036cc <_fstat_r+0x1c>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	b103      	cbz	r3, 80036cc <_fstat_r+0x1c>
 80036ca:	602b      	str	r3, [r5, #0]
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	bf00      	nop
 80036d0:	20000170 	.word	0x20000170

080036d4 <_isatty_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	2300      	movs	r3, #0
 80036d8:	4c05      	ldr	r4, [pc, #20]	; (80036f0 <_isatty_r+0x1c>)
 80036da:	4605      	mov	r5, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	6023      	str	r3, [r4, #0]
 80036e0:	f7fe fc9c 	bl	800201c <_isatty>
 80036e4:	1c43      	adds	r3, r0, #1
 80036e6:	d102      	bne.n	80036ee <_isatty_r+0x1a>
 80036e8:	6823      	ldr	r3, [r4, #0]
 80036ea:	b103      	cbz	r3, 80036ee <_isatty_r+0x1a>
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000170 	.word	0x20000170

080036f4 <_lseek_r>:
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	2200      	movs	r2, #0
 80036fe:	4c05      	ldr	r4, [pc, #20]	; (8003714 <_lseek_r+0x20>)
 8003700:	6022      	str	r2, [r4, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	f7fe fc8c 	bl	8002020 <_lseek>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_lseek_r+0x1e>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	b103      	cbz	r3, 8003712 <_lseek_r+0x1e>
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	20000170 	.word	0x20000170

08003718 <memchr>:
 8003718:	b510      	push	{r4, lr}
 800371a:	b2c9      	uxtb	r1, r1
 800371c:	4402      	add	r2, r0
 800371e:	4290      	cmp	r0, r2
 8003720:	4603      	mov	r3, r0
 8003722:	d101      	bne.n	8003728 <memchr+0x10>
 8003724:	2000      	movs	r0, #0
 8003726:	bd10      	pop	{r4, pc}
 8003728:	781c      	ldrb	r4, [r3, #0]
 800372a:	3001      	adds	r0, #1
 800372c:	428c      	cmp	r4, r1
 800372e:	d1f6      	bne.n	800371e <memchr+0x6>
 8003730:	4618      	mov	r0, r3
 8003732:	bd10      	pop	{r4, pc}

08003734 <__malloc_lock>:
 8003734:	4770      	bx	lr

08003736 <__malloc_unlock>:
 8003736:	4770      	bx	lr

08003738 <_read_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4605      	mov	r5, r0
 800373c:	4608      	mov	r0, r1
 800373e:	4611      	mov	r1, r2
 8003740:	2200      	movs	r2, #0
 8003742:	4c05      	ldr	r4, [pc, #20]	; (8003758 <_read_r+0x20>)
 8003744:	6022      	str	r2, [r4, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	f7fe fc36 	bl	8001fb8 <_read>
 800374c:	1c43      	adds	r3, r0, #1
 800374e:	d102      	bne.n	8003756 <_read_r+0x1e>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	b103      	cbz	r3, 8003756 <_read_r+0x1e>
 8003754:	602b      	str	r3, [r5, #0]
 8003756:	bd38      	pop	{r3, r4, r5, pc}
 8003758:	20000170 	.word	0x20000170

0800375c <_init>:
 800375c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375e:	bf00      	nop
 8003760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003762:	bc08      	pop	{r3}
 8003764:	469e      	mov	lr, r3
 8003766:	4770      	bx	lr

08003768 <_fini>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	bf00      	nop
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr
